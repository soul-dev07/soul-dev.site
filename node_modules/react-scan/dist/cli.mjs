import{spawn as t}from"node:child_process";import{chromium as e,firefox as a,webkit as n,devices as r}from"playwright";import o from"mri";import{intro as i,confirm as s,isCancel as c,cancel as l,spinner as w}from"@clack/prompts";import{bgMagenta as u,dim as d,red as h}from"kleur";import p from"node:fs";(async()=>{i(`${u("[·]")} React Scan`);const m=o(process.argv.slice(2));let _;const b=r[m.device],{browserType:f,channel:y,name:g}=await(async t=>{switch(t){case"firefox":return{browserType:a,channel:void 0,name:"firefox"};case"webkit":return{browserType:n,channel:void 0,name:"webkit"};default:return{browserType:e,channel:"chrome",name:"chrome"}}})(m.browser);try{_=await f.launch({headless:!1,channel:y})}catch{}if(!_)try{_=await f.launch({headless:!1})}catch{await new Promise((async(e,a)=>{const n=await s({message:"No drivers found. Install Playwright Chromium driver to continue?"});if(c(n)&&(l("Operation cancelled."),process.exit(0)),!n)return process.exit(0);const r=t("npx",["playwright@latest","install","chromium"],{stdio:"inherit"});r.on("close",(t=>{if(!t)return e();a(new Error(`Installation process exited with code ${t}`))})),r.on("error",(t=>{a(t)}))}));try{_=await e.launch({headless:!1})}catch{l("No browser could be launched. Please run `npx playwright install` to install browser drivers.")}}if(!_)return void l("No browser could be launched. Please run `npx playwright install` to install browser drivers.");const T=await _.newContext({bypassCSP:!0,...b});await T.addInitScript({content:"(() => {\n      const NO_OP = () => {};\n      let i = 0;\n      globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__ = {\n        checkDCE: NO_OP,\n        supportsFiber: true,\n        renderers: new Map(),\n        onScheduleFiberRoot: NO_OP,\n        onCommitFiberRoot: NO_OP,\n        onCommitFiberUnmount: NO_OP,\n        inject(renderer) {\n          const nextID = ++i;\n          this.renderers.set(nextID, renderer);\n          return nextID;\n        },\n      };\n    })();"});const S=await T.newPage(),O=p.readFileSync("./dist/auto.global.js","utf8"),R=(t=>{try{return new URL(t).href}catch{try{return new URL(`https://${t}`).href}catch{return"about:blank"}}})(m._[0]||"about:blank");await S.goto(R),await S.waitForLoadState("load"),await S.waitForTimeout(500),await S.addScriptTag({content:`${O}\n//# sourceURL=react-scan.js`});let C,v=0,N=R;const x=async t=>{N=t,C?.stop(`${t}${v?` (×${v})`:""}`),C=w(),C.start(d(`Scanning: ${t}`)),v=0;try{await S.waitForLoadState("load"),await S.waitForTimeout(500);await S.evaluate((()=>Boolean(globalThis.__REACT_SCAN__)))||await S.addScriptTag({content:O}),await S.waitForTimeout(100),await S.evaluate((()=>{"function"==typeof globalThis.reactScan&&globalThis.reactScan({report:!0})})),setInterval((()=>{(async()=>{await S.evaluate((()=>{const t=globalThis.__REACT_SCAN__;if(!t)return;const e=t.ReactScanInternals.reportData;Object.keys(e).length&&console.log("REACT_SCAN_REPORT",JSON.stringify(e,((t,e)=>["prevValue","nextValue"].includes(t)?void 0:e)))}))})()}),1e3)}catch(e){C.stop(h(`Failed to inject React Scan to: ${t}`))}};await x(R),S.on("framenavigated",(async t=>{if(t!==S.mainFrame())return;const e=t.url();x(e)})),S.on("console",(async t=>{const e=t.text();if(!e.startsWith("REACT_SCAN_REPORT"))return;const a=e.replace("REACT_SCAN_REPORT","").trim(),n=JSON.parse(a);let r=0;for(const t in n){r+=n[t].count}v=r,C?.message(d(`Scanning: ${N}${v?` (×${v})`:""}`))}))})();