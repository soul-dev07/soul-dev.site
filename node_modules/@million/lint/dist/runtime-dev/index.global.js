(function (exports) {
  'use strict';

  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // dist/runtime/devtools.mjs
  var e, t, r;
  var init_devtools = __esm({
    "dist/runtime/devtools.mjs"() {
      r = Object.getOwnPropertyNames;
      (e = { "runtime/src/devtools.ts"() {
        !function() {
          try {
            var e4 = () => {
            }, t4 = /* @__PURE__ */ new Map(), r4 = 0;
            "undefined" == typeof window || "_ANYA_SIGKILL_" in window || window.__REACT_DEVTOOLS_GLOBAL_HOOK__ || (window.__REACT_DEVTOOLS_GLOBAL_HOOK__ = { checkDCE: e4, supportsFiber: true, supportsFlight: true, hasUnsupportedRendererAttached: false, renderers: t4, onScheduleFiberRoot: e4, onCommitFiberRoot: e4, onCommitFiberUnmount: e4, inject(e5) {
              var o4 = ++r4;
              return t4.set(o4, e5), o4;
            } });
          } catch (e5) {
          }
        }();
      } }, function() {
        return t || (0, e[r(e)[0]])((t = { exports: {} }).exports, t), t.exports;
      })();
    }
  });

  // ../../node_modules/.pnpm/react@18.3.1/node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../../node_modules/.pnpm/react@18.3.1/node_modules/react/cjs/react.development.js"(exports, module) {
      {
        (function() {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals2 = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals2.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals2.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals2.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a3) {
            return isArrayImpl(a3);
          }
          function typeName(value2) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value2[Symbol.toStringTag] || value2.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value2) {
            {
              try {
                testStringCoercion(value2);
                return false;
              } catch (e4) {
                return true;
              }
            }
          }
          function testStringCoercion(value2) {
            return "" + value2;
          }
          function checkKeyStringCoercion(value2) {
            {
              if (willCoercionThrow(value2)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value2));
                return testStringCoercion(value2);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement3(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i4 = 0; i4 < childrenLength; i4++) {
                childArray[i4] = arguments[i4 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement2(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i4 = 0; i4 < childrenLength; i4++) {
                childArray[i4] = arguments[i4 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement4(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR2 = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR2 + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c3) {
                  return c3;
                });
              } else if (mappedChild != null) {
                if (isValidElement4(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR2 : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i4 = 0; i4 < children.length; i4++) {
                child = children[i4];
                nextName = nextNamePrefix + getElementKey(child, i4);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii2 = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii2++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n3 = 0;
            mapChildren(children, function() {
              n3++;
            });
            return n3;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement4(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext4(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef2(render2) {
            {
              if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render2 !== "function") {
                error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
              } else {
                if (render2.length !== 0 && render2.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render2 != null) {
                if (render2.defaultProps != null || render2.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render2.name && !render2.displayName) {
                    render2.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext4(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState5(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer, initialArg, init2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init2);
          }
          function useRef7(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect7(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback5(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo4(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value2, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value2, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue2(value2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value2);
          }
          function useId3() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals2.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals2.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i4 = 0; i4 < node.length; i4++) {
                var child = node[i4];
                if (isValidElement4(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement4(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement4(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i4 = 0; i4 < keys.length; i4++) {
                var key = keys[i4];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement3.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i4 = 2; i4 < arguments.length; i4++) {
                validateChildKeys(arguments[i4], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement2.apply(this, arguments);
            for (var i4 = 2; i4 < arguments.length; i4++) {
              validateChildKeys(arguments[i4], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i4 = 0;
                try {
                  for (; i4 < queue.length; i4++) {
                    var callback = queue[i4];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i4 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children2 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports.Children = Children2;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals2;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext4;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef2;
          exports.isValidElement = isValidElement4;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback5;
          exports.useContext = useContext4;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue2;
          exports.useEffect = useEffect7;
          exports.useId = useId3;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect3;
          exports.useMemo = useMemo4;
          exports.useReducer = useReducer2;
          exports.useRef = useRef7;
          exports.useState = useState5;
          exports.useSyncExternalStore = useSyncExternalStore3;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js
  var require_react = __commonJS({
    "../../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"(exports, module) {
      {
        module.exports = require_react_development();
      }
    }
  });

  // runtime/src/core/utils/constants.ts
  var React, _null, isRSC, isSSR, useIsomorphicLayoutEffect, _window, SIGKILL, kill, isTest, _document, _addEventListener, _Map, _WeakMap, _WeakSet, _Set, _Object, _Array, _isArray, _setTimeout, _performance, NO_OP, mapProto, _mapHas, _mapGet, _mapSet, _mapDelete, weakMapProto, _weakMapHas, _weakMapSet, _weakMapGet, _weakMapDelete, weakSetProto, setProto, _setHas, _setAdd, objectPrototype, _objectHasOwnProperty, _objectToString, VERSION, PAYLOAD_VERSION, FLAG, WRAPPER_FLAG, MAX_QUEUE_SIZE, FLUSH_TIMEOUT, SESSION_EXPIRE_TIMEOUT, GZIP_MIN_LEN, GZIP_MAX_LEN, MAX_PENDING_REQUESTS, FLOAT_MAX_LEN, ELEMENT_SYMBOL_STRING, FRAGMENT_SYMBOL_STRING, PORTAL_SYMBOL_STRING, PROFILER_SYMBOL_STRING, FORWARD_REF_SYMBOL_STRING, STRICT_MODE_SYMBOL_STRING, SUSPENSE_SYMBOL_STRING, SUSPENSE_LIST_SYMBOL_STRING, PROFILER_DISPLAY_NAME;
  var init_constants = __esm({
    "runtime/src/core/utils/constants.ts"() {
      React = __toESM(require_react());
      _null = null;
      isRSC = !React.useRef;
      isSSR = typeof window === "undefined" || isRSC;
      useIsomorphicLayoutEffect = isSSR ? React.useEffect : React.useLayoutEffect;
      _window = isSSR ? _null : window;
      SIGKILL = _window && _window._ANYA_SIGKILL_;
      kill = () => SIGKILL = 1;
      isTest = _window && /**
       * @see https://docs.cypress.io/faq/questions/using-cypress-faq#Is-there-any-way-to-detect-if-my-app-is-running-under-Cypress
       */
      (_window.Cypress || /**
       * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver
       */
      navigator.webdriver) || /**
       * @see https://stackoverflow.com/a/60491322
       */
      // @ts-expect-error jest is a global in test
      typeof jest !== "undefined";
      _document = isSSR ? _null : document;
      _addEventListener = isSSR ? _null : addEventListener;
      _Map = Map;
      _WeakMap = WeakMap;
      _WeakSet = WeakSet;
      _Set = Set;
      _Object = Object;
      _Array = Array;
      _isArray = _Array.isArray;
      _setTimeout = setTimeout;
      _performance = isSSR ? _null : performance;
      NO_OP = () => {
      };
      mapProto = _Map.prototype;
      _mapHas = mapProto.has;
      _mapGet = mapProto.get;
      _mapSet = mapProto.set;
      _mapDelete = mapProto.delete;
      weakMapProto = _WeakMap.prototype;
      _weakMapHas = weakMapProto.has;
      _weakMapSet = weakMapProto.set;
      _weakMapGet = weakMapProto.get;
      _weakMapDelete = weakMapProto.delete;
      weakSetProto = _WeakSet.prototype;
      weakSetProto.has;
      weakSetProto.add;
      weakSetProto.delete;
      setProto = _Set.prototype;
      _setHas = setProto.has;
      _setAdd = setProto.add;
      objectPrototype = _Object.prototype;
      _objectHasOwnProperty = objectPrototype.hasOwnProperty;
      _objectToString = objectPrototype.toString;
      VERSION = "1.0.14";
      PAYLOAD_VERSION = Number("0");
      FLAG = "_ANYA_";
      WRAPPER_FLAG = FLAG + "w";
      MAX_QUEUE_SIZE = 300;
      FLUSH_TIMEOUT = isTest ? 100 : 1e3;
      SESSION_EXPIRE_TIMEOUT = 3e5;
      GZIP_MIN_LEN = 1e3;
      GZIP_MAX_LEN = 6e4;
      MAX_PENDING_REQUESTS = 15;
      FLOAT_MAX_LEN = 1e3;
      ELEMENT_SYMBOL_STRING = "Symbol(react.element)";
      FRAGMENT_SYMBOL_STRING = "Symbol(react.fragment)";
      PORTAL_SYMBOL_STRING = "Symbol(react.portal)";
      PROFILER_SYMBOL_STRING = "Symbol(react.profiler)";
      FORWARD_REF_SYMBOL_STRING = "Symbol(react.forward_ref)";
      STRICT_MODE_SYMBOL_STRING = "Symbol(react.strict_mode)";
      SUSPENSE_SYMBOL_STRING = "Symbol(react.suspense)";
      SUSPENSE_LIST_SYMBOL_STRING = "Symbol(react.suspense_list)";
      PROFILER_DISPLAY_NAME = "Million(Profiler)";
    }
  });

  // runtime/src/core/utils/utils.ts
  var React2, debounce, onIdle, doubleRAF, onHidden, generateId, getRenderItemCacheKey, _id, useId;
  var init_utils = __esm({
    "runtime/src/core/utils/utils.ts"() {
      React2 = __toESM(require_react());
      init_constants();
      debounce = (callback, timeout = 1e3) => {
        let timeoutId;
        return function() {
          if (timeoutId !== void 0) {
            clearTimeout(timeoutId);
          }
          timeoutId = _setTimeout(() => {
            callback.apply(this, arguments);
            timeoutId = void 0;
          }, timeout);
        };
      };
      onIdle = (callback) => {
        if ("scheduler" in globalThis) {
          return globalThis.scheduler.postTask(callback, {
            priority: "background"
          });
        }
        if ("requestIdleCallback" in _window) {
          return requestIdleCallback(callback);
        }
        return _setTimeout(callback, 0);
      };
      doubleRAF = (callback) => {
        return requestAnimationFrame(() => {
          requestAnimationFrame(callback);
        });
      };
      onHidden = (callback) => {
        let handler = (event) => {
          if (event.type === "pagehide" || _document.visibilityState === "hidden") {
            callback();
          }
        };
        _addEventListener("visibilitychange", handler, true);
        _addEventListener("pagehide", handler, true);
        _addEventListener("prerenderingchange", handler, true);
      };
      generateId = () => {
        let alphabet2 = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
        let id = "";
        let randomValues = crypto.getRandomValues(new Uint8Array(21));
        for (let i4 = 0; i4 < 21; i4++) {
          id += alphabet2[63 & randomValues[i4]];
        }
        return id;
      };
      getRenderItemCacheKey = (key, kind, loc, owner, error, eventId, instanceIndex, triggerKey) => {
        return (
          // eslint-disable-next-line prefer-template
          key + "." + kind + "." + loc + (owner || "") + (error || "") + (eventId || "") + (instanceIndex || "") + (triggerKey || "")
        );
      };
      _id = 0;
      useId = () => React2.useState(() => "" + _id++)[0];
    }
  });

  // runtime/src/core/session.ts
  var getGpuRenderer, getSession;
  var init_session = __esm({
    "runtime/src/core/session.ts"() {
      init_constants();
      init_utils();
      getGpuRenderer = () => {
        if (!("chrome" in _window))
          return "";
        let gl = _document.createElement("canvas").getContext("webgl", { powerPreference: "high-performance" });
        if (!gl)
          return "";
        let ext = gl.getExtension("WEBGL_debug_renderer_info");
        return ext ? gl.getParameter(ext.UNMASKED_RENDERER_WEBGL) : "";
      };
      getSession = () => {
        if (isSSR)
          return _null;
        let id = generateId();
        let url3 = _window.location.toString();
        let connection = navigator.connection;
        let wifi = connection && connection.effectiveType || _null;
        let cpu = navigator.hardwareConcurrency;
        let mem = navigator.deviceMemory;
        let session2 = {
          id,
          url: url3,
          wifi,
          cpu,
          mem,
          gpu: _null
        };
        onIdle(() => {
          session2.gpu = getGpuRenderer();
        });
        return session2;
      };
    }
  });

  // runtime/src/core/transport.ts
  var CONTENT_TYPE, supportsCompression, compress, transport;
  var init_transport = __esm({
    "runtime/src/core/transport.ts"() {
      init_constants();
      CONTENT_TYPE = "application/json";
      supportsCompression = typeof CompressionStream === "function";
      compress = async (payload) => {
        let stream = new Blob([payload], { type: CONTENT_TYPE }).stream().pipeThrough(new CompressionStream("gzip"));
        return new Response(stream).arrayBuffer();
      };
      transport = async (url3, payload, buildId2, apiKey2, commitHash2, pendingRequests2) => {
        let fail = { ok: false };
        if (isSSR)
          return fail;
        let json = JSON.stringify(payload, (key, value2) => {
          if (key === "r" && typeof value2 === "object" && value2 && typeof value2.i !== "string" && value2.d) {
            value2.i = _null;
          }
          if (typeof value2 === "number" && parseInt(value2) !== value2) {
            value2 = ~~(value2 * FLOAT_MAX_LEN) / FLOAT_MAX_LEN;
          }
          if (
            // eslint-disable-next-line eqeqeq
            value2 != _null && value2 !== false && // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with
            key[0] !== "_" || _isArray(value2) && value2.length
          ) {
            return value2;
          }
        });
        let shouldCompress = json.length > GZIP_MIN_LEN;
        let body = shouldCompress && supportsCompression ? await compress(json) : json;
        let headers = {
          "Content-Type": CONTENT_TYPE,
          "Content-Encoding": shouldCompress ? "gzip" : void 0,
          "X-API-KEY": apiKey2,
          "X-BUILD-ID": buildId2,
          "X-COMMIT-HASH": commitHash2
          // "X-SESSION-ID": proxySessionId,
        };
        if (shouldCompress)
          url3 += "?z=1";
        let size = typeof body === "string" ? body.length : body.byteLength;
        return fetch(url3, {
          body,
          method: "POST",
          referrerPolicy: "origin",
          /**
           * Outgoing requests are usually cancelled when navigating to a different page, causing a "TypeError: Failed to
           * fetch" error and sending a "network_error" client-outcome - in Chrome, the request status shows "(cancelled)".
           * The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're
           * frequently sending events right before the user is switching pages (e.g., when finishing navigation transactions).
           *
           * This is the modern alternative to the navigator.sendBeacon API.
           * @see https://javascript.info/fetch-api#keepalive
           *
           * Gotchas:
           * - `keepalive` isn't supported by Firefox
           * - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):
           *   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.
           *   We will therefore only activate the flag when we're below that limit.
           * - There is also a limit of requests that can be open at the same time, so we also limit this to 15.
           *
           * @see https://github.com/getsentry/sentry-javascript/pull/7553
           */
          keepalive: GZIP_MAX_LEN > size && MAX_PENDING_REQUESTS > pendingRequests2,
          priority: "low",
          mode: (
            /* proxySessionId || */
            "no-cors"
          ),
          headers
        });
      };
    }
  });

  // runtime/src/core/utils/is-equal.ts
  var MAX_RECURSION_DEPTH, _isEqual, isEqual;
  var init_is_equal = __esm({
    "runtime/src/core/utils/is-equal.ts"() {
      init_constants();
      MAX_RECURSION_DEPTH = 2;
      _isEqual = (prev2, next, shallow, depth) => {
        let isShallowEqual = prev2 === next;
        if (isShallowEqual)
          return true;
        if (depth > MAX_RECURSION_DEPTH)
          return isShallowEqual;
        if (prev2 && next && typeof prev2 === "object" && typeof next === "object") {
          if (prev2.constructor !== next.constructor)
            return false;
          let length2;
          let i4;
          let keys;
          if (_isArray(prev2) && _isArray(next)) {
            length2 = prev2.length;
            if (length2 !== next.length)
              return false;
            for (i4 = length2; i4-- !== 0; ) {
              if (shallow) {
                if (prev2[i4] !== next[i4])
                  return false;
              } else if (!_isEqual(prev2[i4], next[i4], shallow, depth + 1))
                return false;
            }
            return true;
          }
          let it2;
          if (prev2 instanceof _Map && next instanceof _Map) {
            if (prev2.size !== next.size)
              return false;
            it2 = prev2.entries();
            while (!(i4 = it2.next()).done)
              if (!next.has(i4.value[0]))
                return false;
            it2 = prev2.entries();
            while (!(i4 = it2.next()).done) {
              if (shallow) {
                if (_mapGet.call(next, i4.value[0]) !== i4.value[1])
                  return false;
              } else if (!_isEqual(
                i4.value[1],
                _mapGet.call(next, i4.value[0]),
                shallow,
                depth + 1
              ))
                return false;
            }
            return true;
          }
          if (prev2 instanceof _Set && next instanceof _Set) {
            if (prev2.size !== next.size)
              return false;
            it2 = prev2.entries();
            while (!(i4 = it2.next()).done) {
              if (!_setHas.call(next, i4.value[0]))
                return false;
            }
            return true;
          }
          if (prev2.valueOf !== objectPrototype.valueOf && typeof prev2.valueOf === "function" && typeof next.valueOf === "function") {
            return prev2.valueOf() === next.valueOf();
          }
          if (prev2.toString !== objectPrototype.toString && typeof prev2.toString === "function" && typeof next.toString === "function") {
            return prev2.toString() === next.toString();
          }
          keys = _Object.keys(prev2);
          length2 = keys.length;
          if (length2 !== _Object.keys(next).length)
            return false;
          for (i4 = length2; i4-- !== 0; ) {
            if (!_objectHasOwnProperty.call(next, keys[i4]))
              return false;
          }
          if (prev2 instanceof Element)
            return false;
          for (i4 = length2; i4-- !== 0; ) {
            if (keys[i4] === "_owner" && prev2.$$typeof) {
              continue;
            }
            if (shallow) {
              if (prev2[keys[i4]] !== next[keys[i4]])
                return false;
            } else if (!_isEqual(
              prev2[keys[i4]],
              next[keys[i4]],
              shallow,
              depth + 1
            ))
              return false;
          }
          return true;
        }
        return prev2 !== prev2 && next !== next;
      };
      isEqual = (prev2, next, shallow) => {
        try {
          return _isEqual(prev2, next, shallow, 0);
        } catch (_3) {
          return false;
        }
      };
    }
  });

  // runtime/src/core/utils/react-internals.ts
  var React3, traverseFiber, FiberContext; exports.MillionLintProvider = void 0; var currentFiber, setCurrentFiber, useFiber, useNearestChild, PerformedWork, didFiberRender, getTimings, ReactSharedInternals, getFiberDEV, getDispatcherRef, invalidHookErrFunctions, peekIsInComponent, getOwner, truncateString, serialize, types, isElementUnsafeToCapture, setRef, mergeProps, getElementRef, canStabilize, shiftNodesToCurrentTree, getFiberMetadata, createTrackedFiberNodeTree, replaceNodeWithFirstTrackedMountedParent, areFibersEqual, getTrackedSelfTime, computeDirtyComponentTrees;
  var init_react_internals = __esm({
    "runtime/src/core/utils/react-internals.ts"() {
      React3 = __toESM(require_react());
      init_core();
      init_constants();
      init_is_equal();
      traverseFiber = (fiber, ascending, selector) => {
        if (!fiber)
          return _null;
        if (selector(fiber) === true)
          return fiber;
        let child = ascending ? fiber.return : fiber.child;
        while (child) {
          let match = traverseFiber(child, ascending, selector);
          if (match)
            return match;
          child = ascending ? _null : child.sibling;
        }
        return _null;
      };
      FiberContext = SIGKILL || isRSC ? _null : React3.createContext(_null);
      exports.MillionLintProvider = class extends React3.Component {
        render() {
          if (!FiberContext)
            return this.props.children;
          return React3.createElement(
            FiberContext.Provider,
            { value: this._reactInternals },
            this.props.children
          );
        }
      };
      React3["useId".toString()];
      currentFiber = _null;
      setCurrentFiber = (fiber) => {
        currentFiber = fiber;
        return fiber;
      };
      useFiber = () => {
        {
          return setCurrentFiber(getFiberDEV());
        }
      };
      useNearestChild = (fiber) => {
        let childRef = React3.useRef();
        useIsomorphicLayoutEffect(() => {
          if (!fiber)
            return;
          let elementFiber = traverseFiber(
            fiber,
            false,
            (node) => typeof node.type === "string"
          );
          childRef.current = elementFiber && elementFiber.stateNode || _null;
        }, [fiber]);
        return childRef;
      };
      PerformedWork = 1;
      didFiberRender = (fiber) => {
        if (!fiber)
          return true;
        let { alternate } = fiber;
        let prevProps = alternate && alternate.memoizedProps;
        let nextProps = fiber.memoizedProps;
        switch (fiber.tag) {
          case 1:
          case 0:
          case 9:
          case 11:
            let flags = (fiber.flags !== void 0 ? fiber.flags : fiber.effectTag) ?? 0;
            return (flags & PerformedWork) === PerformedWork;
          case 14:
          case 15:
            if (typeof fiber.type.compare === "function") {
              return !fiber.type.compare(prevProps || {}, nextProps || {});
            }
            return !isEqual(prevProps, nextProps, true);
          default:
            if (!alternate)
              return true;
            return prevProps !== nextProps || alternate.memoizedState !== fiber.memoizedState || alternate.ref !== fiber.ref;
        }
      };
      getTimings = (fiber) => {
        let totalTime = fiber && fiber.actualDuration;
        if (totalTime == _null) {
          totalTime = 0;
        } else {
          metadata.a = true;
        }
        let worstCaseTotalTime = fiber && fiber.treeBaseDuration || 0;
        let selfTime = totalTime;
        let child = fiber && fiber.child || _null;
        while (totalTime > 0 && child != _null) {
          selfTime -= child.actualDuration || 0;
          child = child.sibling;
        }
        return {
          /**
           * totalTime
           */
          t: totalTime,
          /**
           * selfTime
           */
          s: selfTime,
          /**
           * memoScore
           */
          $: totalTime / worstCaseTotalTime
        };
      };
      ReactSharedInternals = React3?.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE || React3?.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      getFiberDEV = () => {
        return ReactSharedInternals && (ReactSharedInternals.A ? ReactSharedInternals.A.getOwner() : ReactSharedInternals && ReactSharedInternals.ReactCurrentOwner && ReactSharedInternals.ReactCurrentOwner.current) || _null;
      };
      getDispatcherRef = () => {
        return ReactSharedInternals && (ReactSharedInternals.ReactCurrentDispatcher || ReactSharedInternals);
      };
      invalidHookErrFunctions = new _WeakMap();
      peekIsInComponent = (dispatcher) => {
        if (!dispatcher) {
          let ref = getDispatcherRef();
          dispatcher = ref.H || ref.current;
        }
        let hook = dispatcher && dispatcher.useRef;
        if (typeof hook !== "function" || _weakMapHas.call(invalidHookErrFunctions, hook)) {
          return false;
        }
        let str = hook.toString();
        if (str.includes("Error")) {
          _weakMapSet.call(invalidHookErrFunctions, hook, true);
          return false;
        }
        return true;
      };
      getOwner = (fiber) => {
        let curr = fiber && fiber.return;
        while (curr) {
          let type = curr.type;
          if (typeof type === "function" && type[FLAG]) {
            return type[FLAG];
          }
          curr = curr.return;
        }
        return _null;
      };
      truncateString = (value2, length2) => {
        return value2.length > length2 ? value2.slice(0, length2) + "\u2026" : value2;
      };
      serialize = (value2) => {
        switch (typeof value2) {
          case "function":
            return truncateString(value2.toString(), 20);
          case "string":
            return truncateString(value2, 20);
          case "object":
            if (value2 === _null) {
              return "null";
            }
            if (_Array.isArray(value2)) {
              return value2.length > 0 ? "[\u2026]" : "[]";
            }
            if (typeof value2.$$typeof === "symbol" && String(value2.$$typeof) === ELEMENT_SYMBOL_STRING) {
              return (
                // eslint-disable-next-line prefer-template
                "<" + (value2.type.displayName || value2.type.name || "") + (_Object.keys(value2.props).length > 0 ? " \u2026" : "") + ">"
              );
            }
            if (typeof value2 === "object" && value2 !== _null && value2.constructor === _Object) {
              for (let key in value2) {
                if (_objectHasOwnProperty.call(value2, key)) {
                  return "{\u2026}";
                }
              }
              return "{}";
            }
            let tagString = _objectToString.call(value2).slice(8, -1);
            if (tagString === "Object") {
              let proto = _Object.getPrototypeOf(value2);
              let constructor = proto && proto.constructor;
              if (typeof constructor === "function") {
                return (constructor.displayName || constructor.name || "") + "{\u2026}";
              }
            }
            return tagString + "{\u2026}";
          default:
            return String(value2);
        }
      };
      types = [
        STRICT_MODE_SYMBOL_STRING,
        FRAGMENT_SYMBOL_STRING,
        PROFILER_SYMBOL_STRING,
        SUSPENSE_SYMBOL_STRING,
        SUSPENSE_LIST_SYMBOL_STRING
      ];
      isElementUnsafeToCapture = (element) => {
        if (!element)
          return true;
        let isTypeFn = typeof element.type === "function";
        let isClass = isTypeFn && element.type.prototype?.isReactComponent;
        let isMuiFn = isTypeFn && element.type.muiName;
        let isNextUIFn = isTypeFn && element.type.displayName?.includes("NextUI");
        let isPortal = String(element.$$typeof) === PORTAL_SYMBOL_STRING;
        let isInvalidType = types.includes(String(element.type));
        let isTypeObj = typeof element.type === "object";
        let isMuiObj = isTypeObj && element.type && element.type.muiName;
        let isNextUIObj = isTypeObj && "render" in element.type && typeof element.type.render === "function" && element.type.render.displayName?.includes("NextUI");
        let isReactRouter = element.props && (element.props.Component || element.props.component || element.props.asChild);
        let isNextUIReturn = element.type && (isTypeFn || isTypeObj) && "rendered" in element.type;
        return isClass || isMuiFn || isNextUIFn || isPortal || isInvalidType || isMuiObj || isNextUIObj || isReactRouter || isNextUIReturn;
      };
      setRef = (ref, value2) => {
        if (typeof ref === "function") {
          ref(value2);
        } else if (ref !== null && ref !== void 0) {
          ref.current = value2;
        }
      };
      mergeProps = (prevProps, nextProps) => {
        let overrideProps = _Object.assign({}, nextProps);
        for (let propName in nextProps) {
          let nextPropValue = nextProps[propName];
          let prevPropValue = prevProps[propName];
          if (propName.startsWith("on")) {
            if (nextPropValue && prevPropValue) {
              overrideProps[propName] = function() {
                prevPropValue.apply(this, arguments);
                nextPropValue.apply(this, arguments);
              };
            } else if (nextPropValue) {
              overrideProps[propName] = nextPropValue;
            }
          } else if (propName === "style") {
            overrideProps[propName] = _Object.assign(
              {},
              prevPropValue,
              nextPropValue
            );
          } else if (propName === "className") {
            overrideProps[propName] = [nextPropValue, prevPropValue].filter(Boolean).join(" ");
          }
        }
        return _Object.assign({}, prevProps, overrideProps);
      };
      getElementRef = (element) => {
        {
          if (!React3.isValidElement(element))
            return;
          let refPropsDescriptor = _Object.getOwnPropertyDescriptor(
            element.props,
            "ref"
          );
          let getter = refPropsDescriptor && refPropsDescriptor.get;
          let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
          if (mayWarn) {
            return element.ref;
          }
          let refDescriptor = _Object.getOwnPropertyDescriptor(element, "ref");
          getter = refDescriptor && refDescriptor.get;
          mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
          if (mayWarn) {
            return element.props.ref;
          }
        }
        return element.props.ref || element.ref;
      };
      canStabilize = (prevValue, nextValue, change) => {
        return (
          // eslint-disable-next-line eqeqeq
          (change.i ?? change.n) != _null && change.u && isEqual(prevValue, nextValue, false)
        );
      };
      shiftNodesToCurrentTree = (toShift, currentRoot2) => {
        {
          let currentTree = /* @__PURE__ */ new Set();
          traverseFiber(currentRoot2, false, (node) => {
            currentTree.add(node);
          });
          let newNodes = [];
          toShift.forEach((node) => {
            if (!currentTree.has(node)) {
              if (!node.alternate) {
                newNodes.push(node);
                return;
              }
              newNodes.push(node.alternate);
              return;
            }
            newNodes.push(node);
          });
          return newNodes;
        }
      };
      getFiberMetadata = (fiber, metadata2) => _weakMapGet.call(metadata2, fiber) ?? (fiber.alternate ? _weakMapGet.call(metadata2, fiber.alternate) : null);
      createTrackedFiberNodeTree = (rootFiber, subtreeCache, computedTrees, fiberComponentMap2, trackedSelfTimeMap) => {
        {
          let _createTrackedFiberNodeTree = (fiber, ancestor) => {
            let metadata2 = getFiberMetadata(fiber, fiberComponentMap2);
            if (metadata2) {
              metadata2.selfTime = trackedSelfTimeMap.get(fiber) ?? metadata2.selfTime;
            }
            let componentName = fiber?.type?.displayName || // copied directly from "../audit/utils";
            fiber?.type?.name || fiber?.elementType?.displayName || fiber?.elementType?.name || "<unknown>";
            let cacheEntry = _mapGet.call(subtreeCache, fiber);
            if (cacheEntry) {
              _mapDelete.call(computedTrees, cacheEntry[1]);
            }
            let node = cacheEntry?.[0] ?? (metadata2 ? {
              metadata: metadata2,
              name: componentName,
              children: []
            } : null);
            _mapSet.call(subtreeCache, fiber, [node, rootFiber]);
            let parent = metadata2 ? node : ancestor;
            let child = fiber.child;
            while (child !== null) {
              let childNode = _createTrackedFiberNodeTree(child, parent);
              if (childNode && parent && !parent.children.some((child2) => child2 === childNode)) {
                parent.children.push(childNode);
              }
              child = child.sibling;
            }
            return node;
          };
          let existingCacheEntry = _mapGet.call(subtreeCache, rootFiber);
          if (existingCacheEntry) {
            return existingCacheEntry[0];
          }
          let subtree = _createTrackedFiberNodeTree(rootFiber, null);
          _mapSet.call(computedTrees, rootFiber, subtree);
          return subtree;
        }
      };
      replaceNodeWithFirstTrackedMountedParent = (nodes, fiberComponentMap2) => {
        {
          let parentCache = new _Map();
          let newNodes = [];
          for (let i4 = 0, len = nodes.length; i4 < len; i4++) {
            let node = nodes[i4];
            let parentCacheValue = parentCache.get(node);
            if (parentCacheValue) {
              newNodes.push(parentCacheValue);
              continue;
            }
            let firstParent = traverseFiber(node, true, (n3) => {
              return !!getFiberMetadata(n3, fiberComponentMap2) && !areFibersEqual(n3, node);
            });
            let finalNode = firstParent ?? node;
            newNodes.push(finalNode);
            parentCache.set(node, finalNode);
          }
          return newNodes;
        }
      };
      areFibersEqual = (fiberA, fiberB) => fiberA === fiberB || fiberA.alternate === fiberB || fiberB.alternate === fiberA ;
      getTrackedSelfTime = (fiber, fiberComponentMap2, accMap, visited) => {
        {
          const traverse = (node, currentTrackedParent) => {
            if (!node)
              return;
            if (visited.has(node))
              return;
            visited.add(node);
            const isTracked = fiberComponentMap2.has(node);
            const { s: selfTime } = getTimings(node);
            if (isTracked) {
              const existingTime = accMap.get(node) || 0;
              accMap.set(node, existingTime + selfTime);
              currentTrackedParent = node;
            } else if (currentTrackedParent) {
              const existingTime = accMap.get(currentTrackedParent) || 0;
              accMap.set(currentTrackedParent, existingTime + selfTime);
            }
            traverse(node.child, currentTrackedParent);
            traverse(node.sibling, currentTrackedParent);
          };
          traverse(fiber, null);
        }
      };
      computeDirtyComponentTrees = (dirtyNodes2, fiberComponentMap2, currentRoot2) => {
        {
          let reComputedSubtrees = new _Map();
          let subtreeCache = new _Map();
          let deReffedNodes = [];
          for (let i4 = 0, len = dirtyNodes2.length; i4 < len; i4++) {
            let node = dirtyNodes2[i4].deref();
            if (node) {
              deReffedNodes.push(node);
            }
          }
          dirtyNodes2 = [];
          let shifted = shiftNodesToCurrentTree(deReffedNodes, currentRoot2);
          let replaced = replaceNodeWithFirstTrackedMountedParent(
            shifted,
            fiberComponentMap2
          );
          let trackedSelfTimeMap = /* @__PURE__ */ new Map();
          const visitedFibers = /* @__PURE__ */ new Set();
          replaced.forEach(
            (fiber) => getTrackedSelfTime(
              fiber,
              fiberComponentMap2,
              trackedSelfTimeMap,
              visitedFibers
            )
          );
          replaced.forEach((fiber) => {
            createTrackedFiberNodeTree(
              fiber,
              subtreeCache,
              reComputedSubtrees,
              fiberComponentMap2,
              trackedSelfTimeMap
            );
          });
          let runtimeTreeUpdates = new _Array(
            reComputedSubtrees.size
          );
          let valuesIterator = reComputedSubtrees.values();
          let result = valuesIterator.next();
          for (let i4 = 0; !result.done; i4++) {
            if (result.value) {
              runtimeTreeUpdates[i4] = {
                kind: "update",
                node: result.value,
                nodesUpdated: deReffedNodes.map(
                  (node) => (fiberComponentMap2.get(node) || node.alternate && fiberComponentMap2.get(node.alternate))?.renderId
                ).filter((x3) => typeof x3 !== "undefined")
              };
            }
            result = valuesIterator.next();
          }
          return [runtimeTreeUpdates, deReffedNodes];
        }
      };
    }
  });

  // ../../node_modules/.pnpm/posthog-js@1.189.0/node_modules/posthog-js/dist/module.js
  function g(e4, t4, i4) {
    if (D(e4)) {
      if (s && e4.forEach === s)
        e4.forEach(t4, i4);
      else if ("length" in e4 && e4.length === +e4.length) {
        for (var r4 = 0, n3 = e4.length; r4 < n3; r4++)
          if (r4 in e4 && t4.call(i4, e4[r4], r4) === p)
            return;
      }
    }
  }
  function f(e4, t4, i4) {
    if (!j(e4)) {
      if (D(e4))
        return g(e4, t4, i4);
      if (Q(e4)) {
        for (var s3 of e4.entries())
          if (t4.call(i4, s3[1], s3[0]) === p)
            return;
      } else
        for (var r4 in e4)
          if (O.call(e4, r4) && t4.call(i4, e4[r4], r4) === p)
            return;
    }
  }
  function b(e4, t4) {
    return -1 !== e4.indexOf(t4);
  }
  function y(e4) {
    for (var t4 = Object.keys(e4), i4 = t4.length, s3 = new Array(i4); i4--; )
      s3[i4] = [t4[i4], e4[t4[i4]]];
    return s3;
  }
  function x(e4, t4) {
    return i4 = e4, s3 = (e5) => U(e5) && !z(t4) ? e5.slice(0, t4) : e5, r4 = /* @__PURE__ */ new Set(), function e5(t5, i5) {
      return t5 !== Object(t5) ? s3 ? s3(t5, i5) : t5 : r4.has(t5) ? void 0 : (r4.add(t5), D(t5) ? (n3 = [], g(t5, (t6) => {
        n3.push(e5(t6));
      })) : (n3 = {}, f(t5, (t6, i6) => {
        r4.has(t6) || (n3[i6] = e5(t6, i6));
      })), n3);
      var n3;
    }(i4);
    var i4, s3, r4;
  }
  function F(e4, t4) {
    for (var i4 = 0; i4 < e4.length; i4++)
      if (t4(e4[i4]))
        return e4[i4];
  }
  function Z(e4, t4) {
    var i4 = Object.keys(e4);
    if (Object.getOwnPropertySymbols) {
      var s3 = Object.getOwnPropertySymbols(e4);
      t4 && (s3 = s3.filter(function(t5) {
        return Object.getOwnPropertyDescriptor(e4, t5).enumerable;
      })), i4.push.apply(i4, s3);
    }
    return i4;
  }
  function ee(e4) {
    for (var t4 = 1; t4 < arguments.length; t4++) {
      var i4 = null != arguments[t4] ? arguments[t4] : {};
      t4 % 2 ? Z(Object(i4), true).forEach(function(t5) {
        te(e4, t5, i4[t5]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(i4)) : Z(Object(i4)).forEach(function(t5) {
        Object.defineProperty(e4, t5, Object.getOwnPropertyDescriptor(i4, t5));
      });
    }
    return e4;
  }
  function te(e4, t4, i4) {
    return t4 in e4 ? Object.defineProperty(e4, t4, { value: i4, enumerable: true, configurable: true, writable: true }) : e4[t4] = i4, e4;
  }
  function ie(e4, t4) {
    if (null == e4)
      return {};
    var i4, s3, r4 = function(e5, t5) {
      if (null == e5)
        return {};
      var i5, s4, r5 = {}, n4 = Object.keys(e5);
      for (s4 = 0; s4 < n4.length; s4++)
        i5 = n4[s4], t5.indexOf(i5) >= 0 || (r5[i5] = e5[i5]);
      return r5;
    }(e4, t4);
    if (Object.getOwnPropertySymbols) {
      var n3 = Object.getOwnPropertySymbols(e4);
      for (s3 = 0; s3 < n3.length; s3++)
        i4 = n3[s3], t4.indexOf(i4) >= 0 || Object.prototype.propertyIsEnumerable.call(e4, i4) && (r4[i4] = e4[i4]);
    }
    return r4;
  }
  function et(e4, t4) {
    if (t4) {
      var i4 = function(e5) {
        var t5 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : o2;
        if (Ke)
          return Ke;
        if (!t5)
          return "";
        if (["localhost", "127.0.0.1"].includes(e5))
          return "";
        for (var i5 = e5.split("."), s4 = Math.min(i5.length, 8), r4 = "dmn_chk_" + Je(), n3 = new RegExp("(^|;)\\s*" + r4 + "=1"); !Ke && s4--; ) {
          var a3 = i5.slice(s4).join("."), l3 = r4 + "=1;domain=." + a3;
          t5.cookie = l3, n3.test(t5.cookie) && (t5.cookie = l3 + ";expires=" + Xe, Ke = a3);
        }
        return Ke;
      }(e4);
      if (!i4) {
        var s3 = ((e5) => {
          var t5 = e5.match(Ze);
          return t5 ? t5[0] : "";
        })(e4);
        s3 !== i4 && X.info("Warning: cookie subdomain discovery mismatch", s3, i4), i4 = s3;
      }
      return i4 ? "; domain=." + i4 : "";
    }
    return "";
  }
  function gi(e4) {
    var t4, i4;
    return (null === (t4 = JSON.stringify(e4, (i4 = [], function(e5, t5) {
      if (q(t5)) {
        for (; i4.length > 0 && i4[i4.length - 1] !== this; )
          i4.pop();
        return i4.includes(t5) ? "[Circular]" : (i4.push(t5), t5);
      }
      return t5;
    }))) || void 0 === t4 ? void 0 : t4.length) || 0;
  }
  function fi(e4) {
    var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 66060288e-1;
    if (e4.size >= t4 && e4.data.length > 1) {
      var i4 = Math.floor(e4.data.length / 2), s3 = e4.data.slice(0, i4), r4 = e4.data.slice(i4);
      return [fi({ size: gi(s3), data: s3, sessionId: e4.sessionId, windowId: e4.windowId }), fi({ size: gi(r4), data: r4, sessionId: e4.sessionId, windowId: e4.windowId })].flatMap((e5) => e5);
    }
    return [e4];
  }
  function yi(e4) {
    var t4;
    return e4.id === Le || !(null === (t4 = e4.closest) || void 0 === t4 || !t4.call(e4, ".toolbar-global-fade-container"));
  }
  function wi(e4) {
    return !!e4 && 1 === e4.nodeType;
  }
  function Si(e4, t4) {
    return !!e4 && !!e4.tagName && e4.tagName.toLowerCase() === t4.toLowerCase();
  }
  function Ei(e4) {
    return !!e4 && 3 === e4.nodeType;
  }
  function ki(e4) {
    return !!e4 && 11 === e4.nodeType;
  }
  function xi(e4) {
    return e4 ? v(e4).split(/\s+/) : [];
  }
  function Ii(t4) {
    var i4 = null == e2 ? void 0 : e2.location.href;
    return !!(i4 && t4 && t4.some((e4) => i4.match(e4)));
  }
  function Pi(e4) {
    var t4 = "";
    switch (typeof e4.className) {
      case "string":
        t4 = e4.className;
        break;
      case "object":
        t4 = (e4.className && "baseVal" in e4.className ? e4.className.baseVal : null) || e4.getAttribute("class") || "";
        break;
      default:
        t4 = "";
    }
    return xi(t4);
  }
  function Fi(e4) {
    return j(e4) ? null : v(e4).split(/(\s+)/).filter((e5) => Ui(e5)).join("").replace(/[\r\n]/g, " ").replace(/[ ]+/g, " ").substring(0, 255);
  }
  function Ri(e4) {
    var t4 = "";
    return Ai(e4) && !Oi(e4) && e4.childNodes && e4.childNodes.length && f(e4.childNodes, function(e5) {
      var i4;
      Ei(e5) && e5.textContent && (t4 += null !== (i4 = Fi(e5.textContent)) && void 0 !== i4 ? i4 : "");
    }), v(t4);
  }
  function Ci(e4) {
    return H(e4.target) ? e4.srcElement || null : null !== (t4 = e4.target) && void 0 !== t4 && t4.shadowRoot ? e4.composedPath()[0] || null : e4.target || null;
    var t4;
  }
  function $i(e4) {
    var t4 = e4.parentNode;
    return !(!t4 || !wi(t4)) && t4;
  }
  function Mi(t4, i4) {
    var s3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, r4 = arguments.length > 3 ? arguments[3] : void 0, n3 = arguments.length > 4 ? arguments[4] : void 0;
    if (!e2 || !t4 || Si(t4, "html") || !wi(t4))
      return false;
    if (null != s3 && s3.url_allowlist && !Ii(s3.url_allowlist))
      return false;
    if (null != s3 && s3.url_ignorelist && Ii(s3.url_ignorelist))
      return false;
    if (null != s3 && s3.dom_event_allowlist) {
      var o4 = s3.dom_event_allowlist;
      if (o4 && !o4.some((e4) => i4.type === e4))
        return false;
    }
    for (var a3 = false, l3 = [t4], u3 = true, c3 = t4; c3.parentNode && !Si(c3, "body"); )
      if (ki(c3.parentNode))
        l3.push(c3.parentNode.host), c3 = c3.parentNode.host;
      else {
        if (!(u3 = $i(c3)))
          break;
        if (r4 || Ti.indexOf(u3.tagName.toLowerCase()) > -1)
          a3 = true;
        else {
          var d3 = e2.getComputedStyle(u3);
          d3 && "pointer" === d3.getPropertyValue("cursor") && (a3 = true);
        }
        l3.push(u3), c3 = u3;
      }
    if (!function(e4, t5) {
      var i5 = null == t5 ? void 0 : t5.element_allowlist;
      if (H(i5))
        return true;
      var s4 = function(e5) {
        if (i5.some((t6) => e5.tagName.toLowerCase() === t6))
          return { v: true };
      };
      for (var r5 of e4) {
        var n4 = s4(r5);
        if ("object" == typeof n4)
          return n4.v;
      }
      return false;
    }(l3, s3))
      return false;
    if (!function(e4, t5) {
      var i5 = null == t5 ? void 0 : t5.css_selector_allowlist;
      if (H(i5))
        return true;
      var s4 = function(e5) {
        if (i5.some((t6) => e5.matches(t6)))
          return { v: true };
      };
      for (var r5 of e4) {
        var n4 = s4(r5);
        if ("object" == typeof n4)
          return n4.v;
      }
      return false;
    }(l3, s3))
      return false;
    var h3 = e2.getComputedStyle(t4);
    if (h3 && "pointer" === h3.getPropertyValue("cursor") && "click" === i4.type)
      return true;
    var _3 = t4.tagName.toLowerCase();
    switch (_3) {
      case "html":
        return false;
      case "form":
        return (n3 || ["submit"]).indexOf(i4.type) >= 0;
      case "input":
      case "select":
      case "textarea":
        return (n3 || ["change", "click"]).indexOf(i4.type) >= 0;
      default:
        return a3 ? (n3 || ["click"]).indexOf(i4.type) >= 0 : (n3 || ["click"]).indexOf(i4.type) >= 0 && (Ti.indexOf(_3) > -1 || "true" === t4.getAttribute("contenteditable"));
    }
  }
  function Ai(e4) {
    for (var t4 = e4; t4.parentNode && !Si(t4, "body"); t4 = t4.parentNode) {
      var i4 = Pi(t4);
      if (b(i4, "ph-sensitive") || b(i4, "ph-no-capture"))
        return false;
    }
    if (b(Pi(e4), "ph-include"))
      return true;
    var s3 = e4.type || "";
    if (U(s3))
      switch (s3.toLowerCase()) {
        case "hidden":
        case "password":
          return false;
      }
    var r4 = e4.name || e4.id || "";
    if (U(r4)) {
      if (/^cc|cardnum|ccnum|creditcard|csc|cvc|cvv|exp|pass|pwd|routing|seccode|securitycode|securitynum|socialsec|socsec|ssn/i.test(r4.replace(/[^a-zA-Z0-9]/g, "")))
        return false;
    }
    return true;
  }
  function Oi(e4) {
    return !!(Si(e4, "input") && !["button", "checkbox", "submit", "reset"].includes(e4.type) || Si(e4, "select") || Si(e4, "textarea") || "true" === e4.getAttribute("contenteditable"));
  }
  function Ui(e4) {
    var t4 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
    if (j(e4))
      return false;
    if (U(e4)) {
      if (e4 = v(e4), (t4 ? Di : Ni).test((e4 || "").replace(/[- ]/g, "")))
        return false;
      if ((t4 ? Bi : Hi).test(e4))
        return false;
    }
    return true;
  }
  function Wi(e4) {
    var t4 = Ri(e4);
    return Ui(t4 = "".concat(t4, " ").concat(zi(e4)).trim()) ? t4 : "";
  }
  function zi(e4) {
    var t4 = "";
    return e4 && e4.childNodes && e4.childNodes.length && f(e4.childNodes, function(e5) {
      var i4;
      if (e5 && "span" === (null === (i4 = e5.tagName) || void 0 === i4 ? void 0 : i4.toLowerCase()))
        try {
          var s3 = Ri(e5);
          t4 = "".concat(t4, " ").concat(s3).trim(), e5.childNodes && e5.childNodes.length && (t4 = "".concat(t4, " ").concat(zi(e5)).trim());
        } catch (e6) {
          X.error(e6);
        }
    }), t4;
  }
  function ji(e4) {
    return function(e5) {
      var t4 = e5.map((e6) => {
        var t5, i4, s3 = "";
        if (e6.tag_name && (s3 += e6.tag_name), e6.attr_class)
          for (var r4 of (e6.attr_class.sort(), e6.attr_class))
            s3 += ".".concat(r4.replace(/"/g, ""));
        var n3 = ee(ee(ee(ee({}, e6.text ? { text: e6.text } : {}), {}, { "nth-child": null !== (t5 = e6.nth_child) && void 0 !== t5 ? t5 : 0, "nth-of-type": null !== (i4 = e6.nth_of_type) && void 0 !== i4 ? i4 : 0 }, e6.href ? { href: e6.href } : {}), e6.attr_id ? { attr_id: e6.attr_id } : {}), e6.attributes), o4 = {};
        return y(n3).sort((e7, t6) => {
          var [i5] = e7, [s4] = t6;
          return i5.localeCompare(s4);
        }).forEach((e7) => {
          var [t6, i5] = e7;
          return o4[Vi(t6.toString())] = Vi(i5.toString());
        }), s3 += ":", s3 += y(n3).map((e7) => {
          var [t6, i5] = e7;
          return "".concat(t6, '="').concat(i5, '"');
        }).join("");
      });
      return t4.join(";");
    }(function(e5) {
      return e5.map((e6) => {
        var t4, i4, s3 = { text: null === (t4 = e6.$el_text) || void 0 === t4 ? void 0 : t4.slice(0, 400), tag_name: e6.tag_name, href: null === (i4 = e6.attr__href) || void 0 === i4 ? void 0 : i4.slice(0, 2048), attr_class: Gi(e6), attr_id: e6.attr__id, nth_child: e6.nth_child, nth_of_type: e6.nth_of_type, attributes: {} };
        return y(e6).filter((e7) => {
          var [t5] = e7;
          return 0 === t5.indexOf("attr__");
        }).forEach((e7) => {
          var [t5, i5] = e7;
          return s3.attributes[t5] = i5;
        }), s3;
      });
    }(e4));
  }
  function Vi(e4) {
    return e4.replace(/"|\\"/g, '\\"');
  }
  function Gi(e4) {
    var t4 = e4.attr__class;
    return t4 ? D(t4) ? t4 : xi(t4) : void 0;
  }
  function es(e4, t4, i4, s3) {
    if (j(e4))
      return e4;
    var r4 = (null == t4 ? void 0 : t4["content-length"]) || function(e5) {
      return new Blob([e5]).size;
    }(e4);
    return U(r4) && (r4 = parseInt(r4)), r4 > i4 ? Qi + " ".concat(s3, " body too large to record (").concat(r4, " bytes)") : e4;
  }
  function ts(e4, t4) {
    if (j(e4))
      return e4;
    var i4 = e4;
    return Ui(i4, false) || (i4 = Qi + " " + t4 + " body " + Ji), f(Ki, (e5) => {
      var s3, r4;
      null !== (s3 = i4) && void 0 !== s3 && s3.length && -1 !== (null === (r4 = i4) || void 0 === r4 ? void 0 : r4.indexOf(e5)) && (i4 = Qi + " " + t4 + " body " + Ji + " as might contain: " + e5);
    }), i4;
  }
  function ss(e4, t4, i4, s3) {
    return t4 > i4 && (X.warn("min cannot be greater than max."), t4 = i4), V(e4) ? e4 > i4 ? (s3 && X.warn(s3 + " cannot be  greater than max: " + i4 + ". Using max value instead."), i4) : e4 < t4 ? (s3 && X.warn(s3 + " cannot be less than min: " + t4 + ". Using min value instead."), t4) : e4 : (s3 && X.warn(s3 + " must be a number. Defaulting to max value:" + i4), i4);
  }
  function Hs(e4, t4) {
    void 0 === t4 && (t4 = {});
    var i4 = Ls(), s3 = e4.length;
    i4.p(e4);
    var r4 = Ds(e4, t4, Bs(t4), 8), n3 = r4.length;
    return qs(r4, t4), Ns(r4, n3 - 8, i4.d()), Ns(r4, n3 - 4, s3), r4;
  }
  function Us(e4, t4) {
    var i4 = e4.length;
    if ("undefined" != typeof TextEncoder)
      return new TextEncoder().encode(e4);
    for (var s3 = new ns(e4.length + (e4.length >>> 1)), r4 = 0, n3 = function(e5) {
      s3[r4++] = e5;
    }, o4 = 0; o4 < i4; ++o4) {
      if (r4 + 5 > s3.length) {
        var a3 = new ns(r4 + 8 + (i4 - o4 << 1));
        a3.set(s3), s3 = a3;
      }
      var l3 = e4.charCodeAt(o4);
      l3 < 128 || t4 ? n3(l3) : l3 < 2048 ? (n3(192 | l3 >>> 6), n3(128 | 63 & l3)) : l3 > 55295 && l3 < 57344 ? (n3(240 | (l3 = 65536 + (1047552 & l3) | 1023 & e4.charCodeAt(++o4)) >>> 18), n3(128 | l3 >>> 12 & 63), n3(128 | l3 >>> 6 & 63), n3(128 | 63 & l3)) : (n3(224 | l3 >>> 12), n3(128 | l3 >>> 6 & 63), n3(128 | 63 & l3));
    }
    return xs(s3, 0, r4);
  }
  function Gs(e4) {
    return function(e5, t4) {
      for (var i4 = "", s3 = 0; s3 < e5.length; ) {
        var r4 = e5[s3++];
        r4 < 128 || t4 ? i4 += String.fromCharCode(r4) : r4 < 224 ? i4 += String.fromCharCode((31 & r4) << 6 | 63 & e5[s3++]) : r4 < 240 ? i4 += String.fromCharCode((15 & r4) << 12 | (63 & e5[s3++]) << 6 | 63 & e5[s3++]) : (r4 = ((15 & r4) << 18 | (63 & e5[s3++]) << 12 | (63 & e5[s3++]) << 6 | 63 & e5[s3++]) - 65536, i4 += String.fromCharCode(55296 | r4 >> 10, 56320 | 1023 & r4));
      }
      return i4;
    }(Hs(Us(JSON.stringify(e4))), true);
  }
  function Qs(e4) {
    return e4.type === mi.Custom && "sessionIdle" === e4.data.tag;
  }
  function Js(e4, t4) {
    return t4.some((t5) => "regex" === t5.matching && new RegExp(t5.url).test(e4));
  }
  function vr(e4) {
    var { organization: t4, projectId: i4, prefix: s3, severityAllowList: r4 = ["error"] } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    return (n3) => {
      var o4, a3, l3, u3, c3;
      if (!("*" === r4 || r4.includes(n3.level)) || !e4.__loaded)
        return n3;
      n3.tags || (n3.tags = {});
      var d3 = e4.requestRouter.endpointFor("ui", "/project/".concat(e4.config.token, "/person/").concat(e4.get_distinct_id()));
      n3.tags["PostHog Person URL"] = d3, e4.sessionRecordingStarted() && (n3.tags["PostHog Recording URL"] = e4.get_session_replay_url({ withTimestamp: true }));
      var h3 = (null === (o4 = n3.exception) || void 0 === o4 ? void 0 : o4.values) || [];
      h3.map((e5) => {
        e5.stacktrace && (e5.stacktrace.type = "raw");
      });
      var _3 = { $exception_message: (null === (a3 = h3[0]) || void 0 === a3 ? void 0 : a3.value) || n3.message, $exception_type: null === (l3 = h3[0]) || void 0 === l3 ? void 0 : l3.type, $exception_personURL: d3, $exception_level: n3.level, $exception_list: h3, $sentry_event_id: n3.event_id, $sentry_exception: n3.exception, $sentry_exception_message: (null === (u3 = h3[0]) || void 0 === u3 ? void 0 : u3.value) || n3.message, $sentry_exception_type: null === (c3 = h3[0]) || void 0 === c3 ? void 0 : c3.type, $sentry_tags: n3.tags };
      return t4 && i4 && (_3.$sentry_url = (s3 || "https://sentry.io/organizations/") + t4 + "/issues/?project=" + i4 + "&query=" + n3.event_id), e4.exceptions.sendExceptionEvent(_3), n3;
    };
  }
  function yr(e4, t4) {
    var i4 = e4.config.segment;
    if (!i4)
      return t4();
    !function(e5, t5) {
      var i5 = e5.config.segment;
      if (!i5)
        return t5();
      var s3 = (i6) => {
        var s4 = () => i6.anonymousId() || Je();
        e5.config.get_device_id = s4, i6.id() && (e5.register({ distinct_id: i6.id(), $device_id: s4() }), e5.persistence.set_property(Re, "identified")), t5();
      }, r4 = i5.user();
      "then" in r4 && N(r4.then) ? r4.then((e6) => s3(e6)) : s3(r4);
    }(e4, () => {
      i4.register(((e5) => {
        Promise && Promise.resolve || X.warn("This browser does not have Promise support, and can not use the segment integration");
        var t5 = (t6, i5) => {
          var s3;
          if (!i5)
            return t6;
          t6.event.userId || t6.event.anonymousId === e5.get_distinct_id() || (X.info("Segment integration does not have a userId set, resetting PostHog"), e5.reset()), t6.event.userId && t6.event.userId !== e5.get_distinct_id() && (X.info("Segment integration has a userId set, identifying with PostHog"), e5.identify(t6.event.userId));
          var r4 = e5._calculate_event_properties(i5, null !== (s3 = t6.event.properties) && void 0 !== s3 ? s3 : {}, /* @__PURE__ */ new Date());
          return t6.event.properties = Object.assign({}, r4, t6.event.properties), t6;
        };
        return { name: "PostHog JS", type: "enrichment", version: "1.0.0", isLoaded: () => true, load: () => Promise.resolve(), track: (e6) => t5(e6, e6.event.event), page: (e6) => t5(e6, "$pageview"), identify: (e6) => t5(e6, "$identify"), screen: (e6) => t5(e6, "$screen") };
      })(e4)).then(() => {
        t4();
      });
    });
  }
  function Dr(e4, t4) {
    for (var i4 in t4)
      e4[i4] = t4[i4];
    return e4;
  }
  function Nr(e4) {
    var t4 = e4.parentNode;
    t4 && t4.removeChild(e4);
  }
  function qr(e4, t4, i4, s3, r4) {
    var n3 = { type: e4, props: t4, key: i4, ref: s3, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: null == r4 ? ++Pr : r4, __i: -1, __u: 0 };
    return null == r4 && null != Ir.vnode && Ir.vnode(n3), n3;
  }
  function Br(e4) {
    return e4.children;
  }
  function Hr(e4, t4) {
    this.props = e4, this.context = t4;
  }
  function Ur(e4, t4) {
    if (null == t4)
      return e4.__ ? Ur(e4.__, e4.__i + 1) : null;
    for (var i4; t4 < e4.__k.length; t4++)
      if (null != (i4 = e4.__k[t4]) && null != i4.__e)
        return i4.__e;
    return "function" == typeof e4.type ? Ur(e4) : null;
  }
  function Wr(e4) {
    var t4, i4;
    if (null != (e4 = e4.__) && null != e4.__c) {
      for (e4.__e = e4.__c.base = null, t4 = 0; t4 < e4.__k.length; t4++)
        if (null != (i4 = e4.__k[t4]) && null != i4.__e) {
          e4.__e = e4.__c.base = i4.__e;
          break;
        }
      return Wr(e4);
    }
  }
  function zr(e4) {
    (!e4.__d && (e4.__d = true) && Fr.push(e4) && !jr.__r++ || Rr !== Ir.debounceRendering) && ((Rr = Ir.debounceRendering) || Cr)(jr);
  }
  function jr() {
    var e4, t4, i4, s3, r4, n3, o4, a3, l3;
    for (Fr.sort(Tr); e4 = Fr.shift(); )
      e4.__d && (t4 = Fr.length, s3 = void 0, n3 = (r4 = (i4 = e4).__v).__e, a3 = [], l3 = [], (o4 = i4.__P) && ((s3 = Dr({}, r4)).__v = r4.__v + 1, Ir.vnode && Ir.vnode(s3), en(o4, s3, r4, i4.__n, void 0 !== o4.ownerSVGElement, 32 & r4.__u ? [n3] : null, a3, null == n3 ? Ur(r4) : n3, !!(32 & r4.__u), l3), s3.__.__k[s3.__i] = s3, tn(a3, s3, l3), s3.__e != n3 && Wr(s3)), Fr.length > t4 && Fr.sort(Tr));
    jr.__r = 0;
  }
  function Vr(e4, t4, i4, s3, r4, n3, o4, a3, l3, u3, c3) {
    var d3, h3, _3, p3, v3, g3 = s3 && s3.__k || Ar, f3 = t4.length;
    for (i4.__d = l3, Gr(i4, t4, g3), l3 = i4.__d, d3 = 0; d3 < f3; d3++)
      null != (_3 = i4.__k[d3]) && "boolean" != typeof _3 && "function" != typeof _3 && (h3 = -1 === _3.__i ? Mr : g3[_3.__i] || Mr, _3.__i = d3, en(e4, _3, h3, r4, n3, o4, a3, l3, u3, c3), p3 = _3.__e, _3.ref && h3.ref != _3.ref && (h3.ref && rn(h3.ref, null, _3), c3.push(_3.ref, _3.__c || p3, _3)), null == v3 && null != p3 && (v3 = p3), 65536 & _3.__u || h3.__k === _3.__k ? l3 = Qr(_3, l3, e4) : "function" == typeof _3.type && void 0 !== _3.__d ? l3 = _3.__d : p3 && (l3 = p3.nextSibling), _3.__d = void 0, _3.__u &= -196609);
    i4.__d = l3, i4.__e = v3;
  }
  function Gr(e4, t4, i4) {
    var s3, r4, n3, o4, a3, l3 = t4.length, u3 = i4.length, c3 = u3, d3 = 0;
    for (e4.__k = [], s3 = 0; s3 < l3; s3++)
      null != (r4 = e4.__k[s3] = null == (r4 = t4[s3]) || "boolean" == typeof r4 || "function" == typeof r4 ? null : "string" == typeof r4 || "number" == typeof r4 || "bigint" == typeof r4 || r4.constructor == String ? qr(null, r4, null, null, r4) : Lr(r4) ? qr(Br, { children: r4 }, null, null, null) : void 0 === r4.constructor && r4.__b > 0 ? qr(r4.type, r4.props, r4.key, r4.ref ? r4.ref : null, r4.__v) : r4) ? (r4.__ = e4, r4.__b = e4.__b + 1, a3 = Jr(r4, i4, o4 = s3 + d3, c3), r4.__i = a3, n3 = null, -1 !== a3 && (c3--, (n3 = i4[a3]) && (n3.__u |= 131072)), null == n3 || null === n3.__v ? (-1 == a3 && d3--, "function" != typeof r4.type && (r4.__u |= 65536)) : a3 !== o4 && (a3 === o4 + 1 ? d3++ : a3 > o4 ? c3 > l3 - o4 ? d3 += a3 - o4 : d3-- : d3 = a3 < o4 && a3 == o4 - 1 ? a3 - o4 : 0, a3 !== s3 + d3 && (r4.__u |= 65536))) : (n3 = i4[s3]) && null == n3.key && n3.__e && (n3.__e == e4.__d && (e4.__d = Ur(n3)), nn(n3, n3, false), i4[s3] = null, c3--);
    if (c3)
      for (s3 = 0; s3 < u3; s3++)
        null != (n3 = i4[s3]) && 0 == (131072 & n3.__u) && (n3.__e == e4.__d && (e4.__d = Ur(n3)), nn(n3, n3));
  }
  function Qr(e4, t4, i4) {
    var s3, r4;
    if ("function" == typeof e4.type) {
      for (s3 = e4.__k, r4 = 0; s3 && r4 < s3.length; r4++)
        s3[r4] && (s3[r4].__ = e4, t4 = Qr(s3[r4], t4, i4));
      return t4;
    }
    return e4.__e != t4 && (i4.insertBefore(e4.__e, t4 || null), t4 = e4.__e), t4 && t4.nextSibling;
  }
  function Jr(e4, t4, i4, s3) {
    var r4 = e4.key, n3 = e4.type, o4 = i4 - 1, a3 = i4 + 1, l3 = t4[i4];
    if (null === l3 || l3 && r4 == l3.key && n3 === l3.type)
      return i4;
    if (s3 > (null != l3 && 0 == (131072 & l3.__u) ? 1 : 0))
      for (; o4 >= 0 || a3 < t4.length; ) {
        if (o4 >= 0) {
          if ((l3 = t4[o4]) && 0 == (131072 & l3.__u) && r4 == l3.key && n3 === l3.type)
            return o4;
          o4--;
        }
        if (a3 < t4.length) {
          if ((l3 = t4[a3]) && 0 == (131072 & l3.__u) && r4 == l3.key && n3 === l3.type)
            return a3;
          a3++;
        }
      }
    return -1;
  }
  function Yr(e4, t4, i4) {
    "-" === t4[0] ? e4.setProperty(t4, null == i4 ? "" : i4) : e4[t4] = null == i4 ? "" : "number" != typeof i4 || Or.test(t4) ? i4 : i4 + "px";
  }
  function Xr(e4, t4, i4, s3, r4) {
    var n3;
    e:
      if ("style" === t4)
        if ("string" == typeof i4)
          e4.style.cssText = i4;
        else {
          if ("string" == typeof s3 && (e4.style.cssText = s3 = ""), s3)
            for (t4 in s3)
              i4 && t4 in i4 || Yr(e4.style, t4, "");
          if (i4)
            for (t4 in i4)
              s3 && i4[t4] === s3[t4] || Yr(e4.style, t4, i4[t4]);
        }
      else if ("o" === t4[0] && "n" === t4[1])
        n3 = t4 !== (t4 = t4.replace(/(PointerCapture)$|Capture$/, "$1")), t4 = t4.toLowerCase() in e4 ? t4.toLowerCase().slice(2) : t4.slice(2), e4.l || (e4.l = {}), e4.l[t4 + n3] = i4, i4 ? s3 ? i4.u = s3.u : (i4.u = Date.now(), e4.addEventListener(t4, n3 ? Zr : Kr, n3)) : e4.removeEventListener(t4, n3 ? Zr : Kr, n3);
      else {
        if (r4)
          t4 = t4.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("width" !== t4 && "height" !== t4 && "href" !== t4 && "list" !== t4 && "form" !== t4 && "tabIndex" !== t4 && "download" !== t4 && "rowSpan" !== t4 && "colSpan" !== t4 && "role" !== t4 && t4 in e4)
          try {
            e4[t4] = null == i4 ? "" : i4;
            break e;
          } catch (e5) {
          }
        "function" == typeof i4 || (null == i4 || false === i4 && "-" !== t4[4] ? e4.removeAttribute(t4) : e4.setAttribute(t4, i4));
      }
  }
  function Kr(e4) {
    var t4 = this.l[e4.type + false];
    if (e4.t) {
      if (e4.t <= t4.u)
        return;
    } else
      e4.t = Date.now();
    return t4(Ir.event ? Ir.event(e4) : e4);
  }
  function Zr(e4) {
    return this.l[e4.type + true](Ir.event ? Ir.event(e4) : e4);
  }
  function en(e4, t4, i4, s3, r4, n3, o4, a3, l3, u3) {
    var c3, d3, h3, _3, p3, v3, g3, f3, m3, b3, y3, w3, S3, E3, k3, x3 = t4.type;
    if (void 0 !== t4.constructor)
      return null;
    128 & i4.__u && (l3 = !!(32 & i4.__u), n3 = [a3 = t4.__e = i4.__e]), (c3 = Ir.__b) && c3(t4);
    e:
      if ("function" == typeof x3)
        try {
          if (f3 = t4.props, m3 = (c3 = x3.contextType) && s3[c3.__c], b3 = c3 ? m3 ? m3.props.value : c3.__ : s3, i4.__c ? g3 = (d3 = t4.__c = i4.__c).__ = d3.__E : ("prototype" in x3 && x3.prototype.render ? t4.__c = d3 = new x3(f3, b3) : (t4.__c = d3 = new Hr(f3, b3), d3.constructor = x3, d3.render = on), m3 && m3.sub(d3), d3.props = f3, d3.state || (d3.state = {}), d3.context = b3, d3.__n = s3, h3 = d3.__d = true, d3.__h = [], d3._sb = []), null == d3.__s && (d3.__s = d3.state), null != x3.getDerivedStateFromProps && (d3.__s == d3.state && (d3.__s = Dr({}, d3.__s)), Dr(d3.__s, x3.getDerivedStateFromProps(f3, d3.__s))), _3 = d3.props, p3 = d3.state, d3.__v = t4, h3)
            null == x3.getDerivedStateFromProps && null != d3.componentWillMount && d3.componentWillMount(), null != d3.componentDidMount && d3.__h.push(d3.componentDidMount);
          else {
            if (null == x3.getDerivedStateFromProps && f3 !== _3 && null != d3.componentWillReceiveProps && d3.componentWillReceiveProps(f3, b3), !d3.__e && (null != d3.shouldComponentUpdate && false === d3.shouldComponentUpdate(f3, d3.__s, b3) || t4.__v === i4.__v)) {
              for (t4.__v !== i4.__v && (d3.props = f3, d3.state = d3.__s, d3.__d = false), t4.__e = i4.__e, t4.__k = i4.__k, t4.__k.forEach(function(e5) {
                e5 && (e5.__ = t4);
              }), y3 = 0; y3 < d3._sb.length; y3++)
                d3.__h.push(d3._sb[y3]);
              d3._sb = [], d3.__h.length && o4.push(d3);
              break e;
            }
            null != d3.componentWillUpdate && d3.componentWillUpdate(f3, d3.__s, b3), null != d3.componentDidUpdate && d3.__h.push(function() {
              d3.componentDidUpdate(_3, p3, v3);
            });
          }
          if (d3.context = b3, d3.props = f3, d3.__P = e4, d3.__e = false, w3 = Ir.__r, S3 = 0, "prototype" in x3 && x3.prototype.render) {
            for (d3.state = d3.__s, d3.__d = false, w3 && w3(t4), c3 = d3.render(d3.props, d3.state, d3.context), E3 = 0; E3 < d3._sb.length; E3++)
              d3.__h.push(d3._sb[E3]);
            d3._sb = [];
          } else
            do {
              d3.__d = false, w3 && w3(t4), c3 = d3.render(d3.props, d3.state, d3.context), d3.state = d3.__s;
            } while (d3.__d && ++S3 < 25);
          d3.state = d3.__s, null != d3.getChildContext && (s3 = Dr(Dr({}, s3), d3.getChildContext())), h3 || null == d3.getSnapshotBeforeUpdate || (v3 = d3.getSnapshotBeforeUpdate(_3, p3)), Vr(e4, Lr(k3 = null != c3 && c3.type === Br && null == c3.key ? c3.props.children : c3) ? k3 : [k3], t4, i4, s3, r4, n3, o4, a3, l3, u3), d3.base = t4.__e, t4.__u &= -161, d3.__h.length && o4.push(d3), g3 && (d3.__E = d3.__ = null);
        } catch (e5) {
          t4.__v = null, l3 || null != n3 ? (t4.__e = a3, t4.__u |= l3 ? 160 : 32, n3[n3.indexOf(a3)] = null) : (t4.__e = i4.__e, t4.__k = i4.__k), Ir.__e(e5, t4, i4);
        }
      else
        null == n3 && t4.__v === i4.__v ? (t4.__k = i4.__k, t4.__e = i4.__e) : t4.__e = sn(i4.__e, t4, i4, s3, r4, n3, o4, l3, u3);
    (c3 = Ir.diffed) && c3(t4);
  }
  function tn(e4, t4, i4) {
    t4.__d = void 0;
    for (var s3 = 0; s3 < i4.length; s3++)
      rn(i4[s3], i4[++s3], i4[++s3]);
    Ir.__c && Ir.__c(t4, e4), e4.some(function(t5) {
      try {
        e4 = t5.__h, t5.__h = [], e4.some(function(e5) {
          e5.call(t5);
        });
      } catch (e5) {
        Ir.__e(e5, t5.__v);
      }
    });
  }
  function sn(e4, t4, i4, s3, r4, n3, o4, a3, l3) {
    var u3, c3, d3, h3, _3, p3, v3, g3 = i4.props, f3 = t4.props, m3 = t4.type;
    if ("svg" === m3 && (r4 = true), null != n3) {
      for (u3 = 0; u3 < n3.length; u3++)
        if ((_3 = n3[u3]) && "setAttribute" in _3 == !!m3 && (m3 ? _3.localName === m3 : 3 === _3.nodeType)) {
          e4 = _3, n3[u3] = null;
          break;
        }
    }
    if (null == e4) {
      if (null === m3)
        return document.createTextNode(f3);
      e4 = r4 ? document.createElementNS("http://www.w3.org/2000/svg", m3) : document.createElement(m3, f3.is && f3), n3 = null, a3 = false;
    }
    if (null === m3)
      g3 === f3 || a3 && e4.data === f3 || (e4.data = f3);
    else {
      if (n3 = n3 && xr.call(e4.childNodes), g3 = i4.props || Mr, !a3 && null != n3)
        for (g3 = {}, u3 = 0; u3 < e4.attributes.length; u3++)
          g3[(_3 = e4.attributes[u3]).name] = _3.value;
      for (u3 in g3)
        _3 = g3[u3], "children" == u3 || ("dangerouslySetInnerHTML" == u3 ? d3 = _3 : "key" === u3 || u3 in f3 || Xr(e4, u3, null, _3, r4));
      for (u3 in f3)
        _3 = f3[u3], "children" == u3 ? h3 = _3 : "dangerouslySetInnerHTML" == u3 ? c3 = _3 : "value" == u3 ? p3 = _3 : "checked" == u3 ? v3 = _3 : "key" === u3 || a3 && "function" != typeof _3 || g3[u3] === _3 || Xr(e4, u3, _3, g3[u3], r4);
      if (c3)
        a3 || d3 && (c3.__html === d3.__html || c3.__html === e4.innerHTML) || (e4.innerHTML = c3.__html), t4.__k = [];
      else if (d3 && (e4.innerHTML = ""), Vr(e4, Lr(h3) ? h3 : [h3], t4, i4, s3, r4 && "foreignObject" !== m3, n3, o4, n3 ? n3[0] : i4.__k && Ur(i4, 0), a3, l3), null != n3)
        for (u3 = n3.length; u3--; )
          null != n3[u3] && Nr(n3[u3]);
      a3 || (u3 = "value", void 0 !== p3 && (p3 !== e4[u3] || "progress" === m3 && !p3 || "option" === m3 && p3 !== g3[u3]) && Xr(e4, u3, p3, g3[u3], false), u3 = "checked", void 0 !== v3 && v3 !== e4[u3] && Xr(e4, u3, v3, g3[u3], false));
    }
    return e4;
  }
  function rn(e4, t4, i4) {
    try {
      "function" == typeof e4 ? e4(t4) : e4.current = t4;
    } catch (e5) {
      Ir.__e(e5, i4);
    }
  }
  function nn(e4, t4, i4) {
    var s3, r4;
    if (Ir.unmount && Ir.unmount(e4), (s3 = e4.ref) && (s3.current && s3.current !== e4.__e || rn(s3, null, t4)), null != (s3 = e4.__c)) {
      if (s3.componentWillUnmount)
        try {
          s3.componentWillUnmount();
        } catch (e5) {
          Ir.__e(e5, t4);
        }
      s3.base = s3.__P = null, e4.__c = void 0;
    }
    if (s3 = e4.__k)
      for (r4 = 0; r4 < s3.length; r4++)
        s3[r4] && nn(s3[r4], t4, i4 || "function" != typeof e4.type);
    i4 || null == e4.__e || Nr(e4.__e), e4.__ = e4.__e = e4.__d = void 0;
  }
  function on(e4, t4, i4) {
    return this.constructor(e4, i4);
  }
  function En(e4, t4) {
    return t4.length > e4 ? t4.slice(0, e4) + "..." : t4;
  }
  function kn(e4) {
    if (e4.previousElementSibling)
      return e4.previousElementSibling;
    var t4 = e4;
    do {
      t4 = t4.previousSibling;
    } while (t4 && !wi(t4));
    return t4;
  }
  function xn(e4, t4, i4, s3) {
    var r4 = e4.tagName.toLowerCase(), n3 = { tag_name: r4 };
    Ti.indexOf(r4) > -1 && !i4 && ("a" === r4.toLowerCase() || "button" === r4.toLowerCase() ? n3.$el_text = En(1024, Wi(e4)) : n3.$el_text = En(1024, Ri(e4)));
    var o4 = Pi(e4);
    o4.length > 0 && (n3.classes = o4.filter(function(e5) {
      return "" !== e5;
    })), f(e4.attributes, function(i5) {
      var r5;
      if ((!Oi(e4) || -1 !== ["name", "id", "class", "aria-label"].indexOf(i5.name)) && ((null == s3 || !s3.includes(i5.name)) && !t4 && Ui(i5.value) && (r5 = i5.name, !U(r5) || "_ngcontent" !== r5.substring(0, 10) && "_nghost" !== r5.substring(0, 7)))) {
        var o5 = i5.value;
        "class" === i5.name && (o5 = xi(o5).join(" ")), n3["attr__" + i5.name] = En(1024, o5);
      }
    });
    for (var a3 = 1, l3 = 1, u3 = e4; u3 = kn(u3); )
      a3++, u3.tagName === e4.tagName && l3++;
    return n3.nth_child = a3, n3.nth_of_type = l3, n3;
  }
  function In(t4, i4) {
    for (var s3, r4, { e: n3, maskAllElementAttributes: o4, maskAllText: a3, elementAttributeIgnoreList: l3, elementsChainAsString: u3 } = i4, c3 = [t4], d3 = t4; d3.parentNode && !Si(d3, "body"); )
      ki(d3.parentNode) ? (c3.push(d3.parentNode.host), d3 = d3.parentNode.host) : (c3.push(d3.parentNode), d3 = d3.parentNode);
    var h3, _3 = [], p3 = {}, v3 = false, g3 = false;
    if (f(c3, (e4) => {
      var t5 = Ai(e4);
      "a" === e4.tagName.toLowerCase() && (v3 = e4.getAttribute("href"), v3 = t5 && v3 && Ui(v3) && v3), b(Pi(e4), "ph-no-capture") && (g3 = true), _3.push(xn(e4, o4, a3, l3));
      var i5 = function(e5) {
        if (!Ai(e5))
          return {};
        var t6 = {};
        return f(e5.attributes, function(e6) {
          if (e6.name && 0 === e6.name.indexOf("data-ph-capture-attribute")) {
            var i6 = e6.name.replace("data-ph-capture-attribute-", ""), s4 = e6.value;
            i6 && s4 && Ui(s4) && (t6[i6] = s4);
          }
        }), t6;
      }(e4);
      m(p3, i5);
    }), g3)
      return { props: {}, explicitNoCapture: g3 };
    if (a3 || ("a" === t4.tagName.toLowerCase() || "button" === t4.tagName.toLowerCase() ? _3[0].$el_text = Wi(t4) : _3[0].$el_text = Ri(t4)), v3) {
      var y3, w3;
      _3[0].attr__href = v3;
      var S3 = null === (y3 = dt(v3)) || void 0 === y3 ? void 0 : y3.host, E3 = null == e2 || null === (w3 = e2.location) || void 0 === w3 ? void 0 : w3.host;
      S3 && E3 && S3 !== E3 && (h3 = v3);
    }
    return { props: m({ $event_type: n3.type, $ce_version: 1 }, u3 ? { $elements_chain: ji(_3) } : { $elements: _3 }, null !== (s3 = _3[0]) && void 0 !== s3 && s3.$el_text ? { $el_text: null === (r4 = _3[0]) || void 0 === r4 ? void 0 : r4.$el_text } : {}, h3 && "click" === n3.type ? { $external_click_url: h3 } : {}, p3) };
  }
  var e2, t2, i, s, r2, n, o2, a, l, u, c, d, h, _, p, v, m, w, S, E, k, I, P, R, C, T, M, A, O, L, D, N, q, B, H, U, W, z, j, V, G, Q, J, Y, X, K, se, re, ne, oe, ae, le, ue, ce, de, he, _e, pe, ve, ge, fe, me, be, ye, we, Se, Ee, ke, xe, Ie, Pe, Fe, Re, Ce, Te, $e, Me, Ae, Oe, Le, De, Ne, qe, Be, He, Ue, We, ze, je, Ve, Ge, Qe, Je, Ye, Xe, Ke, Ze, tt, it, st, rt, nt, ot, at, lt, ut, ct, dt, ht, _t, pt, vt, gt, ft, mt, bt, yt, wt, St, Et, kt, xt, It, Pt, Ft, Rt, Ct, Tt, $t, Mt, At, Ot, Lt, Dt, Nt, qt, Bt, Ht, Ut, Wt, zt, jt, Vt, Gt, Qt, Jt, Yt, Xt, Kt, Zt, ei, ti, ii, si, ri, ni, oi, ai, li, ui, ci, di, hi, _i, pi, vi, mi, bi, Ti, Li, Di, Ni, qi, Bi, Hi, Qi, Ji, Yi, Xi, Ki, Zi, is, rs, ns, os, as, ls, us, cs, ds, hs, _s, ps, ms, vs, gs, fs, bs, ys, ws, Ss, Es, ks, xs, Is, Ps, Fs, Rs, Cs, Ts, $s, Ms, As, Os, Ls, Ds, Ns, qs, Bs, Ws, zs, js, Vs, Ys, Xs, Ks, Zs, er, tr, ir, sr, rr, nr, or, ar, lr, ur, cr, dr, hr, _r, pr, gr, fr, mr, br, wr, Sr, Er, kr, xr, Ir, Pr, Fr, Rr, Cr, Tr, $r, Mr, Ar, Or, Lr, an, ln, un, cn, dn, hn, _n, pn, vn, gn, fn, mn, bn, yn, wn, Sn, Pn, Fn, Rn, Cn, Tn, $n, Mn, An, On, Ln, Dn, Nn, qn, Bn, Hn, Un, Wn, zn, jn, Vn, Gn, Qn;
  var init_module = __esm({
    "../../node_modules/.pnpm/posthog-js@1.189.0/node_modules/posthog-js/dist/module.js"() {
      e2 = "undefined" != typeof window ? window : void 0;
      t2 = "undefined" != typeof globalThis ? globalThis : e2;
      i = Array.prototype;
      s = i.forEach;
      r2 = i.indexOf;
      n = null == t2 ? void 0 : t2.navigator;
      o2 = null == t2 ? void 0 : t2.document;
      a = null == t2 ? void 0 : t2.location;
      l = null == t2 ? void 0 : t2.fetch;
      u = null != t2 && t2.XMLHttpRequest && "withCredentials" in new t2.XMLHttpRequest() ? t2.XMLHttpRequest : void 0;
      c = null == t2 ? void 0 : t2.AbortController;
      d = null == n ? void 0 : n.userAgent;
      h = null != e2 ? e2 : {};
      _ = { DEBUG: false, LIB_VERSION: "1.189.0" };
      p = {};
      v = function(e4) {
        return e4.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
      };
      m = function(e4) {
        for (var t4 = arguments.length, i4 = new Array(t4 > 1 ? t4 - 1 : 0), s3 = 1; s3 < t4; s3++)
          i4[s3 - 1] = arguments[s3];
        return g(i4, function(t5) {
          for (var i5 in t5)
            void 0 !== t5[i5] && (e4[i5] = t5[i5]);
        }), e4;
      };
      w = function(e4) {
        try {
          return e4();
        } catch (e5) {
          return;
        }
      };
      S = function(e4) {
        return function() {
          try {
            for (var t4 = arguments.length, i4 = new Array(t4), s3 = 0; s3 < t4; s3++)
              i4[s3] = arguments[s3];
            return e4.apply(this, i4);
          } catch (e5) {
            X.critical("Implementation error. Please turn on debug mode and open a ticket on https://app.posthog.com/home#panel=support%3Asupport%3A."), X.critical(e5);
          }
        };
      };
      E = function(e4) {
        var t4 = {};
        return f(e4, function(e5, i4) {
          U(e5) && e5.length > 0 && (t4[i4] = e5);
        }), t4;
      };
      k = function(e4) {
        return e4.replace(/^\$/, "");
      };
      I = function(e4) {
        var t4, i4, s3, r4, n3 = "";
        for (t4 = i4 = 0, s3 = (e4 = (e4 + "").replace(/\r\n/g, "\n").replace(/\r/g, "\n")).length, r4 = 0; r4 < s3; r4++) {
          var o4 = e4.charCodeAt(r4), a3 = null;
          o4 < 128 ? i4++ : a3 = o4 > 127 && o4 < 2048 ? String.fromCharCode(o4 >> 6 | 192, 63 & o4 | 128) : String.fromCharCode(o4 >> 12 | 224, o4 >> 6 & 63 | 128, 63 & o4 | 128), z(a3) || (i4 > t4 && (n3 += e4.substring(t4, i4)), n3 += a3, t4 = i4 = r4 + 1);
        }
        return i4 > t4 && (n3 += e4.substring(t4, e4.length)), n3;
      };
      P = function() {
        function t4(e4) {
          return e4 && (e4.preventDefault = t4.preventDefault, e4.stopPropagation = t4.stopPropagation), e4;
        }
        return t4.preventDefault = function() {
          this.returnValue = false;
        }, t4.stopPropagation = function() {
          this.cancelBubble = true;
        }, function(i4, s3, r4, n3, o4) {
          if (i4)
            if (i4.addEventListener && !n3)
              i4.addEventListener(s3, r4, !!o4);
            else {
              var a3 = "on" + s3, l3 = i4[a3];
              i4[a3] = /* @__PURE__ */ function(i5, s4, r5) {
                return function(n4) {
                  if (n4 = n4 || t4(null == e2 ? void 0 : e2.event)) {
                    var o5, a4 = true;
                    N(r5) && (o5 = r5(n4));
                    var l4 = s4.call(i5, n4);
                    return false !== o5 && false !== l4 || (a4 = false), a4;
                  }
                };
              }(i4, r4, l3);
            }
          else
            X.error("No valid element provided to register_event");
        };
      }();
      C = "$copy_autocapture";
      T = ["$snapshot", "$pageview", "$pageleave", "$set", "survey dismissed", "survey sent", "survey shown", "$identify", "$groupidentify", "$create_alias", "$$client_ingestion_warning", "$web_experiment_applied", "$feature_enrollment_update", "$feature_flag_called"];
      !function(e4) {
        e4.GZipJS = "gzip-js", e4.Base64 = "base64";
      }(R || (R = {}));
      M = Array.isArray;
      A = Object.prototype;
      O = A.hasOwnProperty;
      L = A.toString;
      D = M || function(e4) {
        return "[object Array]" === L.call(e4);
      };
      N = (e4) => "function" == typeof e4;
      q = (e4) => e4 === Object(e4) && !D(e4);
      B = (e4) => {
        if (q(e4)) {
          for (var t4 in e4)
            if (O.call(e4, t4))
              return false;
          return true;
        }
        return false;
      };
      H = (e4) => void 0 === e4;
      U = (e4) => "[object String]" == L.call(e4);
      W = (e4) => U(e4) && 0 === e4.trim().length;
      z = (e4) => null === e4;
      j = (e4) => H(e4) || z(e4);
      V = (e4) => "[object Number]" == L.call(e4);
      G = (e4) => "[object Boolean]" === L.call(e4);
      Q = (e4) => e4 instanceof FormData;
      J = (e4) => b(T, e4);
      Y = "[PostHog.js]";
      X = { _log: function(t4) {
        if (e2 && (_.DEBUG || h.POSTHOG_DEBUG) && !H(e2.console) && e2.console) {
          for (var i4 = ("__rrweb_original__" in e2.console[t4]) ? e2.console[t4].__rrweb_original__ : e2.console[t4], s3 = arguments.length, r4 = new Array(s3 > 1 ? s3 - 1 : 0), n3 = 1; n3 < s3; n3++)
            r4[n3 - 1] = arguments[n3];
          i4(Y, ...r4);
        }
      }, info: function() {
        for (var e4 = arguments.length, t4 = new Array(e4), i4 = 0; i4 < e4; i4++)
          t4[i4] = arguments[i4];
        X._log("log", ...t4);
      }, warn: function() {
        for (var e4 = arguments.length, t4 = new Array(e4), i4 = 0; i4 < e4; i4++)
          t4[i4] = arguments[i4];
        X._log("warn", ...t4);
      }, error: function() {
        for (var e4 = arguments.length, t4 = new Array(e4), i4 = 0; i4 < e4; i4++)
          t4[i4] = arguments[i4];
        X._log("error", ...t4);
      }, critical: function() {
        for (var e4 = arguments.length, t4 = new Array(e4), i4 = 0; i4 < e4; i4++)
          t4[i4] = arguments[i4];
        console.error(Y, ...t4);
      }, uninitializedWarning: (e4) => {
        X.error("You must initialize PostHog before calling ".concat(e4));
      } };
      K = (e4, t4, i4) => {
        if (e4.config.disable_external_dependency_loading)
          return X.warn("".concat(t4, " was requested but loading of external scripts is disabled.")), i4("Loading of external scripts is disabled");
        var s3 = () => {
          if (!o2)
            return i4("document not found");
          var e5 = o2.createElement("script");
          e5.type = "text/javascript", e5.crossOrigin = "anonymous", e5.src = t4, e5.onload = (e6) => i4(void 0, e6), e5.onerror = (e6) => i4(e6);
          var s4, r4 = o2.querySelectorAll("body > script");
          r4.length > 0 ? null === (s4 = r4[0].parentNode) || void 0 === s4 || s4.insertBefore(e5, r4[0]) : o2.body.appendChild(e5);
        };
        null != o2 && o2.body ? s3() : null == o2 || o2.addEventListener("DOMContentLoaded", s3);
      };
      h.__PosthogExtensions__ = h.__PosthogExtensions__ || {}, h.__PosthogExtensions__.loadExternalDependency = (e4, t4, i4) => {
        var s3 = "/static/".concat(t4, ".js") + "?v=".concat(e4.version);
        if ("toolbar" === t4) {
          var r4 = 3e5, n3 = Math.floor(Date.now() / r4) * r4;
          s3 = "".concat(s3, "&t=").concat(n3);
        }
        var o4 = e4.requestRouter.endpointFor("assets", s3);
        K(e4, o4, i4);
      }, h.__PosthogExtensions__.loadSiteApp = (e4, t4, i4) => {
        var s3 = e4.requestRouter.endpointFor("api", t4);
        K(e4, s3, i4);
      };
      se = "$people_distinct_id";
      re = "__alias";
      ne = "__timers";
      oe = "$autocapture_disabled_server_side";
      ae = "$heatmaps_enabled_server_side";
      le = "$exception_capture_enabled_server_side";
      ue = "$web_vitals_enabled_server_side";
      ce = "$dead_clicks_enabled_server_side";
      de = "$web_vitals_allowed_metrics";
      he = "$session_recording_enabled_server_side";
      _e = "$console_log_recording_enabled_server_side";
      pe = "$session_recording_network_payload_capture";
      ve = "$session_recording_canvas_recording";
      ge = "$replay_sample_rate";
      fe = "$replay_minimum_duration";
      me = "$sesid";
      be = "$session_is_sampled";
      ye = "$session_recording_url_trigger_activated_session";
      we = "$session_recording_event_trigger_activated_session";
      Se = "$enabled_feature_flags";
      Ee = "$early_access_features";
      ke = "$stored_person_properties";
      xe = "$stored_group_properties";
      Ie = "$surveys";
      Pe = "$surveys_activated";
      Fe = "$flag_call_reported";
      Re = "$user_state";
      Ce = "$client_session_props";
      Te = "$capture_rate_limit";
      $e = "$initial_campaign_params";
      Me = "$initial_referrer_info";
      Ae = "$initial_person_info";
      Oe = "$epp";
      Le = "__POSTHOG_TOOLBAR__";
      De = [se, re, "__cmpns", ne, he, ae, me, Se, Re, Ee, xe, ke, Ie, Fe, Ce, Te, $e, Me, Oe];
      Ne = "$active_feature_flags";
      qe = "$override_feature_flags";
      Be = "$feature_flag_payloads";
      He = (e4) => {
        var t4 = {};
        for (var [i4, s3] of y(e4 || {}))
          s3 && (t4[i4] = s3);
        return t4;
      };
      Ue = class {
        constructor(e4) {
          this.instance = e4, this._override_warning = false, this.featureFlagEventHandlers = [], this.reloadFeatureFlagsQueued = false, this.reloadFeatureFlagsInAction = false;
        }
        getFlags() {
          return Object.keys(this.getFlagVariants());
        }
        getFlagVariants() {
          var e4 = this.instance.get_property(Se), t4 = this.instance.get_property(qe);
          if (!t4)
            return e4 || {};
          for (var i4 = m({}, e4), s3 = Object.keys(t4), r4 = 0; r4 < s3.length; r4++)
            i4[s3[r4]] = t4[s3[r4]];
          return this._override_warning || (X.warn(" Overriding feature flags!", { enabledFlags: e4, overriddenFlags: t4, finalFlags: i4 }), this._override_warning = true), i4;
        }
        getFlagPayloads() {
          return this.instance.get_property(Be) || {};
        }
        reloadFeatureFlags() {
          this.reloadFeatureFlagsQueued || (this.reloadFeatureFlagsQueued = true, this._startReloadTimer());
        }
        setAnonymousDistinctId(e4) {
          this.$anon_distinct_id = e4;
        }
        setReloadingPaused(e4) {
          this.reloadFeatureFlagsInAction = e4;
        }
        resetRequestQueue() {
          this.reloadFeatureFlagsQueued = false;
        }
        _startReloadTimer() {
          this.reloadFeatureFlagsQueued && !this.reloadFeatureFlagsInAction && setTimeout(() => {
            !this.reloadFeatureFlagsInAction && this.reloadFeatureFlagsQueued && (this.reloadFeatureFlagsQueued = false, this._reloadFeatureFlagsRequest());
          }, 5);
        }
        _reloadFeatureFlagsRequest() {
          if (!this.instance.config.advanced_disable_feature_flags) {
            this.setReloadingPaused(true);
            var e4 = this.instance.config.token, t4 = this.instance.get_property(ke), i4 = this.instance.get_property(xe), s3 = { token: e4, distinct_id: this.instance.get_distinct_id(), groups: this.instance.getGroups(), $anon_distinct_id: this.$anon_distinct_id, person_properties: t4, group_properties: i4, disable_flags: this.instance.config.advanced_disable_feature_flags || void 0 };
            this.instance._send_request({ method: "POST", url: this.instance.requestRouter.endpointFor("api", "/decide/?v=3"), data: s3, compression: this.instance.config.disable_compression ? void 0 : R.Base64, timeout: this.instance.config.feature_flag_request_timeout_ms, callback: (e5) => {
              var t5;
              this.setReloadingPaused(false);
              var i5 = true;
              200 === e5.statusCode && (this.$anon_distinct_id = void 0, i5 = false), this.receivedFeatureFlags(null !== (t5 = e5.json) && void 0 !== t5 ? t5 : {}, i5), this._startReloadTimer();
            } });
          }
        }
        getFeatureFlag(e4) {
          var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if (this.instance.decideEndpointWasHit || this.getFlags() && this.getFlags().length > 0) {
            var i4, s3 = this.getFlagVariants()[e4], r4 = "".concat(s3), n3 = this.instance.get_property(Fe) || {};
            if (t4.send_event || !("send_event" in t4)) {
              if (!(e4 in n3) || !n3[e4].includes(r4))
                D(n3[e4]) ? n3[e4].push(r4) : n3[e4] = [r4], null === (i4 = this.instance.persistence) || void 0 === i4 || i4.register({ [Fe]: n3 }), this.instance.capture("$feature_flag_called", { $feature_flag: e4, $feature_flag_response: s3 });
            }
            return s3;
          }
          X.warn('getFeatureFlag for key "' + e4 + `" failed. Feature flags didn't load in time.`);
        }
        getFeatureFlagPayload(e4) {
          return this.getFlagPayloads()[e4];
        }
        isFeatureEnabled(e4) {
          var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if (this.instance.decideEndpointWasHit || this.getFlags() && this.getFlags().length > 0)
            return !!this.getFeatureFlag(e4, t4);
          X.warn('isFeatureEnabled for key "' + e4 + `" failed. Feature flags didn't load in time.`);
        }
        addFeatureFlagsHandler(e4) {
          this.featureFlagEventHandlers.push(e4);
        }
        removeFeatureFlagsHandler(e4) {
          this.featureFlagEventHandlers = this.featureFlagEventHandlers.filter((t4) => t4 !== e4);
        }
        receivedFeatureFlags(e4, t4) {
          if (this.instance.persistence) {
            this.instance.decideEndpointWasHit = true;
            var i4 = this.getFlagVariants(), s3 = this.getFlagPayloads();
            !function(e5, t5) {
              var i5 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, s4 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, r4 = e5.featureFlags, n3 = e5.featureFlagPayloads;
              if (r4)
                if (D(r4)) {
                  var o4 = {};
                  if (r4)
                    for (var a3 = 0; a3 < r4.length; a3++)
                      o4[r4[a3]] = true;
                  t5 && t5.register({ [Ne]: r4, [Se]: o4 });
                } else {
                  var l3 = r4, u3 = n3;
                  e5.errorsWhileComputingFlags && (l3 = ee(ee({}, i5), l3), u3 = ee(ee({}, s4), u3)), t5 && t5.register({ [Ne]: Object.keys(He(l3)), [Se]: l3 || {}, [Be]: u3 || {} });
                }
            }(e4, this.instance.persistence, i4, s3), this._fireFeatureFlagsCallbacks(t4);
          }
        }
        override(e4) {
          var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          if (!this.instance.__loaded || !this.instance.persistence)
            return X.uninitializedWarning("posthog.feature_flags.override");
          if (this._override_warning = t4, false === e4)
            this.instance.persistence.unregister(qe);
          else if (D(e4)) {
            for (var i4 = {}, s3 = 0; s3 < e4.length; s3++)
              i4[e4[s3]] = true;
            this.instance.persistence.register({ [qe]: i4 });
          } else
            this.instance.persistence.register({ [qe]: e4 });
        }
        onFeatureFlags(e4) {
          if (this.addFeatureFlagsHandler(e4), this.instance.decideEndpointWasHit) {
            var { flags: t4, flagVariants: i4 } = this._prepareFeatureFlagsForCallbacks();
            e4(t4, i4);
          }
          return () => this.removeFeatureFlagsHandler(e4);
        }
        updateEarlyAccessFeatureEnrollment(e4, t4) {
          var i4, s3 = { ["$feature_enrollment/".concat(e4)]: t4 };
          this.instance.capture("$feature_enrollment_update", { $feature_flag: e4, $feature_enrollment: t4, $set: s3 }), this.setPersonPropertiesForFlags(s3, false);
          var r4 = ee(ee({}, this.getFlagVariants()), {}, { [e4]: t4 });
          null === (i4 = this.instance.persistence) || void 0 === i4 || i4.register({ [Ne]: Object.keys(He(r4)), [Se]: r4 }), this._fireFeatureFlagsCallbacks();
        }
        getEarlyAccessFeatures(e4) {
          var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i4 = this.instance.get_property(Ee);
          if (i4 && !t4)
            return e4(i4);
          this.instance._send_request({ transport: "XHR", url: this.instance.requestRouter.endpointFor("api", "/api/early_access_features/?token=".concat(this.instance.config.token)), method: "GET", callback: (t5) => {
            var i5;
            if (t5.json) {
              var s3 = t5.json.earlyAccessFeatures;
              return null === (i5 = this.instance.persistence) || void 0 === i5 || i5.register({ [Ee]: s3 }), e4(s3);
            }
          } });
        }
        _prepareFeatureFlagsForCallbacks() {
          var e4 = this.getFlags(), t4 = this.getFlagVariants();
          return { flags: e4.filter((e5) => t4[e5]), flagVariants: Object.keys(t4).filter((e5) => t4[e5]).reduce((e5, i4) => (e5[i4] = t4[i4], e5), {}) };
        }
        _fireFeatureFlagsCallbacks(e4) {
          var { flags: t4, flagVariants: i4 } = this._prepareFeatureFlagsForCallbacks();
          this.featureFlagEventHandlers.forEach((s3) => s3(t4, i4, { errorsLoading: e4 }));
        }
        setPersonPropertiesForFlags(e4) {
          var t4 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i4 = this.instance.get_property(ke) || {};
          this.instance.register({ [ke]: ee(ee({}, i4), e4) }), t4 && this.instance.reloadFeatureFlags();
        }
        resetPersonPropertiesForFlags() {
          this.instance.unregister(ke);
        }
        setGroupPropertiesForFlags(e4) {
          var t4 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i4 = this.instance.get_property(xe) || {};
          0 !== Object.keys(i4).length && Object.keys(i4).forEach((t5) => {
            i4[t5] = ee(ee({}, i4[t5]), e4[t5]), delete e4[t5];
          }), this.instance.register({ [xe]: ee(ee({}, i4), e4) }), t4 && this.instance.reloadFeatureFlags();
        }
        resetGroupPropertiesForFlags(e4) {
          if (e4) {
            var t4 = this.instance.get_property(xe) || {};
            this.instance.register({ [xe]: ee(ee({}, t4), {}, { [e4]: {} }) });
          } else
            this.instance.unregister(xe);
        }
      };
      Math.trunc || (Math.trunc = function(e4) {
        return e4 < 0 ? Math.ceil(e4) : Math.floor(e4);
      }), Number.isInteger || (Number.isInteger = function(e4) {
        return V(e4) && isFinite(e4) && Math.floor(e4) === e4;
      });
      We = "0123456789abcdef";
      ze = class _ze {
        constructor(e4) {
          if (this.bytes = e4, 16 !== e4.length)
            throw new TypeError("not 128-bit length");
        }
        static fromFieldsV7(e4, t4, i4, s3) {
          if (!Number.isInteger(e4) || !Number.isInteger(t4) || !Number.isInteger(i4) || !Number.isInteger(s3) || e4 < 0 || t4 < 0 || i4 < 0 || s3 < 0 || e4 > 281474976710655 || t4 > 4095 || i4 > 1073741823 || s3 > 4294967295)
            throw new RangeError("invalid field value");
          var r4 = new Uint8Array(16);
          return r4[0] = e4 / Math.pow(2, 40), r4[1] = e4 / Math.pow(2, 32), r4[2] = e4 / Math.pow(2, 24), r4[3] = e4 / Math.pow(2, 16), r4[4] = e4 / Math.pow(2, 8), r4[5] = e4, r4[6] = 112 | t4 >>> 8, r4[7] = t4, r4[8] = 128 | i4 >>> 24, r4[9] = i4 >>> 16, r4[10] = i4 >>> 8, r4[11] = i4, r4[12] = s3 >>> 24, r4[13] = s3 >>> 16, r4[14] = s3 >>> 8, r4[15] = s3, new _ze(r4);
        }
        toString() {
          for (var e4 = "", t4 = 0; t4 < this.bytes.length; t4++)
            e4 = e4 + We.charAt(this.bytes[t4] >>> 4) + We.charAt(15 & this.bytes[t4]), 3 !== t4 && 5 !== t4 && 7 !== t4 && 9 !== t4 || (e4 += "-");
          if (36 !== e4.length)
            throw new Error("Invalid UUIDv7 was generated");
          return e4;
        }
        clone() {
          return new _ze(this.bytes.slice(0));
        }
        equals(e4) {
          return 0 === this.compareTo(e4);
        }
        compareTo(e4) {
          for (var t4 = 0; t4 < 16; t4++) {
            var i4 = this.bytes[t4] - e4.bytes[t4];
            if (0 !== i4)
              return Math.sign(i4);
          }
          return 0;
        }
      };
      je = class {
        constructor() {
          te(this, "timestamp", 0), te(this, "counter", 0), te(this, "random", new Qe());
        }
        generate() {
          var e4 = this.generateOrAbort();
          if (H(e4)) {
            this.timestamp = 0;
            var t4 = this.generateOrAbort();
            if (H(t4))
              throw new Error("Could not generate UUID after timestamp reset");
            return t4;
          }
          return e4;
        }
        generateOrAbort() {
          var e4 = Date.now();
          if (e4 > this.timestamp)
            this.timestamp = e4, this.resetCounter();
          else {
            if (!(e4 + 1e4 > this.timestamp))
              return;
            this.counter++, this.counter > 4398046511103 && (this.timestamp++, this.resetCounter());
          }
          return ze.fromFieldsV7(this.timestamp, Math.trunc(this.counter / Math.pow(2, 30)), this.counter & Math.pow(2, 30) - 1, this.random.nextUint32());
        }
        resetCounter() {
          this.counter = 1024 * this.random.nextUint32() + (1023 & this.random.nextUint32());
        }
      };
      Ge = (e4) => {
        if ("undefined" != typeof UUIDV7_DENY_WEAK_RNG && UUIDV7_DENY_WEAK_RNG)
          throw new Error("no cryptographically strong RNG available");
        for (var t4 = 0; t4 < e4.length; t4++)
          e4[t4] = 65536 * Math.trunc(65536 * Math.random()) + Math.trunc(65536 * Math.random());
        return e4;
      };
      e2 && !H(e2.crypto) && crypto.getRandomValues && (Ge = (e4) => crypto.getRandomValues(e4));
      Qe = class {
        constructor() {
          te(this, "buffer", new Uint32Array(8)), te(this, "cursor", 1 / 0);
        }
        nextUint32() {
          return this.cursor >= this.buffer.length && (Ge(this.buffer), this.cursor = 0), this.buffer[this.cursor++];
        }
      };
      Je = () => Ye().toString();
      Ye = () => (Ve || (Ve = new je())).generate();
      Xe = "Thu, 01 Jan 1970 00:00:00 GMT";
      Ke = "";
      Ze = /[a-z0-9][a-z0-9-]+\.[a-z]{2,}$/i;
      tt = { is_supported: () => !!o2, error: function(e4) {
        X.error("cookieStore error: " + e4);
      }, get: function(e4) {
        if (o2) {
          try {
            for (var t4 = e4 + "=", i4 = o2.cookie.split(";").filter((e5) => e5.length), s3 = 0; s3 < i4.length; s3++) {
              for (var r4 = i4[s3]; " " == r4.charAt(0); )
                r4 = r4.substring(1, r4.length);
              if (0 === r4.indexOf(t4))
                return decodeURIComponent(r4.substring(t4.length, r4.length));
            }
          } catch (e5) {
          }
          return null;
        }
      }, parse: function(e4) {
        var t4;
        try {
          t4 = JSON.parse(tt.get(e4)) || {};
        } catch (e5) {
        }
        return t4;
      }, set: function(e4, t4, i4, s3, r4) {
        if (o2)
          try {
            var n3 = "", a3 = "", l3 = et(o2.location.hostname, s3);
            if (i4) {
              var u3 = /* @__PURE__ */ new Date();
              u3.setTime(u3.getTime() + 24 * i4 * 60 * 60 * 1e3), n3 = "; expires=" + u3.toUTCString();
            }
            r4 && (a3 = "; secure");
            var c3 = e4 + "=" + encodeURIComponent(JSON.stringify(t4)) + n3 + "; SameSite=Lax; path=/" + l3 + a3;
            return c3.length > 3686.4 && X.warn("cookieStore warning: large cookie, len=" + c3.length), o2.cookie = c3, c3;
          } catch (e5) {
            return;
          }
      }, remove: function(e4, t4) {
        try {
          tt.set(e4, "", -1, t4);
        } catch (e5) {
          return;
        }
      } };
      it = null;
      st = { is_supported: function() {
        if (!z(it))
          return it;
        var t4 = true;
        if (H(e2))
          t4 = false;
        else
          try {
            var i4 = "__mplssupport__";
            st.set(i4, "xyz"), '"xyz"' !== st.get(i4) && (t4 = false), st.remove(i4);
          } catch (e4) {
            t4 = false;
          }
        return t4 || X.error("localStorage unsupported; falling back to cookie store"), it = t4, t4;
      }, error: function(e4) {
        X.error("localStorage error: " + e4);
      }, get: function(t4) {
        try {
          return null == e2 ? void 0 : e2.localStorage.getItem(t4);
        } catch (e4) {
          st.error(e4);
        }
        return null;
      }, parse: function(e4) {
        try {
          return JSON.parse(st.get(e4)) || {};
        } catch (e5) {
        }
        return null;
      }, set: function(t4, i4) {
        try {
          null == e2 || e2.localStorage.setItem(t4, JSON.stringify(i4));
        } catch (e4) {
          st.error(e4);
        }
      }, remove: function(t4) {
        try {
          null == e2 || e2.localStorage.removeItem(t4);
        } catch (e4) {
          st.error(e4);
        }
      } };
      rt = ["distinct_id", me, be, Oe];
      nt = ee(ee({}, st), {}, { parse: function(e4) {
        try {
          var t4 = {};
          try {
            t4 = tt.parse(e4) || {};
          } catch (e5) {
          }
          var i4 = m(t4, JSON.parse(st.get(e4) || "{}"));
          return st.set(e4, i4), i4;
        } catch (e5) {
        }
        return null;
      }, set: function(e4, t4, i4, s3, r4, n3) {
        try {
          st.set(e4, t4, void 0, void 0, n3);
          var o4 = {};
          rt.forEach((e5) => {
            t4[e5] && (o4[e5] = t4[e5]);
          }), Object.keys(o4).length && tt.set(e4, o4, i4, s3, r4, n3);
        } catch (e5) {
          st.error(e5);
        }
      }, remove: function(t4, i4) {
        try {
          null == e2 || e2.localStorage.removeItem(t4), tt.remove(t4, i4);
        } catch (e4) {
          st.error(e4);
        }
      } });
      ot = {};
      at = { is_supported: function() {
        return true;
      }, error: function(e4) {
        X.error("memoryStorage error: " + e4);
      }, get: function(e4) {
        return ot[e4] || null;
      }, parse: function(e4) {
        return ot[e4] || null;
      }, set: function(e4, t4) {
        ot[e4] = t4;
      }, remove: function(e4) {
        delete ot[e4];
      } };
      lt = null;
      ut = { is_supported: function() {
        if (!z(lt))
          return lt;
        if (lt = true, H(e2))
          lt = false;
        else
          try {
            var t4 = "__support__";
            ut.set(t4, "xyz"), '"xyz"' !== ut.get(t4) && (lt = false), ut.remove(t4);
          } catch (e4) {
            lt = false;
          }
        return lt;
      }, error: function(e4) {
        X.error("sessionStorage error: ", e4);
      }, get: function(t4) {
        try {
          return null == e2 ? void 0 : e2.sessionStorage.getItem(t4);
        } catch (e4) {
          ut.error(e4);
        }
        return null;
      }, parse: function(e4) {
        try {
          return JSON.parse(ut.get(e4)) || null;
        } catch (e5) {
        }
        return null;
      }, set: function(t4, i4) {
        try {
          null == e2 || e2.sessionStorage.setItem(t4, JSON.stringify(i4));
        } catch (e4) {
          ut.error(e4);
        }
      }, remove: function(t4) {
        try {
          null == e2 || e2.sessionStorage.removeItem(t4);
        } catch (e4) {
          ut.error(e4);
        }
      } };
      ct = ["localhost", "127.0.0.1"];
      dt = (e4) => {
        var t4 = null == o2 ? void 0 : o2.createElement("a");
        return H(t4) ? null : (t4.href = e4, t4);
      };
      ht = function(e4, t4) {
        return !!function(e5) {
          try {
            new RegExp(e5);
          } catch (e6) {
            return false;
          }
          return true;
        }(t4) && new RegExp(t4).test(e4);
      };
      _t = function(e4) {
        var t4, i4, s3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "&", r4 = [];
        return f(e4, function(e5, s4) {
          H(e5) || H(s4) || "undefined" === s4 || (t4 = encodeURIComponent(((e6) => e6 instanceof File)(e5) ? e5.name : e5.toString()), i4 = encodeURIComponent(s4), r4[r4.length] = i4 + "=" + t4);
        }), r4.join(s3);
      };
      pt = function(e4, t4) {
        for (var i4, s3 = ((e4.split("#")[0] || "").split("?")[1] || "").split("&"), r4 = 0; r4 < s3.length; r4++) {
          var n3 = s3[r4].split("=");
          if (n3[0] === t4) {
            i4 = n3;
            break;
          }
        }
        if (!D(i4) || i4.length < 2)
          return "";
        var o4 = i4[1];
        try {
          o4 = decodeURIComponent(o4);
        } catch (e5) {
          X.error("Skipping decoding for malformed query param: " + o4);
        }
        return o4.replace(/\+/g, " ");
      };
      vt = function(e4, t4) {
        var i4 = e4.match(new RegExp(t4 + "=([^&]*)"));
        return i4 ? i4[1] : null;
      };
      gt = "Mobile";
      ft = "iOS";
      mt = "Android";
      bt = "Tablet";
      yt = mt + " " + bt;
      wt = "iPad";
      St = "Apple";
      Et = St + " Watch";
      kt = "Safari";
      xt = "BlackBerry";
      It = "Samsung";
      Pt = It + "Browser";
      Ft = It + " Internet";
      Rt = "Chrome";
      Ct = Rt + " OS";
      Tt = Rt + " " + ft;
      $t = "Internet Explorer";
      Mt = $t + " " + gt;
      At = "Opera";
      Ot = At + " Mini";
      Lt = "Edge";
      Dt = "Microsoft " + Lt;
      Nt = "Firefox";
      qt = Nt + " " + ft;
      Bt = "Nintendo";
      Ht = "PlayStation";
      Ut = "Xbox";
      Wt = mt + " " + gt;
      zt = gt + " " + kt;
      jt = "Windows";
      Vt = jt + " Phone";
      Gt = "Nokia";
      Qt = "Ouya";
      Jt = "Generic";
      Yt = Jt + " " + gt.toLowerCase();
      Xt = Jt + " " + bt.toLowerCase();
      Kt = "Konqueror";
      Zt = "(\\d+(\\.\\d+)?)";
      ei = new RegExp("Version/" + Zt);
      ti = new RegExp(Ut, "i");
      ii = new RegExp(Ht + " \\w+", "i");
      si = new RegExp(Bt + " \\w+", "i");
      ri = new RegExp(xt + "|PlayBook|BB10", "i");
      ni = { "NT3.51": "NT 3.11", "NT4.0": "NT 4.0", "5.0": "2000", 5.1: "XP", 5.2: "XP", "6.0": "Vista", 6.1: "7", 6.2: "8", 6.3: "8.1", 6.4: "10", "10.0": "10" };
      oi = (e4, t4) => t4 && b(t4, St) || function(e5) {
        return b(e5, kt) && !b(e5, Rt) && !b(e5, mt);
      }(e4);
      ai = function(e4, t4) {
        return t4 = t4 || "", b(e4, " OPR/") && b(e4, "Mini") ? Ot : b(e4, " OPR/") ? At : ri.test(e4) ? xt : b(e4, "IE" + gt) || b(e4, "WPDesktop") ? Mt : b(e4, Pt) ? Ft : b(e4, Lt) || b(e4, "Edg/") ? Dt : b(e4, "FBIOS") ? "Facebook " + gt : b(e4, "UCWEB") || b(e4, "UCBrowser") ? "UC Browser" : b(e4, "CriOS") ? Tt : b(e4, "CrMo") ? Rt : b(e4, mt) && b(e4, kt) ? Wt : b(e4, Rt) ? Rt : b(e4, "FxiOS") ? qt : b(e4.toLowerCase(), Kt.toLowerCase()) ? Kt : oi(e4, t4) ? b(e4, gt) ? zt : kt : b(e4, Nt) ? Nt : b(e4, "MSIE") || b(e4, "Trident/") ? $t : b(e4, "Gecko") ? Nt : "";
      };
      li = { [Mt]: [new RegExp("rv:" + Zt)], [Dt]: [new RegExp(Lt + "?\\/" + Zt)], [Rt]: [new RegExp("(" + Rt + "|CrMo)\\/" + Zt)], [Tt]: [new RegExp("CriOS\\/" + Zt)], "UC Browser": [new RegExp("(UCBrowser|UCWEB)\\/" + Zt)], [kt]: [ei], [zt]: [ei], [At]: [new RegExp("(Opera|OPR)\\/" + Zt)], [Nt]: [new RegExp(Nt + "\\/" + Zt)], [qt]: [new RegExp("FxiOS\\/" + Zt)], [Kt]: [new RegExp("Konqueror[:/]?" + Zt, "i")], [xt]: [new RegExp(xt + " " + Zt), ei], [Wt]: [new RegExp("android\\s" + Zt, "i")], [Ft]: [new RegExp(Pt + "\\/" + Zt)], [$t]: [new RegExp("(rv:|MSIE )" + Zt)], Mozilla: [new RegExp("rv:" + Zt)] };
      ui = [[new RegExp(Ut + "; " + Ut + " (.*?)[);]", "i"), (e4) => [Ut, e4 && e4[1] || ""]], [new RegExp(Bt, "i"), [Bt, ""]], [new RegExp(Ht, "i"), [Ht, ""]], [ri, [xt, ""]], [new RegExp(jt, "i"), (e4, t4) => {
        if (/Phone/.test(t4) || /WPDesktop/.test(t4))
          return [Vt, ""];
        if (new RegExp(gt).test(t4) && !/IEMobile\b/.test(t4))
          return [jt + " " + gt, ""];
        var i4 = /Windows NT ([0-9.]+)/i.exec(t4);
        if (i4 && i4[1]) {
          var s3 = i4[1], r4 = ni[s3] || "";
          return /arm/i.test(t4) && (r4 = "RT"), [jt, r4];
        }
        return [jt, ""];
      }], [/((iPhone|iPad|iPod).*?OS (\d+)_(\d+)_?(\d+)?|iPhone)/, (e4) => {
        if (e4 && e4[3]) {
          var t4 = [e4[3], e4[4], e4[5] || "0"];
          return [ft, t4.join(".")];
        }
        return [ft, ""];
      }], [/(watch.*\/(\d+\.\d+\.\d+)|watch os,(\d+\.\d+),)/i, (e4) => {
        var t4 = "";
        return e4 && e4.length >= 3 && (t4 = H(e4[2]) ? e4[3] : e4[2]), ["watchOS", t4];
      }], [new RegExp("(" + mt + " (\\d+)\\.(\\d+)\\.?(\\d+)?|" + mt + ")", "i"), (e4) => {
        if (e4 && e4[2]) {
          var t4 = [e4[2], e4[3], e4[4] || "0"];
          return [mt, t4.join(".")];
        }
        return [mt, ""];
      }], [/Mac OS X (\d+)[_.](\d+)[_.]?(\d+)?/i, (e4) => {
        var t4 = ["Mac OS X", ""];
        if (e4 && e4[1]) {
          var i4 = [e4[1], e4[2], e4[3] || "0"];
          t4[1] = i4.join(".");
        }
        return t4;
      }], [/Mac/i, ["Mac OS X", ""]], [/CrOS/, [Ct, ""]], [/Linux|debian/i, ["Linux", ""]]];
      ci = function(e4) {
        return si.test(e4) ? Bt : ii.test(e4) ? Ht : ti.test(e4) ? Ut : new RegExp(Qt, "i").test(e4) ? Qt : new RegExp("(" + Vt + "|WPDesktop)", "i").test(e4) ? Vt : /iPad/.test(e4) ? wt : /iPod/.test(e4) ? "iPod Touch" : /iPhone/.test(e4) ? "iPhone" : /(watch)(?: ?os[,/]|\d,\d\/)[\d.]+/i.test(e4) ? Et : ri.test(e4) ? xt : /(kobo)\s(ereader|touch)/i.test(e4) ? "Kobo" : new RegExp(Gt, "i").test(e4) ? Gt : /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i.test(e4) || /(kf[a-z]+)( bui|\)).+silk\//i.test(e4) ? "Kindle Fire" : /(Android|ZTE)/i.test(e4) ? !new RegExp(gt).test(e4) || /(9138B|TB782B|Nexus [97]|pixel c|HUAWEISHT|BTV|noble nook|smart ultra 6)/i.test(e4) ? /pixel[\daxl ]{1,6}/i.test(e4) && !/pixel c/i.test(e4) || /(huaweimed-al00|tah-|APA|SM-G92|i980|zte|U304AA)/i.test(e4) || /lmy47v/i.test(e4) && !/QTAQZ3/i.test(e4) ? mt : yt : mt : new RegExp("(pda|" + gt + ")", "i").test(e4) ? Yt : new RegExp(bt, "i").test(e4) && !new RegExp(bt + " pc", "i").test(e4) ? Xt : "";
      };
      di = "https?://(.*)";
      hi = ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid", "gad_source", "gclsrc", "dclid", "gbraid", "wbraid", "fbclid", "msclkid", "twclid", "li_fat_id", "mc_cid", "igshid", "ttclid", "rdt_cid"];
      _i = { campaignParams: function(e4) {
        return o2 ? this._campaignParamsFromUrl(o2.URL, e4) : {};
      }, _campaignParamsFromUrl: function(e4, t4) {
        var i4 = hi.concat(t4 || []), s3 = {};
        return f(i4, function(t5) {
          var i5 = pt(e4, t5);
          s3[t5] = i5 || null;
        }), s3;
      }, _searchEngine: function(e4) {
        return e4 ? 0 === e4.search(di + "google.([^/?]*)") ? "google" : 0 === e4.search(di + "bing.com") ? "bing" : 0 === e4.search(di + "yahoo.com") ? "yahoo" : 0 === e4.search(di + "duckduckgo.com") ? "duckduckgo" : null : null;
      }, _searchInfoFromReferrer: function(e4) {
        var t4 = _i._searchEngine(e4), i4 = "yahoo" != t4 ? "q" : "p", s3 = {};
        if (!z(t4)) {
          s3.$search_engine = t4;
          var r4 = o2 ? pt(o2.referrer, i4) : "";
          r4.length && (s3.ph_keyword = r4);
        }
        return s3;
      }, searchInfo: function() {
        var e4 = null == o2 ? void 0 : o2.referrer;
        return e4 ? this._searchInfoFromReferrer(e4) : {};
      }, browser: ai, browserVersion: function(e4, t4) {
        var i4 = ai(e4, t4), s3 = li[i4];
        if (H(s3))
          return null;
        for (var r4 = 0; r4 < s3.length; r4++) {
          var n3 = s3[r4], o4 = e4.match(n3);
          if (o4)
            return parseFloat(o4[o4.length - 2]);
        }
        return null;
      }, browserLanguage: function() {
        return navigator.language || navigator.userLanguage;
      }, os: function(e4) {
        for (var t4 = 0; t4 < ui.length; t4++) {
          var [i4, s3] = ui[t4], r4 = i4.exec(e4), n3 = r4 && (N(s3) ? s3(r4, e4) : s3);
          if (n3)
            return n3;
        }
        return ["", ""];
      }, device: ci, deviceType: function(e4) {
        var t4 = ci(e4);
        return t4 === wt || t4 === yt || "Kobo" === t4 || "Kindle Fire" === t4 || t4 === Xt ? bt : t4 === Bt || t4 === Ut || t4 === Ht || t4 === Qt ? "Console" : t4 === Et ? "Wearable" : t4 ? gt : "Desktop";
      }, referrer: function() {
        return (null == o2 ? void 0 : o2.referrer) || "$direct";
      }, referringDomain: function() {
        var e4;
        return null != o2 && o2.referrer && (null === (e4 = dt(o2.referrer)) || void 0 === e4 ? void 0 : e4.host) || "$direct";
      }, referrerInfo: function() {
        return { $referrer: this.referrer(), $referring_domain: this.referringDomain() };
      }, initialPersonInfo: function() {
        return { r: this.referrer(), u: null == a ? void 0 : a.href };
      }, initialPersonPropsFromInfo: function(e4) {
        var t4, { r: i4, u: s3 } = e4, r4 = { $initial_referrer: i4, $initial_referring_domain: null == i4 ? void 0 : "$direct" == i4 ? "$direct" : null === (t4 = dt(i4)) || void 0 === t4 ? void 0 : t4.host };
        if (s3) {
          r4.$initial_current_url = s3;
          var n3 = dt(s3);
          r4.$initial_host = null == n3 ? void 0 : n3.host, r4.$initial_pathname = null == n3 ? void 0 : n3.pathname, f(this._campaignParamsFromUrl(s3), function(e5, t5) {
            r4["$initial_" + k(t5)] = e5;
          });
        }
        i4 && f(this._searchInfoFromReferrer(i4), function(e5, t5) {
          r4["$initial_" + k(t5)] = e5;
        });
        return r4;
      }, timezone: function() {
        try {
          return Intl.DateTimeFormat().resolvedOptions().timeZone;
        } catch (e4) {
          return;
        }
      }, properties: function() {
        if (!d)
          return {};
        var [t4, i4] = _i.os(d);
        return m(E({ $os: t4, $os_version: i4, $browser: _i.browser(d, navigator.vendor), $device: _i.device(d), $device_type: _i.deviceType(d), $timezone: _i.timezone() }), { $current_url: null == a ? void 0 : a.href, $host: null == a ? void 0 : a.host, $pathname: null == a ? void 0 : a.pathname, $raw_user_agent: d.length > 1e3 ? d.substring(0, 997) + "..." : d, $browser_version: _i.browserVersion(d, navigator.vendor), $browser_language: _i.browserLanguage(), $screen_height: null == e2 ? void 0 : e2.screen.height, $screen_width: null == e2 ? void 0 : e2.screen.width, $viewport_height: null == e2 ? void 0 : e2.innerHeight, $viewport_width: null == e2 ? void 0 : e2.innerWidth, $lib: "web", $lib_version: _.LIB_VERSION, $insert_id: Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10), $time: Date.now() / 1e3 });
      }, people_properties: function() {
        if (!d)
          return {};
        var [e4, t4] = _i.os(d);
        return m(E({ $os: e4, $os_version: t4, $browser: _i.browser(d, navigator.vendor) }), { $browser_version: _i.browserVersion(d, navigator.vendor) });
      } };
      pi = ["cookie", "localstorage", "localstorage+cookie", "sessionstorage", "memory"];
      vi = class {
        constructor(e4) {
          this.config = e4, this.props = {}, this.campaign_params_saved = false, this.name = ((e5) => {
            var t4 = "";
            return e5.token && (t4 = e5.token.replace(/\+/g, "PL").replace(/\//g, "SL").replace(/=/g, "EQ")), e5.persistence_name ? "ph_" + e5.persistence_name : "ph_" + t4 + "_posthog";
          })(e4), this.storage = this.buildStorage(e4), this.load(), e4.debug && X.info("Persistence loaded", e4.persistence, ee({}, this.props)), this.update_config(e4, e4), this.save();
        }
        buildStorage(e4) {
          -1 === pi.indexOf(e4.persistence.toLowerCase()) && (X.critical("Unknown persistence type " + e4.persistence + "; falling back to localStorage+cookie"), e4.persistence = "localStorage+cookie");
          var t4 = e4.persistence.toLowerCase();
          return "localstorage" === t4 && st.is_supported() ? st : "localstorage+cookie" === t4 && nt.is_supported() ? nt : "sessionstorage" === t4 && ut.is_supported() ? ut : "memory" === t4 ? at : "cookie" === t4 ? tt : nt.is_supported() ? nt : tt;
        }
        properties() {
          var e4 = {};
          return f(this.props, function(t4, i4) {
            if (i4 === Se && q(t4))
              for (var s3 = Object.keys(t4), n3 = 0; n3 < s3.length; n3++)
                e4["$feature/".concat(s3[n3])] = t4[s3[n3]];
            else
              a3 = i4, l3 = false, (z(o4 = De) ? l3 : r2 && o4.indexOf === r2 ? -1 != o4.indexOf(a3) : (f(o4, function(e5) {
                if (l3 || (l3 = e5 === a3))
                  return p;
              }), l3)) || (e4[i4] = t4);
            var o4, a3, l3;
          }), e4;
        }
        load() {
          if (!this.disabled) {
            var e4 = this.storage.parse(this.name);
            e4 && (this.props = m({}, e4));
          }
        }
        save() {
          this.disabled || this.storage.set(this.name, this.props, this.expire_days, this.cross_subdomain, this.secure, this.config.debug);
        }
        remove() {
          this.storage.remove(this.name, false), this.storage.remove(this.name, true);
        }
        clear() {
          this.remove(), this.props = {};
        }
        register_once(e4, t4, i4) {
          if (q(e4)) {
            H(t4) && (t4 = "None"), this.expire_days = H(i4) ? this.default_expiry : i4;
            var s3 = false;
            if (f(e4, (e5, i5) => {
              this.props.hasOwnProperty(i5) && this.props[i5] !== t4 || (this.props[i5] = e5, s3 = true);
            }), s3)
              return this.save(), true;
          }
          return false;
        }
        register(e4, t4) {
          if (q(e4)) {
            this.expire_days = H(t4) ? this.default_expiry : t4;
            var i4 = false;
            if (f(e4, (t5, s3) => {
              e4.hasOwnProperty(s3) && this.props[s3] !== t5 && (this.props[s3] = t5, i4 = true);
            }), i4)
              return this.save(), true;
          }
          return false;
        }
        unregister(e4) {
          e4 in this.props && (delete this.props[e4], this.save());
        }
        update_campaign_params() {
          if (!this.campaign_params_saved) {
            var e4 = _i.campaignParams(this.config.custom_campaign_params);
            B(E(e4)) || this.register(e4), this.campaign_params_saved = true;
          }
        }
        update_search_keyword() {
          this.register(_i.searchInfo());
        }
        update_referrer_info() {
          this.register_once(_i.referrerInfo(), void 0);
        }
        set_initial_person_info() {
          this.props[$e] || this.props[Me] || this.register_once({ [Ae]: _i.initialPersonInfo() }, void 0);
        }
        get_referrer_info() {
          return E({ $referrer: this.props.$referrer, $referring_domain: this.props.$referring_domain });
        }
        get_initial_props() {
          var e4 = {};
          f([Me, $e], (t5) => {
            var i5 = this.props[t5];
            i5 && f(i5, function(t6, i6) {
              e4["$initial_" + k(i6)] = t6;
            });
          });
          var t4 = this.props[Ae];
          if (t4) {
            var i4 = _i.initialPersonPropsFromInfo(t4);
            m(e4, i4);
          }
          return e4;
        }
        safe_merge(e4) {
          return f(this.props, function(t4, i4) {
            i4 in e4 || (e4[i4] = t4);
          }), e4;
        }
        update_config(e4, t4) {
          if (this.default_expiry = this.expire_days = e4.cookie_expiration, this.set_disabled(e4.disable_persistence), this.set_cross_subdomain(e4.cross_subdomain_cookie), this.set_secure(e4.secure_cookie), e4.persistence !== t4.persistence) {
            var i4 = this.buildStorage(e4), s3 = this.props;
            this.clear(), this.storage = i4, this.props = s3, this.save();
          }
        }
        set_disabled(e4) {
          this.disabled = e4, this.disabled ? this.remove() : this.save();
        }
        set_cross_subdomain(e4) {
          e4 !== this.cross_subdomain && (this.cross_subdomain = e4, this.remove(), this.save());
        }
        get_cross_subdomain() {
          return !!this.cross_subdomain;
        }
        set_secure(e4) {
          e4 !== this.secure && (this.secure = e4, this.remove(), this.save());
        }
        set_event_timer(e4, t4) {
          var i4 = this.props[ne] || {};
          i4[e4] = t4, this.props[ne] = i4, this.save();
        }
        remove_event_timer(e4) {
          var t4 = (this.props[ne] || {})[e4];
          return H(t4) || (delete this.props[ne][e4], this.save()), t4;
        }
        get_property(e4) {
          return this.props[e4];
        }
        set_property(e4, t4) {
          this.props[e4] = t4, this.save();
        }
      };
      mi = ((e4) => (e4[e4.DomContentLoaded = 0] = "DomContentLoaded", e4[e4.Load = 1] = "Load", e4[e4.FullSnapshot = 2] = "FullSnapshot", e4[e4.IncrementalSnapshot = 3] = "IncrementalSnapshot", e4[e4.Meta = 4] = "Meta", e4[e4.Custom = 5] = "Custom", e4[e4.Plugin = 6] = "Plugin", e4))(mi || {});
      bi = ((e4) => (e4[e4.Mutation = 0] = "Mutation", e4[e4.MouseMove = 1] = "MouseMove", e4[e4.MouseInteraction = 2] = "MouseInteraction", e4[e4.Scroll = 3] = "Scroll", e4[e4.ViewportResize = 4] = "ViewportResize", e4[e4.Input = 5] = "Input", e4[e4.TouchMove = 6] = "TouchMove", e4[e4.MediaInteraction = 7] = "MediaInteraction", e4[e4.StyleSheetRule = 8] = "StyleSheetRule", e4[e4.CanvasMutation = 9] = "CanvasMutation", e4[e4.Font = 10] = "Font", e4[e4.Log = 11] = "Log", e4[e4.Drag = 12] = "Drag", e4[e4.StyleDeclaration = 13] = "StyleDeclaration", e4[e4.Selection = 14] = "Selection", e4[e4.AdoptedStyleSheet = 15] = "AdoptedStyleSheet", e4[e4.CustomElement = 16] = "CustomElement", e4))(bi || {});
      Ti = ["a", "button", "form", "input", "select", "textarea", "label"];
      Li = "(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11})";
      Di = new RegExp("^(?:".concat(Li, ")$"));
      Ni = new RegExp(Li);
      qi = "\\d{3}-?\\d{2}-?\\d{4}";
      Bi = new RegExp("^(".concat(qi, ")$"));
      Hi = new RegExp("(".concat(qi, ")"));
      Qi = "[SessionRecording]";
      Ji = "redacted";
      Yi = { initiatorTypes: ["audio", "beacon", "body", "css", "early-hint", "embed", "fetch", "frame", "iframe", "icon", "image", "img", "input", "link", "navigation", "object", "ping", "script", "track", "video", "xmlhttprequest"], maskRequestFn: (e4) => e4, recordHeaders: false, recordBody: false, recordInitialRequests: false, recordPerformance: false, performanceEntryTypeToObserve: ["first-input", "navigation", "paint", "resource"], payloadSizeLimitBytes: 1e6, payloadHostDenyList: [".lr-ingest.io", ".ingest.sentry.io"] };
      Xi = ["authorization", "x-forwarded-for", "authorization", "cookie", "set-cookie", "x-api-key", "x-real-ip", "remote-addr", "forwarded", "proxy-authorization", "x-csrf-token", "x-csrftoken", "x-xsrf-token"];
      Ki = ["password", "secret", "passwd", "api_key", "apikey", "auth", "credentials", "mysql_pwd", "privatekey", "private_key", "token"];
      Zi = ["/s/", "/e/", "/i/"];
      is = (e4, t4) => {
        var i4, s3, r4, n3 = { payloadSizeLimitBytes: Yi.payloadSizeLimitBytes, performanceEntryTypeToObserve: [...Yi.performanceEntryTypeToObserve], payloadHostDenyList: [...t4.payloadHostDenyList || [], ...Yi.payloadHostDenyList] }, o4 = false !== e4.session_recording.recordHeaders && t4.recordHeaders, a3 = false !== e4.session_recording.recordBody && t4.recordBody, l3 = false !== e4.capture_performance && t4.recordPerformance, u3 = (i4 = n3, r4 = Math.min(1e6, null !== (s3 = i4.payloadSizeLimitBytes) && void 0 !== s3 ? s3 : 1e6), (e5) => (null != e5 && e5.requestBody && (e5.requestBody = es(e5.requestBody, e5.requestHeaders, r4, "Request")), null != e5 && e5.responseBody && (e5.responseBody = es(e5.responseBody, e5.responseHeaders, r4, "Response")), e5)), c3 = (t5) => {
          return u3(((e5, t6) => {
            var i6, s5 = dt(e5.name), r5 = 0 === t6.indexOf("http") ? null === (i6 = dt(t6)) || void 0 === i6 ? void 0 : i6.pathname : t6;
            "/" === r5 && (r5 = "");
            var n4 = null == s5 ? void 0 : s5.pathname.replace(r5 || "", "");
            if (!(s5 && n4 && Zi.some((e6) => 0 === n4.indexOf(e6))))
              return e5;
          })((s4 = (i5 = t5).requestHeaders, j(s4) || f(Object.keys(null != s4 ? s4 : {}), (e5) => {
            Xi.includes(e5.toLowerCase()) && (s4[e5] = Ji);
          }), i5), e4.api_host));
          var i5, s4;
        }, d3 = N(e4.session_recording.maskNetworkRequestFn);
        return d3 && N(e4.session_recording.maskCapturedNetworkRequestFn) && X.warn("Both `maskNetworkRequestFn` and `maskCapturedNetworkRequestFn` are defined. `maskNetworkRequestFn` will be ignored."), d3 && (e4.session_recording.maskCapturedNetworkRequestFn = (t5) => {
          var i5 = e4.session_recording.maskNetworkRequestFn({ url: t5.name });
          return ee(ee({}, t5), {}, { name: null == i5 ? void 0 : i5.url });
        }), n3.maskRequestFn = N(e4.session_recording.maskCapturedNetworkRequestFn) ? (t5) => {
          var i5, s4, r5, n4 = c3(t5);
          return n4 && null !== (i5 = null === (s4 = (r5 = e4.session_recording).maskCapturedNetworkRequestFn) || void 0 === s4 ? void 0 : s4.call(r5, n4)) && void 0 !== i5 ? i5 : void 0;
        } : (e5) => function(e6) {
          if (!H(e6))
            return e6.requestBody = ts(e6.requestBody, "Request"), e6.responseBody = ts(e6.responseBody, "Response"), e6;
        }(c3(e5)), ee(ee(ee({}, Yi), n3), {}, { recordHeaders: o4, recordBody: a3, recordPerformance: l3, recordInitialRequests: l3 });
      };
      rs = class {
        constructor(e4) {
          var t4, i4, s3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          te(this, "bucketSize", 100), te(this, "refillRate", 10), te(this, "mutationBuckets", {}), te(this, "loggedTracker", {}), te(this, "refillBuckets", () => {
            Object.keys(this.mutationBuckets).forEach((e5) => {
              this.mutationBuckets[e5] = this.mutationBuckets[e5] + this.refillRate, this.mutationBuckets[e5] >= this.bucketSize && delete this.mutationBuckets[e5];
            });
          }), te(this, "getNodeOrRelevantParent", (e5) => {
            var t5 = this.rrweb.mirror.getNode(e5);
            if ("svg" !== (null == t5 ? void 0 : t5.nodeName) && t5 instanceof Element) {
              var i5 = t5.closest("svg");
              if (i5)
                return [this.rrweb.mirror.getId(i5), i5];
            }
            return [e5, t5];
          }), te(this, "numberOfChanges", (e5) => {
            var t5, i5, s4, r4, n3, o4, a3, l3;
            return (null !== (t5 = null === (i5 = e5.removes) || void 0 === i5 ? void 0 : i5.length) && void 0 !== t5 ? t5 : 0) + (null !== (s4 = null === (r4 = e5.attributes) || void 0 === r4 ? void 0 : r4.length) && void 0 !== s4 ? s4 : 0) + (null !== (n3 = null === (o4 = e5.texts) || void 0 === o4 ? void 0 : o4.length) && void 0 !== n3 ? n3 : 0) + (null !== (a3 = null === (l3 = e5.adds) || void 0 === l3 ? void 0 : l3.length) && void 0 !== a3 ? a3 : 0);
          }), te(this, "throttleMutations", (e5) => {
            if (3 !== e5.type || 0 !== e5.data.source)
              return e5;
            var t5 = e5.data, i5 = this.numberOfChanges(t5);
            t5.attributes && (t5.attributes = t5.attributes.filter((e6) => {
              var t6, i6, s5, [r4, n3] = this.getNodeOrRelevantParent(e6.id);
              if (0 === this.mutationBuckets[r4])
                return false;
              (this.mutationBuckets[r4] = null !== (t6 = this.mutationBuckets[r4]) && void 0 !== t6 ? t6 : this.bucketSize, this.mutationBuckets[r4] = Math.max(this.mutationBuckets[r4] - 1, 0), 0 === this.mutationBuckets[r4]) && (this.loggedTracker[r4] || (this.loggedTracker[r4] = true, null === (i6 = (s5 = this.options).onBlockedNode) || void 0 === i6 || i6.call(s5, r4, n3)));
              return e6;
            }));
            var s4 = this.numberOfChanges(t5);
            return 0 !== s4 || i5 === s4 ? e5 : void 0;
          }), this.rrweb = e4, this.options = s3, this.refillRate = ss(null !== (t4 = this.options.refillRate) && void 0 !== t4 ? t4 : this.refillRate, 0, 100, "mutation throttling refill rate"), this.bucketSize = ss(null !== (i4 = this.options.bucketSize) && void 0 !== i4 ? i4 : this.bucketSize, 0, 100, "mutation throttling bucket size"), setInterval(() => {
            this.refillBuckets();
          }, 1e3);
        }
      };
      ns = Uint8Array;
      os = Uint16Array;
      as = Uint32Array;
      ls = new ns([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);
      us = new ns([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);
      cs = new ns([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
      ds = function(e4, t4) {
        for (var i4 = new os(31), s3 = 0; s3 < 31; ++s3)
          i4[s3] = t4 += 1 << e4[s3 - 1];
        var r4 = new as(i4[30]);
        for (s3 = 1; s3 < 30; ++s3)
          for (var n3 = i4[s3]; n3 < i4[s3 + 1]; ++n3)
            r4[n3] = n3 - i4[s3] << 5 | s3;
        return [i4, r4];
      };
      hs = ds(ls, 2);
      _s = hs[0];
      ps = hs[1];
      _s[28] = 258, ps[258] = 28;
      for (vs = ds(us, 0)[1], gs = new os(32768), fs = 0; fs < 32768; ++fs) {
        ms = (43690 & fs) >>> 1 | (21845 & fs) << 1;
        ms = (61680 & (ms = (52428 & ms) >>> 2 | (13107 & ms) << 2)) >>> 4 | (3855 & ms) << 4, gs[fs] = ((65280 & ms) >>> 8 | (255 & ms) << 8) >>> 1;
      }
      bs = function(e4, t4, i4) {
        for (var s3 = e4.length, r4 = 0, n3 = new os(t4); r4 < s3; ++r4)
          ++n3[e4[r4] - 1];
        var o4, a3 = new os(t4);
        for (r4 = 0; r4 < t4; ++r4)
          a3[r4] = a3[r4 - 1] + n3[r4 - 1] << 1;
        if (i4) {
          o4 = new os(1 << t4);
          var l3 = 15 - t4;
          for (r4 = 0; r4 < s3; ++r4)
            if (e4[r4])
              for (var u3 = r4 << 4 | e4[r4], c3 = t4 - e4[r4], d3 = a3[e4[r4] - 1]++ << c3, h3 = d3 | (1 << c3) - 1; d3 <= h3; ++d3)
                o4[gs[d3] >>> l3] = u3;
        } else
          for (o4 = new os(s3), r4 = 0; r4 < s3; ++r4)
            o4[r4] = gs[a3[e4[r4] - 1]++] >>> 15 - e4[r4];
        return o4;
      };
      ys = new ns(288);
      for (fs = 0; fs < 144; ++fs)
        ys[fs] = 8;
      for (fs = 144; fs < 256; ++fs)
        ys[fs] = 9;
      for (fs = 256; fs < 280; ++fs)
        ys[fs] = 7;
      for (fs = 280; fs < 288; ++fs)
        ys[fs] = 8;
      ws = new ns(32);
      for (fs = 0; fs < 32; ++fs)
        ws[fs] = 5;
      Ss = bs(ys, 9, 0);
      Es = bs(ws, 5, 0);
      ks = function(e4) {
        return (e4 / 8 >> 0) + (7 & e4 && 1);
      };
      xs = function(e4, t4, i4) {
        (null == i4 || i4 > e4.length) && (i4 = e4.length);
        var s3 = new (e4 instanceof os ? os : e4 instanceof as ? as : ns)(i4 - t4);
        return s3.set(e4.subarray(t4, i4)), s3;
      };
      Is = function(e4, t4, i4) {
        i4 <<= 7 & t4;
        var s3 = t4 / 8 >> 0;
        e4[s3] |= i4, e4[s3 + 1] |= i4 >>> 8;
      };
      Ps = function(e4, t4, i4) {
        i4 <<= 7 & t4;
        var s3 = t4 / 8 >> 0;
        e4[s3] |= i4, e4[s3 + 1] |= i4 >>> 8, e4[s3 + 2] |= i4 >>> 16;
      };
      Fs = function(e4, t4) {
        for (var i4 = [], s3 = 0; s3 < e4.length; ++s3)
          e4[s3] && i4.push({ s: s3, f: e4[s3] });
        var r4 = i4.length, n3 = i4.slice();
        if (!r4)
          return [new ns(0), 0];
        if (1 == r4) {
          var o4 = new ns(i4[0].s + 1);
          return o4[i4[0].s] = 1, [o4, 1];
        }
        i4.sort(function(e5, t5) {
          return e5.f - t5.f;
        }), i4.push({ s: -1, f: 25001 });
        var a3 = i4[0], l3 = i4[1], u3 = 0, c3 = 1, d3 = 2;
        for (i4[0] = { s: -1, f: a3.f + l3.f, l: a3, r: l3 }; c3 != r4 - 1; )
          a3 = i4[i4[u3].f < i4[d3].f ? u3++ : d3++], l3 = i4[u3 != c3 && i4[u3].f < i4[d3].f ? u3++ : d3++], i4[c3++] = { s: -1, f: a3.f + l3.f, l: a3, r: l3 };
        var h3 = n3[0].s;
        for (s3 = 1; s3 < r4; ++s3)
          n3[s3].s > h3 && (h3 = n3[s3].s);
        var _3 = new os(h3 + 1), p3 = Rs(i4[c3 - 1], _3, 0);
        if (p3 > t4) {
          s3 = 0;
          var v3 = 0, g3 = p3 - t4, f3 = 1 << g3;
          for (n3.sort(function(e5, t5) {
            return _3[t5.s] - _3[e5.s] || e5.f - t5.f;
          }); s3 < r4; ++s3) {
            var m3 = n3[s3].s;
            if (!(_3[m3] > t4))
              break;
            v3 += f3 - (1 << p3 - _3[m3]), _3[m3] = t4;
          }
          for (v3 >>>= g3; v3 > 0; ) {
            var b3 = n3[s3].s;
            _3[b3] < t4 ? v3 -= 1 << t4 - _3[b3]++ - 1 : ++s3;
          }
          for (; s3 >= 0 && v3; --s3) {
            var y3 = n3[s3].s;
            _3[y3] == t4 && (--_3[y3], ++v3);
          }
          p3 = t4;
        }
        return [new ns(_3), p3];
      };
      Rs = function(e4, t4, i4) {
        return -1 == e4.s ? Math.max(Rs(e4.l, t4, i4 + 1), Rs(e4.r, t4, i4 + 1)) : t4[e4.s] = i4;
      };
      Cs = function(e4) {
        for (var t4 = e4.length; t4 && !e4[--t4]; )
          ;
        for (var i4 = new os(++t4), s3 = 0, r4 = e4[0], n3 = 1, o4 = function(e5) {
          i4[s3++] = e5;
        }, a3 = 1; a3 <= t4; ++a3)
          if (e4[a3] == r4 && a3 != t4)
            ++n3;
          else {
            if (!r4 && n3 > 2) {
              for (; n3 > 138; n3 -= 138)
                o4(32754);
              n3 > 2 && (o4(n3 > 10 ? n3 - 11 << 5 | 28690 : n3 - 3 << 5 | 12305), n3 = 0);
            } else if (n3 > 3) {
              for (o4(r4), --n3; n3 > 6; n3 -= 6)
                o4(8304);
              n3 > 2 && (o4(n3 - 3 << 5 | 8208), n3 = 0);
            }
            for (; n3--; )
              o4(r4);
            n3 = 1, r4 = e4[a3];
          }
        return [i4.subarray(0, s3), t4];
      };
      Ts = function(e4, t4) {
        for (var i4 = 0, s3 = 0; s3 < t4.length; ++s3)
          i4 += e4[s3] * t4[s3];
        return i4;
      };
      $s = function(e4, t4, i4) {
        var s3 = i4.length, r4 = ks(t4 + 2);
        e4[r4] = 255 & s3, e4[r4 + 1] = s3 >>> 8, e4[r4 + 2] = 255 ^ e4[r4], e4[r4 + 3] = 255 ^ e4[r4 + 1];
        for (var n3 = 0; n3 < s3; ++n3)
          e4[r4 + n3 + 4] = i4[n3];
        return 8 * (r4 + 4 + s3);
      };
      Ms = function(e4, t4, i4, s3, r4, n3, o4, a3, l3, u3, c3) {
        Is(t4, c3++, i4), ++r4[256];
        for (var d3 = Fs(r4, 15), h3 = d3[0], _3 = d3[1], p3 = Fs(n3, 15), v3 = p3[0], g3 = p3[1], f3 = Cs(h3), m3 = f3[0], b3 = f3[1], y3 = Cs(v3), w3 = y3[0], S3 = y3[1], E3 = new os(19), k3 = 0; k3 < m3.length; ++k3)
          E3[31 & m3[k3]]++;
        for (k3 = 0; k3 < w3.length; ++k3)
          E3[31 & w3[k3]]++;
        for (var x3 = Fs(E3, 7), I3 = x3[0], P3 = x3[1], F3 = 19; F3 > 4 && !I3[cs[F3 - 1]]; --F3)
          ;
        var R3, C3, T3, $2, M3 = u3 + 5 << 3, A3 = Ts(r4, ys) + Ts(n3, ws) + o4, O3 = Ts(r4, h3) + Ts(n3, v3) + o4 + 14 + 3 * F3 + Ts(E3, I3) + (2 * E3[16] + 3 * E3[17] + 7 * E3[18]);
        if (M3 <= A3 && M3 <= O3)
          return $s(t4, c3, e4.subarray(l3, l3 + u3));
        if (Is(t4, c3, 1 + (O3 < A3)), c3 += 2, O3 < A3) {
          R3 = bs(h3, _3, 0), C3 = h3, T3 = bs(v3, g3, 0), $2 = v3;
          var L3 = bs(I3, P3, 0);
          Is(t4, c3, b3 - 257), Is(t4, c3 + 5, S3 - 1), Is(t4, c3 + 10, F3 - 4), c3 += 14;
          for (k3 = 0; k3 < F3; ++k3)
            Is(t4, c3 + 3 * k3, I3[cs[k3]]);
          c3 += 3 * F3;
          for (var D3 = [m3, w3], N3 = 0; N3 < 2; ++N3) {
            var q3 = D3[N3];
            for (k3 = 0; k3 < q3.length; ++k3) {
              var B3 = 31 & q3[k3];
              Is(t4, c3, L3[B3]), c3 += I3[B3], B3 > 15 && (Is(t4, c3, q3[k3] >>> 5 & 127), c3 += q3[k3] >>> 12);
            }
          }
        } else
          R3 = Ss, C3 = ys, T3 = Es, $2 = ws;
        for (k3 = 0; k3 < a3; ++k3)
          if (s3[k3] > 255) {
            B3 = s3[k3] >>> 18 & 31;
            Ps(t4, c3, R3[B3 + 257]), c3 += C3[B3 + 257], B3 > 7 && (Is(t4, c3, s3[k3] >>> 23 & 31), c3 += ls[B3]);
            var H3 = 31 & s3[k3];
            Ps(t4, c3, T3[H3]), c3 += $2[H3], H3 > 3 && (Ps(t4, c3, s3[k3] >>> 5 & 8191), c3 += us[H3]);
          } else
            Ps(t4, c3, R3[s3[k3]]), c3 += C3[s3[k3]];
        return Ps(t4, c3, R3[256]), c3 + C3[256];
      };
      As = new as([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
      Os = function() {
        for (var e4 = new as(256), t4 = 0; t4 < 256; ++t4) {
          for (var i4 = t4, s3 = 9; --s3; )
            i4 = (1 & i4 && 3988292384) ^ i4 >>> 1;
          e4[t4] = i4;
        }
        return e4;
      }();
      Ls = function() {
        var e4 = 4294967295;
        return { p: function(t4) {
          for (var i4 = e4, s3 = 0; s3 < t4.length; ++s3)
            i4 = Os[255 & i4 ^ t4[s3]] ^ i4 >>> 8;
          e4 = i4;
        }, d: function() {
          return 4294967295 ^ e4;
        } };
      };
      Ds = function(e4, t4, i4, s3, r4) {
        return function(e5, t5, i5, s4, r5, n3) {
          var o4 = e5.length, a3 = new ns(s4 + o4 + 5 * (1 + Math.floor(o4 / 7e3)) + r5), l3 = a3.subarray(s4, a3.length - r5), u3 = 0;
          if (!t5 || o4 < 8)
            for (var c3 = 0; c3 <= o4; c3 += 65535) {
              var d3 = c3 + 65535;
              d3 < o4 ? u3 = $s(l3, u3, e5.subarray(c3, d3)) : (l3[c3] = n3, u3 = $s(l3, u3, e5.subarray(c3, o4)));
            }
          else {
            for (var h3 = As[t5 - 1], _3 = h3 >>> 13, p3 = 8191 & h3, v3 = (1 << i5) - 1, g3 = new os(32768), f3 = new os(v3 + 1), m3 = Math.ceil(i5 / 3), b3 = 2 * m3, y3 = function(t6) {
              return (e5[t6] ^ e5[t6 + 1] << m3 ^ e5[t6 + 2] << b3) & v3;
            }, w3 = new as(25e3), S3 = new os(288), E3 = new os(32), k3 = 0, x3 = 0, I3 = (c3 = 0, 0), P3 = 0, F3 = 0; c3 < o4; ++c3) {
              var R3 = y3(c3), C3 = 32767 & c3, T3 = f3[R3];
              if (g3[C3] = T3, f3[R3] = C3, P3 <= c3) {
                var $2 = o4 - c3;
                if ((k3 > 7e3 || I3 > 24576) && $2 > 423) {
                  u3 = Ms(e5, l3, 0, w3, S3, E3, x3, I3, F3, c3 - F3, u3), I3 = k3 = x3 = 0, F3 = c3;
                  for (var M3 = 0; M3 < 286; ++M3)
                    S3[M3] = 0;
                  for (M3 = 0; M3 < 30; ++M3)
                    E3[M3] = 0;
                }
                var A3 = 2, O3 = 0, L3 = p3, D3 = C3 - T3 & 32767;
                if ($2 > 2 && R3 == y3(c3 - D3))
                  for (var N3 = Math.min(_3, $2) - 1, q3 = Math.min(32767, c3), B3 = Math.min(258, $2); D3 <= q3 && --L3 && C3 != T3; ) {
                    if (e5[c3 + A3] == e5[c3 + A3 - D3]) {
                      for (var H3 = 0; H3 < B3 && e5[c3 + H3] == e5[c3 + H3 - D3]; ++H3)
                        ;
                      if (H3 > A3) {
                        if (A3 = H3, O3 = D3, H3 > N3)
                          break;
                        var U3 = Math.min(D3, H3 - 2), W3 = 0;
                        for (M3 = 0; M3 < U3; ++M3) {
                          var z3 = c3 - D3 + M3 + 32768 & 32767, j3 = z3 - g3[z3] + 32768 & 32767;
                          j3 > W3 && (W3 = j3, T3 = z3);
                        }
                      }
                    }
                    D3 += (C3 = T3) - (T3 = g3[C3]) + 32768 & 32767;
                  }
                if (O3) {
                  w3[I3++] = 268435456 | ps[A3] << 18 | vs[O3];
                  var V3 = 31 & ps[A3], G3 = 31 & vs[O3];
                  x3 += ls[V3] + us[G3], ++S3[257 + V3], ++E3[G3], P3 = c3 + A3, ++k3;
                } else
                  w3[I3++] = e5[c3], ++S3[e5[c3]];
              }
            }
            u3 = Ms(e5, l3, n3, w3, S3, E3, x3, I3, F3, c3 - F3, u3);
          }
          return xs(a3, 0, s4 + ks(u3) + r5);
        }(e4, null == t4.level ? 6 : t4.level, null == t4.mem ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(e4.length)))) : 12 + t4.mem, i4, s3, !r4);
      };
      Ns = function(e4, t4, i4) {
        for (; i4; ++t4)
          e4[t4] = i4, i4 >>>= 8;
      };
      qs = function(e4, t4) {
        var i4 = t4.filename;
        if (e4[0] = 31, e4[1] = 139, e4[2] = 8, e4[8] = t4.level < 2 ? 4 : 9 == t4.level ? 2 : 0, e4[9] = 3, 0 != t4.mtime && Ns(e4, 4, Math.floor(new Date(t4.mtime || Date.now()) / 1e3)), i4) {
          e4[3] = 8;
          for (var s3 = 0; s3 <= i4.length; ++s3)
            e4[s3 + 10] = i4.charCodeAt(s3);
        }
      };
      Bs = function(e4) {
        return 10 + (e4.filename && e4.filename.length + 1 || 0);
      };
      Ws = 3e5;
      zs = [bi.MouseMove, bi.MouseInteraction, bi.Scroll, bi.ViewportResize, bi.Input, bi.TouchMove, bi.MediaInteraction, bi.Drag];
      js = (e4) => ({ rrwebMethod: e4, enqueuedAt: Date.now(), attempt: 1 });
      Vs = "[SessionRecording]";
      Ys = class {
        get sessionIdleThresholdMilliseconds() {
          return this.instance.config.session_recording.session_idle_threshold_ms || 3e5;
        }
        get rrwebRecord() {
          var e4, t4;
          return null == h || null === (e4 = h.__PosthogExtensions__) || void 0 === e4 || null === (t4 = e4.rrweb) || void 0 === t4 ? void 0 : t4.record;
        }
        get started() {
          return this._captureStarted;
        }
        get sessionManager() {
          if (!this.instance.sessionManager)
            throw new Error(Vs + " must be started with a valid sessionManager.");
          return this.instance.sessionManager;
        }
        get fullSnapshotIntervalMillis() {
          var e4, t4;
          return "trigger_pending" === this.triggerStatus ? 6e4 : null !== (e4 = null === (t4 = this.instance.config.session_recording) || void 0 === t4 ? void 0 : t4.full_snapshot_interval_millis) && void 0 !== e4 ? e4 : Ws;
        }
        get isSampled() {
          var e4 = this.instance.get_property(be);
          return G(e4) ? e4 : null;
        }
        get sessionDuration() {
          var e4, t4, i4 = null === (e4 = this.buffer) || void 0 === e4 ? void 0 : e4.data[(null === (t4 = this.buffer) || void 0 === t4 ? void 0 : t4.data.length) - 1], { sessionStartTimestamp: s3 } = this.sessionManager.checkAndGetSessionAndWindowId(true);
          return i4 ? i4.timestamp - s3 : null;
        }
        get isRecordingEnabled() {
          var t4 = !!this.instance.get_property(he), i4 = !this.instance.config.disable_session_recording;
          return e2 && t4 && i4;
        }
        get isConsoleLogCaptureEnabled() {
          var e4 = !!this.instance.get_property(_e), t4 = this.instance.config.enable_recording_console_log;
          return null != t4 ? t4 : e4;
        }
        get canvasRecording() {
          var e4, t4, i4, s3, r4, n3, o4 = this.instance.config.session_recording.captureCanvas, a3 = this.instance.get_property(ve), l3 = null !== (e4 = null !== (t4 = null == o4 ? void 0 : o4.recordCanvas) && void 0 !== t4 ? t4 : null == a3 ? void 0 : a3.enabled) && void 0 !== e4 && e4, u3 = null !== (i4 = null !== (s3 = null == o4 ? void 0 : o4.canvasFps) && void 0 !== s3 ? s3 : null == a3 ? void 0 : a3.fps) && void 0 !== i4 ? i4 : 0, c3 = null !== (r4 = null !== (n3 = null == o4 ? void 0 : o4.canvasQuality) && void 0 !== n3 ? n3 : null == a3 ? void 0 : a3.quality) && void 0 !== r4 ? r4 : 0;
          return { enabled: l3, fps: ss(u3, 0, 12, "canvas recording fps"), quality: ss(c3, 0, 1, "canvas recording quality") };
        }
        get networkPayloadCapture() {
          var e4, t4, i4 = this.instance.get_property(pe), s3 = { recordHeaders: null === (e4 = this.instance.config.session_recording) || void 0 === e4 ? void 0 : e4.recordHeaders, recordBody: null === (t4 = this.instance.config.session_recording) || void 0 === t4 ? void 0 : t4.recordBody }, r4 = (null == s3 ? void 0 : s3.recordHeaders) || (null == i4 ? void 0 : i4.recordHeaders), n3 = (null == s3 ? void 0 : s3.recordBody) || (null == i4 ? void 0 : i4.recordBody), o4 = q(this.instance.config.capture_performance) ? this.instance.config.capture_performance.network_timing : this.instance.config.capture_performance, a3 = !!(G(o4) ? o4 : null == i4 ? void 0 : i4.capturePerformance);
          return r4 || n3 || a3 ? { recordHeaders: r4, recordBody: n3, recordPerformance: a3 } : void 0;
        }
        get sampleRate() {
          var e4 = this.instance.get_property(ge);
          return V(e4) ? e4 : null;
        }
        get minimumDuration() {
          var e4 = this.instance.get_property(fe);
          return V(e4) ? e4 : null;
        }
        get status() {
          return this.receivedDecide ? this.isRecordingEnabled ? j(this._linkedFlag) || this._linkedFlagSeen ? "trigger_pending" === this.triggerStatus ? "buffering" : this._urlBlocked ? "paused" : G(this.isSampled) ? this.isSampled ? "sampled" : "disabled" : "active" : "buffering" : "disabled" : "buffering";
        }
        get urlTriggerStatus() {
          var e4;
          return 0 === this._urlTriggers.length ? "trigger_disabled" : (null === (e4 = this.instance) || void 0 === e4 ? void 0 : e4.get_property(ye)) === this.sessionId ? "trigger_activated" : "trigger_pending";
        }
        get eventTriggerStatus() {
          var e4;
          return 0 === this._eventTriggers.length ? "trigger_disabled" : (null === (e4 = this.instance) || void 0 === e4 ? void 0 : e4.get_property(we)) === this.sessionId ? "trigger_activated" : "trigger_pending";
        }
        get triggerStatus() {
          var e4 = "trigger_activated" === this.eventTriggerStatus || "trigger_activated" === this.urlTriggerStatus, t4 = "trigger_pending" === this.eventTriggerStatus || "trigger_pending" === this.urlTriggerStatus;
          return e4 ? "trigger_activated" : t4 ? "trigger_pending" : "trigger_disabled";
        }
        constructor(e4) {
          if (te(this, "queuedRRWebEvents", []), te(this, "isIdle", false), te(this, "_linkedFlagSeen", false), te(this, "_lastActivityTimestamp", Date.now()), te(this, "_linkedFlag", null), te(this, "_removePageViewCaptureHook", void 0), te(this, "_onSessionIdListener", void 0), te(this, "_persistDecideOnSessionListener", void 0), te(this, "_samplingSessionListener", void 0), te(this, "_urlTriggers", []), te(this, "_urlBlocklist", []), te(this, "_urlBlocked", false), te(this, "_eventTriggers", []), te(this, "_removeEventTriggerCaptureHook", void 0), te(this, "_forceAllowLocalhostNetworkCapture", false), te(this, "_onBeforeUnload", () => {
            this._flushBuffer();
          }), te(this, "_onOffline", () => {
            this._tryAddCustomEvent("browser offline", {});
          }), te(this, "_onOnline", () => {
            this._tryAddCustomEvent("browser online", {});
          }), te(this, "_onVisibilityChange", () => {
            if (null != o2 && o2.visibilityState) {
              var e5 = "window " + o2.visibilityState;
              this._tryAddCustomEvent(e5, {});
            }
          }), this.instance = e4, this._captureStarted = false, this._endpoint = "/s/", this.stopRrweb = void 0, this.receivedDecide = false, !this.instance.sessionManager)
            throw X.error(Vs + " started without valid sessionManager"), new Error(Vs + " started without valid sessionManager. This is a bug.");
          var { sessionId: t4, windowId: i4 } = this.sessionManager.checkAndGetSessionAndWindowId();
          this.sessionId = t4, this.windowId = i4, this.buffer = this.clearBuffer(), this.sessionIdleThresholdMilliseconds >= this.sessionManager.sessionTimeoutMs && X.warn(Vs + " session_idle_threshold_ms (".concat(this.sessionIdleThresholdMilliseconds, ") is greater than the session timeout (").concat(this.sessionManager.sessionTimeoutMs, "). Session will never be detected as idle"));
        }
        startIfEnabledOrStop(t4) {
          this.isRecordingEnabled ? (this._startCapture(t4), null == e2 || e2.addEventListener("beforeunload", this._onBeforeUnload), null == e2 || e2.addEventListener("offline", this._onOffline), null == e2 || e2.addEventListener("online", this._onOnline), null == e2 || e2.addEventListener("visibilitychange", this._onVisibilityChange), this._setupSampling(), this._addEventTriggerListener(), j(this._removePageViewCaptureHook) && (this._removePageViewCaptureHook = this.instance._addCaptureHook((t5) => {
            try {
              if ("$pageview" === t5) {
                var i4 = e2 ? this._maskUrl(e2.location.href) : "";
                if (!i4)
                  return;
                this._tryAddCustomEvent("$pageview", { href: i4 });
              }
            } catch (e4) {
              X.error("Could not add $pageview to rrweb session", e4);
            }
          })), this._onSessionIdListener || (this._onSessionIdListener = this.sessionManager.onSessionId((e4, t5, i4) => {
            var s3, r4, n3, o4;
            i4 && (this._tryAddCustomEvent("$session_id_change", { sessionId: e4, windowId: t5, changeReason: i4 }), null === (s3 = this.instance) || void 0 === s3 || null === (r4 = s3.persistence) || void 0 === r4 || r4.unregister(we), null === (n3 = this.instance) || void 0 === n3 || null === (o4 = n3.persistence) || void 0 === o4 || o4.unregister(ye));
          }))) : this.stopRecording();
        }
        stopRecording() {
          var t4, i4, s3, r4;
          this._captureStarted && this.stopRrweb && (this.stopRrweb(), this.stopRrweb = void 0, this._captureStarted = false, null == e2 || e2.removeEventListener("beforeunload", this._onBeforeUnload), null == e2 || e2.removeEventListener("offline", this._onOffline), null == e2 || e2.removeEventListener("online", this._onOnline), null == e2 || e2.removeEventListener("visibilitychange", this._onVisibilityChange), this.clearBuffer(), clearInterval(this._fullSnapshotTimer), null === (t4 = this._removePageViewCaptureHook) || void 0 === t4 || t4.call(this), this._removePageViewCaptureHook = void 0, null === (i4 = this._removeEventTriggerCaptureHook) || void 0 === i4 || i4.call(this), this._removeEventTriggerCaptureHook = void 0, null === (s3 = this._onSessionIdListener) || void 0 === s3 || s3.call(this), this._onSessionIdListener = void 0, null === (r4 = this._samplingSessionListener) || void 0 === r4 || r4.call(this), this._samplingSessionListener = void 0, X.info(Vs + " stopped"));
        }
        makeSamplingDecision(e4) {
          var t4, i4 = this.sessionId !== e4, s3 = this.sampleRate;
          if (V(s3)) {
            var r4, n3 = this.isSampled, o4 = i4 || !G(n3);
            if (o4)
              r4 = Math.random() < s3;
            else
              r4 = n3;
            o4 && (r4 ? this._reportStarted("sampled") : X.warn(Vs + " Sample rate (".concat(s3, ") has determined that this sessionId (").concat(e4, ") will not be sent to the server.")), this._tryAddCustomEvent("samplingDecisionMade", { sampleRate: s3, isSampled: r4 })), null === (t4 = this.instance.persistence) || void 0 === t4 || t4.register({ [be]: r4 });
          } else {
            var a3;
            null === (a3 = this.instance.persistence) || void 0 === a3 || a3.register({ [be]: null });
          }
        }
        afterDecideResponse(e4) {
          var t4, i4, s3, r4, n3, o4;
          (this._persistDecideResponse(e4), this._linkedFlag = (null === (t4 = e4.sessionRecording) || void 0 === t4 ? void 0 : t4.linkedFlag) || null, null !== (i4 = e4.sessionRecording) && void 0 !== i4 && i4.endpoint) && (this._endpoint = null === (o4 = e4.sessionRecording) || void 0 === o4 ? void 0 : o4.endpoint);
          if (this._setupSampling(), !j(this._linkedFlag) && !this._linkedFlagSeen) {
            var a3 = U(this._linkedFlag) ? this._linkedFlag : this._linkedFlag.flag, l3 = U(this._linkedFlag) ? null : this._linkedFlag.variant;
            this.instance.onFeatureFlags((e5, t5) => {
              var i5 = q(t5) && a3 in t5, s4 = l3 ? t5[a3] === l3 : i5;
              s4 && this._reportStarted("linked_flag_matched", { linkedFlag: a3, linkedVariant: l3 }), this._linkedFlagSeen = s4;
            });
          }
          null !== (s3 = e4.sessionRecording) && void 0 !== s3 && s3.urlTriggers && (this._urlTriggers = e4.sessionRecording.urlTriggers), null !== (r4 = e4.sessionRecording) && void 0 !== r4 && r4.urlBlocklist && (this._urlBlocklist = e4.sessionRecording.urlBlocklist), null !== (n3 = e4.sessionRecording) && void 0 !== n3 && n3.eventTriggers && (this._eventTriggers = e4.sessionRecording.eventTriggers), this.receivedDecide = true, this.startIfEnabledOrStop();
        }
        _setupSampling() {
          V(this.sampleRate) && j(this._samplingSessionListener) && (this._samplingSessionListener = this.sessionManager.onSessionId((e4) => {
            this.makeSamplingDecision(e4);
          }));
        }
        _persistDecideResponse(e4) {
          if (this.instance.persistence) {
            var t4, i4 = this.instance.persistence, s3 = () => {
              var t5, s4, r4, n3, o4, a3, l3, u3 = null === (t5 = e4.sessionRecording) || void 0 === t5 ? void 0 : t5.sampleRate, c3 = j(u3) ? null : parseFloat(u3), d3 = null === (s4 = e4.sessionRecording) || void 0 === s4 ? void 0 : s4.minimumDurationMilliseconds;
              i4.register({ [he]: !!e4.sessionRecording, [_e]: null === (r4 = e4.sessionRecording) || void 0 === r4 ? void 0 : r4.consoleLogRecordingEnabled, [pe]: ee({ capturePerformance: e4.capturePerformance }, null === (n3 = e4.sessionRecording) || void 0 === n3 ? void 0 : n3.networkPayloadCapture), [ve]: { enabled: null === (o4 = e4.sessionRecording) || void 0 === o4 ? void 0 : o4.recordCanvas, fps: null === (a3 = e4.sessionRecording) || void 0 === a3 ? void 0 : a3.canvasFps, quality: null === (l3 = e4.sessionRecording) || void 0 === l3 ? void 0 : l3.canvasQuality }, [ge]: c3, [fe]: H(d3) ? null : d3 });
            };
            s3(), null === (t4 = this._persistDecideOnSessionListener) || void 0 === t4 || t4.call(this), this._persistDecideOnSessionListener = this.sessionManager.onSessionId(s3);
          }
        }
        log(e4) {
          var t4, i4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "log";
          null === (t4 = this.instance.sessionRecording) || void 0 === t4 || t4.onRRwebEmit({ type: 6, data: { plugin: "rrweb/console@1", payload: { level: i4, trace: [], payload: [JSON.stringify(e4)] } }, timestamp: Date.now() });
        }
        _startCapture(e4) {
          if (!H(Object.assign) && !H(Array.from) && !(this._captureStarted || this.instance.config.disable_session_recording || this.instance.consent.isOptedOut())) {
            var t4, i4;
            if (this._captureStarted = true, this.sessionManager.checkAndGetSessionAndWindowId(), this.rrwebRecord)
              this._onScriptLoaded();
            else
              null === (t4 = h.__PosthogExtensions__) || void 0 === t4 || null === (i4 = t4.loadExternalDependency) || void 0 === i4 || i4.call(t4, this.instance, "recorder", (e5) => {
                if (e5)
                  return X.error(Vs + " could not load recorder", e5);
                this._onScriptLoaded();
              });
            X.info(Vs + " starting"), "active" === this.status && this._reportStarted(e4 || "recording_initialized");
          }
        }
        isInteractiveEvent(e4) {
          var t4;
          return 3 === e4.type && -1 !== zs.indexOf(null === (t4 = e4.data) || void 0 === t4 ? void 0 : t4.source);
        }
        _updateWindowAndSessionIds(e4) {
          var t4 = this.isInteractiveEvent(e4);
          t4 || this.isIdle || e4.timestamp - this._lastActivityTimestamp > this.sessionIdleThresholdMilliseconds && (this.isIdle = true, clearInterval(this._fullSnapshotTimer), this._tryAddCustomEvent("sessionIdle", { eventTimestamp: e4.timestamp, lastActivityTimestamp: this._lastActivityTimestamp, threshold: this.sessionIdleThresholdMilliseconds, bufferLength: this.buffer.data.length, bufferSize: this.buffer.size }), this._flushBuffer());
          var i4 = false;
          if (t4 && (this._lastActivityTimestamp = e4.timestamp, this.isIdle && (this.isIdle = false, this._tryAddCustomEvent("sessionNoLongerIdle", { reason: "user activity", type: e4.type }), i4 = true)), !this.isIdle) {
            var { windowId: s3, sessionId: r4 } = this.sessionManager.checkAndGetSessionAndWindowId(!t4, e4.timestamp), n3 = this.sessionId !== r4, o4 = this.windowId !== s3;
            this.windowId = s3, this.sessionId = r4, n3 || o4 ? (this.stopRecording(), this.startIfEnabledOrStop("session_id_changed")) : i4 && this._scheduleFullSnapshot();
          }
        }
        _tryRRWebMethod(e4) {
          try {
            return e4.rrwebMethod(), true;
          } catch (t4) {
            return this.queuedRRWebEvents.length < 10 ? this.queuedRRWebEvents.push({ enqueuedAt: e4.enqueuedAt || Date.now(), attempt: e4.attempt++, rrwebMethod: e4.rrwebMethod }) : X.warn(Vs + " could not emit queued rrweb event.", t4, e4), false;
          }
        }
        _tryAddCustomEvent(e4, t4) {
          return this._tryRRWebMethod(js(() => this.rrwebRecord.addCustomEvent(e4, t4)));
        }
        _tryTakeFullSnapshot() {
          return this._tryRRWebMethod(js(() => this.rrwebRecord.takeFullSnapshot()));
        }
        _onScriptLoaded() {
          var e4, t4 = { blockClass: "ph-no-capture", blockSelector: void 0, ignoreClass: "ph-ignore-input", maskTextClass: "ph-mask", maskTextSelector: void 0, maskTextFn: void 0, maskAllInputs: true, maskInputOptions: { password: true }, maskInputFn: void 0, slimDOMOptions: {}, collectFonts: false, inlineStylesheet: true, recordCrossOriginIframes: false }, i4 = this.instance.config.session_recording;
          for (var [s3, r4] of Object.entries(i4 || {}))
            s3 in t4 && ("maskInputOptions" === s3 ? t4.maskInputOptions = ee({ password: true }, r4) : t4[s3] = r4);
          if (this.canvasRecording && this.canvasRecording.enabled && (t4.recordCanvas = true, t4.sampling = { canvas: this.canvasRecording.fps }, t4.dataURLOptions = { type: "image/webp", quality: this.canvasRecording.quality }), this.rrwebRecord) {
            this.mutationRateLimiter = null !== (e4 = this.mutationRateLimiter) && void 0 !== e4 ? e4 : new rs(this.rrwebRecord, { refillRate: this.instance.config.session_recording.__mutationRateLimiterRefillRate, bucketSize: this.instance.config.session_recording.__mutationRateLimiterBucketSize, onBlockedNode: (e5, t5) => {
              var i5 = "Too many mutations on node '".concat(e5, "'. Rate limiting. This could be due to SVG animations or something similar");
              X.info(i5, { node: t5 }), this.log(Vs + " " + i5, "warn");
            } });
            var n3 = this._gatherRRWebPlugins();
            this.stopRrweb = this.rrwebRecord(ee({ emit: (e5) => {
              this.onRRwebEmit(e5);
            }, plugins: n3 }, t4)), this._lastActivityTimestamp = Date.now(), this.isIdle = false, this._tryAddCustomEvent("$session_options", { sessionRecordingOptions: t4, activePlugins: n3.map((e5) => null == e5 ? void 0 : e5.name) }), this._tryAddCustomEvent("$posthog_config", { config: this.instance.config });
          } else
            X.error(Vs + "onScriptLoaded was called but rrwebRecord is not available. This indicates something has gone wrong.");
        }
        _scheduleFullSnapshot() {
          if (this._fullSnapshotTimer && clearInterval(this._fullSnapshotTimer), !this.isIdle) {
            var e4 = this.fullSnapshotIntervalMillis;
            e4 && (this._fullSnapshotTimer = setInterval(() => {
              this._tryTakeFullSnapshot();
            }, e4));
          }
        }
        _gatherRRWebPlugins() {
          var e4, t4, i4, s3, r4 = [], n3 = null === (e4 = h.__PosthogExtensions__) || void 0 === e4 || null === (t4 = e4.rrwebPlugins) || void 0 === t4 ? void 0 : t4.getRecordConsolePlugin;
          n3 && this.isConsoleLogCaptureEnabled && r4.push(n3());
          var o4 = null === (i4 = h.__PosthogExtensions__) || void 0 === i4 || null === (s3 = i4.rrwebPlugins) || void 0 === s3 ? void 0 : s3.getRecordNetworkPlugin;
          this.networkPayloadCapture && N(o4) && (!ct.includes(location.hostname) || this._forceAllowLocalhostNetworkCapture ? r4.push(o4(is(this.instance.config, this.networkPayloadCapture))) : X.info(Vs + " NetworkCapture not started because we are on localhost."));
          return r4;
        }
        onRRwebEmit(e4) {
          var t4;
          if (this._processQueuedEvents(), e4 && q(e4)) {
            if (e4.type === mi.Meta) {
              var i4 = this._maskUrl(e4.data.href);
              if (this._lastHref = i4, !i4)
                return;
              e4.data.href = i4;
            } else
              this._pageViewFallBack();
            if (this._checkUrlTriggerConditions(), "paused" !== this.status || function(e5) {
              return e5.type === mi.Custom && "recording paused" === e5.data.tag;
            }(e4)) {
              e4.type === mi.FullSnapshot && this._scheduleFullSnapshot(), e4.type === mi.FullSnapshot && "trigger_pending" === this.triggerStatus && this.clearBuffer();
              var s3 = this.mutationRateLimiter ? this.mutationRateLimiter.throttleMutations(e4) : e4;
              if (s3) {
                var r4 = function(e5) {
                  var t5 = e5;
                  if (t5 && q(t5) && 6 === t5.type && q(t5.data) && "rrweb/console@1" === t5.data.plugin) {
                    t5.data.payload.payload.length > 10 && (t5.data.payload.payload = t5.data.payload.payload.slice(0, 10), t5.data.payload.payload.push("...[truncated]"));
                    for (var i5 = [], s4 = 0; s4 < t5.data.payload.payload.length; s4++)
                      t5.data.payload.payload[s4] && t5.data.payload.payload[s4].length > 2e3 ? i5.push(t5.data.payload.payload[s4].slice(0, 2e3) + "...[truncated]") : i5.push(t5.data.payload.payload[s4]);
                    return t5.data.payload.payload = i5, e5;
                  }
                  return e5;
                }(s3);
                if (this._updateWindowAndSessionIds(r4), !this.isIdle || Qs(r4)) {
                  if (Qs(r4)) {
                    var n3 = r4.data.payload;
                    if (n3) {
                      var o4 = n3.lastActivityTimestamp, a3 = n3.threshold;
                      r4.timestamp = o4 + a3;
                    }
                  }
                  var l3 = null === (t4 = this.instance.config.session_recording.compress_events) || void 0 === t4 || t4 ? function(e5) {
                    if (gi(e5) < 1024)
                      return e5;
                    try {
                      if (e5.type === mi.FullSnapshot)
                        return ee(ee({}, e5), {}, { data: Gs(e5.data), cv: "2024-10" });
                      if (e5.type === mi.IncrementalSnapshot && e5.data.source === bi.Mutation)
                        return ee(ee({}, e5), {}, { cv: "2024-10", data: ee(ee({}, e5.data), {}, { texts: Gs(e5.data.texts), attributes: Gs(e5.data.attributes), removes: Gs(e5.data.removes), adds: Gs(e5.data.adds) }) });
                      if (e5.type === mi.IncrementalSnapshot && e5.data.source === bi.StyleSheetRule)
                        return ee(ee({}, e5), {}, { cv: "2024-10", data: ee(ee({}, e5.data), {}, { adds: Gs(e5.data.adds), removes: Gs(e5.data.removes) }) });
                    } catch (e6) {
                      X.error(Vs + " could not compress event - will use uncompressed event", e6);
                    }
                    return e5;
                  }(r4) : r4, u3 = { $snapshot_bytes: gi(l3), $snapshot_data: l3, $session_id: this.sessionId, $window_id: this.windowId };
                  "disabled" !== this.status ? this._captureSnapshotBuffered(u3) : this.clearBuffer();
                }
              }
            }
          }
        }
        _pageViewFallBack() {
          if (!this.instance.config.capture_pageview && e2) {
            var t4 = this._maskUrl(e2.location.href);
            this._lastHref !== t4 && (this._tryAddCustomEvent("$url_changed", { href: t4 }), this._lastHref = t4);
          }
        }
        _processQueuedEvents() {
          if (this.queuedRRWebEvents.length) {
            var e4 = [...this.queuedRRWebEvents];
            this.queuedRRWebEvents = [], e4.forEach((e5) => {
              Date.now() - e5.enqueuedAt <= 2e3 && this._tryRRWebMethod(e5);
            });
          }
        }
        _maskUrl(e4) {
          var t4 = this.instance.config.session_recording;
          if (t4.maskNetworkRequestFn) {
            var i4, s3 = { url: e4 };
            return null === (i4 = s3 = t4.maskNetworkRequestFn(s3)) || void 0 === i4 ? void 0 : i4.url;
          }
          return e4;
        }
        clearBuffer() {
          return this.buffer = { size: 0, data: [], sessionId: this.sessionId, windowId: this.windowId }, this.buffer;
        }
        _flushBuffer() {
          this.flushBufferTimer && (clearTimeout(this.flushBufferTimer), this.flushBufferTimer = void 0);
          var e4 = this.minimumDuration, t4 = this.sessionDuration, i4 = V(t4) && t4 >= 0, s3 = V(e4) && i4 && t4 < e4;
          if ("buffering" === this.status || s3)
            return this.flushBufferTimer = setTimeout(() => {
              this._flushBuffer();
            }, 2e3), this.buffer;
          this.buffer.data.length > 0 && fi(this.buffer).forEach((e5) => {
            this._captureSnapshot({ $snapshot_bytes: e5.size, $snapshot_data: e5.data, $session_id: e5.sessionId, $window_id: e5.windowId });
          });
          return this.clearBuffer();
        }
        _captureSnapshotBuffered(e4) {
          var t4, i4 = 2 + ((null === (t4 = this.buffer) || void 0 === t4 ? void 0 : t4.data.length) || 0);
          !this.isIdle && (this.buffer.size + e4.$snapshot_bytes + i4 > 943718.4 || this.buffer.sessionId !== this.sessionId) && (this.buffer = this._flushBuffer()), this.buffer.size += e4.$snapshot_bytes, this.buffer.data.push(e4.$snapshot_data), this.flushBufferTimer || this.isIdle || (this.flushBufferTimer = setTimeout(() => {
            this._flushBuffer();
          }, 2e3));
        }
        _captureSnapshot(e4) {
          this.instance.capture("$snapshot", e4, { _url: this.instance.requestRouter.endpointFor("api", this._endpoint), _noTruncate: true, _batchKey: "recordings", skip_client_rate_limiting: true });
        }
        _checkUrlTriggerConditions() {
          if (void 0 !== e2 && e2.location.href) {
            var t4 = e2.location.href, i4 = "paused" === this.status, s3 = Js(t4, this._urlBlocklist);
            s3 && !i4 ? this._pauseRecording() : !s3 && i4 && this._resumeRecording(), Js(t4, this._urlTriggers) && this._activateTrigger("url");
          }
        }
        _activateTrigger(e4) {
          var t4, i4;
          "trigger_pending" === this.triggerStatus && (null === (t4 = this.instance) || void 0 === t4 || null === (i4 = t4.persistence) || void 0 === i4 || i4.register({ ["url" === e4 ? ye : we]: this.sessionId }), this._flushBuffer(), this._reportStarted(e4 + "_trigger_matched"));
        }
        _pauseRecording() {
          var e4, t4;
          "paused" !== this.status && (this._urlBlocked = true, null == o2 || null === (e4 = o2.body) || void 0 === e4 || null === (t4 = e4.classList) || void 0 === t4 || t4.add("ph-no-capture"), clearInterval(this._fullSnapshotTimer), setTimeout(() => {
            this._flushBuffer();
          }, 100), X.info(Vs + " recording paused due to URL blocker"), this._tryAddCustomEvent("recording paused", { reason: "url blocker" }));
        }
        _resumeRecording() {
          var e4, t4;
          "paused" === this.status && (this._urlBlocked = false, null == o2 || null === (e4 = o2.body) || void 0 === e4 || null === (t4 = e4.classList) || void 0 === t4 || t4.remove("ph-no-capture"), this._tryTakeFullSnapshot(), this._scheduleFullSnapshot(), this._tryAddCustomEvent("recording resumed", { reason: "left blocked url" }), X.info(Vs + " recording resumed"));
        }
        _addEventTriggerListener() {
          0 !== this._eventTriggers.length && j(this._removeEventTriggerCaptureHook) && (this._removeEventTriggerCaptureHook = this.instance.on("eventCaptured", (e4) => {
            try {
              this._eventTriggers.includes(e4.event) && this._activateTrigger("event");
            } catch (e5) {
              X.error(Vs + "Could not activate event trigger", e5);
            }
          }));
        }
        overrideLinkedFlag() {
          this._linkedFlagSeen = true, this._reportStarted("linked_flag_overridden");
        }
        overrideSampling() {
          var e4;
          null === (e4 = this.instance.persistence) || void 0 === e4 || e4.register({ [be]: true }), this._reportStarted("sampling_overridden");
        }
        overrideTrigger(e4) {
          this._activateTrigger(e4);
        }
        _reportStarted(e4, t4) {
          this.instance.register_for_session({ $session_recording_start_reason: e4 }), X.info(Vs + " " + e4.replace("_", " "), t4), b(["recording_initialized", "session_id_changed"], e4) || this._tryAddCustomEvent(e4, t4);
        }
      };
      Xs = class {
        constructor(e4) {
          this.instance = e4, this.instance.decideEndpointWasHit = this.instance._hasBootstrappedFeatureFlags();
        }
        call() {
          var e4 = { token: this.instance.config.token, distinct_id: this.instance.get_distinct_id(), groups: this.instance.getGroups(), person_properties: this.instance.get_property(ke), group_properties: this.instance.get_property(xe), disable_flags: this.instance.config.advanced_disable_feature_flags || this.instance.config.advanced_disable_feature_flags_on_first_load || void 0 };
          this.instance._send_request({ method: "POST", url: this.instance.requestRouter.endpointFor("api", "/decide/?v=3"), data: e4, compression: this.instance.config.disable_compression ? void 0 : R.Base64, timeout: this.instance.config.feature_flag_request_timeout_ms, callback: (e5) => this.parseDecideResponse(e5.json) });
        }
        parseDecideResponse(e4) {
          var t4 = this;
          this.instance.featureFlags.setReloadingPaused(false), this.instance.featureFlags._startReloadTimer();
          var i4 = !e4;
          if (this.instance.config.advanced_disable_feature_flags_on_first_load || this.instance.config.advanced_disable_feature_flags || this.instance.featureFlags.receivedFeatureFlags(null != e4 ? e4 : {}, i4), i4)
            X.error("Failed to fetch feature flags from PostHog.");
          else {
            if (!o2 || !o2.body)
              return X.info("document not ready yet, trying again in 500 milliseconds..."), void setTimeout(() => {
                this.parseDecideResponse(e4);
              }, 500);
            if (this.instance._afterDecideResponse(e4), e4.siteApps)
              if (this.instance.config.opt_in_site_apps) {
                var s3 = function(e5, i5) {
                  var s4, r5;
                  h["__$$ph_site_app_".concat(e5)] = t4.instance, null === (s4 = h.__PosthogExtensions__) || void 0 === s4 || null === (r5 = s4.loadSiteApp) || void 0 === r5 || r5.call(s4, t4.instance, i5, (t5) => {
                    if (t5)
                      return X.error("Error while initializing PostHog app with config id ".concat(e5), t5);
                  });
                };
                for (var { id: r4, url: n3 } of e4.siteApps)
                  s3(r4, n3);
              } else
                e4.siteApps.length > 0 && X.error('PostHog site apps are disabled. Enable the "opt_in_site_apps" config to proceed.');
          }
        }
      };
      Zs = null != e2 && e2.location ? vt(e2.location.hash, "__posthog") || vt(location.hash, "state") : null;
      er = "_postHogToolbarParams";
      !function(e4) {
        e4[e4.UNINITIALIZED = 0] = "UNINITIALIZED", e4[e4.LOADING = 1] = "LOADING", e4[e4.LOADED = 2] = "LOADED";
      }(Ks || (Ks = {}));
      tr = class {
        constructor(e4) {
          this.instance = e4;
        }
        setToolbarState(e4) {
          h.ph_toolbar_state = e4;
        }
        getToolbarState() {
          var e4;
          return null !== (e4 = h.ph_toolbar_state) && void 0 !== e4 ? e4 : Ks.UNINITIALIZED;
        }
        maybeLoadToolbar() {
          var t4, i4, s3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
          if (!e2 || !o2)
            return false;
          s3 = null !== (t4 = s3) && void 0 !== t4 ? t4 : e2.location, n3 = null !== (i4 = n3) && void 0 !== i4 ? i4 : e2.history;
          try {
            if (!r4) {
              try {
                e2.localStorage.setItem("test", "test"), e2.localStorage.removeItem("test");
              } catch (e4) {
                return false;
              }
              r4 = null == e2 ? void 0 : e2.localStorage;
            }
            var a3, l3 = Zs || vt(s3.hash, "__posthog") || vt(s3.hash, "state"), u3 = l3 ? w(() => JSON.parse(atob(decodeURIComponent(l3)))) || w(() => JSON.parse(decodeURIComponent(l3))) : null;
            return u3 && "ph_authorize" === u3.action ? ((a3 = u3).source = "url", a3 && Object.keys(a3).length > 0 && (u3.desiredHash ? s3.hash = u3.desiredHash : n3 ? n3.replaceState(n3.state, "", s3.pathname + s3.search) : s3.hash = "")) : ((a3 = JSON.parse(r4.getItem(er) || "{}")).source = "localstorage", delete a3.userIntent), !(!a3.token || this.instance.config.token !== a3.token) && (this.loadToolbar(a3), true);
          } catch (e4) {
            return false;
          }
        }
        _callLoadToolbar(e4) {
          (h.ph_load_toolbar || h.ph_load_editor)(e4, this.instance);
        }
        loadToolbar(t4) {
          var i4 = !(null == o2 || !o2.getElementById(Le));
          if (!e2 || i4)
            return false;
          var s3 = "custom" === this.instance.requestRouter.region && this.instance.config.advanced_disable_toolbar_metrics, r4 = ee(ee({ token: this.instance.config.token }, t4), {}, { apiURL: this.instance.requestRouter.endpointFor("ui") }, s3 ? { instrument: false } : {});
          if (e2.localStorage.setItem(er, JSON.stringify(ee(ee({}, r4), {}, { source: void 0 }))), this.getToolbarState() === Ks.LOADED)
            this._callLoadToolbar(r4);
          else if (this.getToolbarState() === Ks.UNINITIALIZED) {
            var n3, a3;
            this.setToolbarState(Ks.LOADING), null === (n3 = h.__PosthogExtensions__) || void 0 === n3 || null === (a3 = n3.loadExternalDependency) || void 0 === a3 || a3.call(n3, this.instance, "toolbar", (e4) => {
              if (e4)
                return X.error("Failed to load toolbar", e4), void this.setToolbarState(Ks.UNINITIALIZED);
              this.setToolbarState(Ks.LOADED), this._callLoadToolbar(r4);
            }), P(e2, "turbolinks:load", () => {
              this.setToolbarState(Ks.UNINITIALIZED), this.loadToolbar(r4);
            });
          }
          return true;
        }
        _loadEditor(e4) {
          return this.loadToolbar(e4);
        }
        maybeLoadEditor() {
          var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, i4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
          return this.maybeLoadToolbar(e4, t4, i4);
        }
      };
      ir = class {
        constructor(e4) {
          te(this, "isPaused", true), te(this, "queue", []), te(this, "flushTimeoutMs", 3e3), this.sendRequest = e4;
        }
        enqueue(e4) {
          this.queue.push(e4), this.flushTimeout || this.setFlushTimeout();
        }
        unload() {
          this.clearFlushTimeout();
          var e4 = this.queue.length > 0 ? this.formatQueue() : {}, t4 = Object.values(e4), i4 = [...t4.filter((e5) => 0 === e5.url.indexOf("/e")), ...t4.filter((e5) => 0 !== e5.url.indexOf("/e"))];
          i4.map((e5) => {
            this.sendRequest(ee(ee({}, e5), {}, { transport: "sendBeacon" }));
          });
        }
        enable() {
          this.isPaused = false, this.setFlushTimeout();
        }
        setFlushTimeout() {
          var e4 = this;
          this.isPaused || (this.flushTimeout = setTimeout(() => {
            if (this.clearFlushTimeout(), this.queue.length > 0) {
              var t4 = this.formatQueue(), i4 = function(i5) {
                var s4 = t4[i5], r4 = (/* @__PURE__ */ new Date()).getTime();
                s4.data && D(s4.data) && f(s4.data, (e5) => {
                  e5.offset = Math.abs(e5.timestamp - r4), delete e5.timestamp;
                }), e4.sendRequest(s4);
              };
              for (var s3 in t4)
                i4(s3);
            }
          }, this.flushTimeoutMs));
        }
        clearFlushTimeout() {
          clearTimeout(this.flushTimeout), this.flushTimeout = void 0;
        }
        formatQueue() {
          var e4 = {};
          return f(this.queue, (t4) => {
            var i4, s3 = t4, r4 = (s3 ? s3.batchKey : null) || s3.url;
            H(e4[r4]) && (e4[r4] = ee(ee({}, s3), {}, { data: [] })), null === (i4 = e4[r4].data) || void 0 === i4 || i4.push(s3.data);
          }), this.queue = [], e4;
        }
      };
      sr = !!u || !!l;
      rr = "text/plain";
      nr = (e4, t4) => {
        var [i4, s3] = e4.split("?"), r4 = ee({}, t4);
        null == s3 || s3.split("&").forEach((e5) => {
          var [t5] = e5.split("=");
          delete r4[t5];
        });
        var n3 = _t(r4);
        return n3 = n3 ? (s3 ? s3 + "&" : "") + n3 : s3, "".concat(i4, "?").concat(n3);
      };
      or = (e4) => {
        var { data: t4, compression: i4 } = e4;
        if (t4) {
          if (i4 === R.GZipJS) {
            var s3 = Hs(Us(JSON.stringify(t4)), { mtime: 0 }), r4 = new Blob([s3], { type: rr });
            return { contentType: rr, body: r4, estimatedSize: r4.size };
          }
          if (i4 === R.Base64) {
            var n3 = function(e5) {
              var t5, i5, s4, r5, n4, o5 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", a4 = 0, l3 = 0, u3 = "", c3 = [];
              if (!e5)
                return e5;
              e5 = I(e5);
              do {
                t5 = (n4 = e5.charCodeAt(a4++) << 16 | e5.charCodeAt(a4++) << 8 | e5.charCodeAt(a4++)) >> 18 & 63, i5 = n4 >> 12 & 63, s4 = n4 >> 6 & 63, r5 = 63 & n4, c3[l3++] = o5.charAt(t5) + o5.charAt(i5) + o5.charAt(s4) + o5.charAt(r5);
              } while (a4 < e5.length);
              switch (u3 = c3.join(""), e5.length % 3) {
                case 1:
                  u3 = u3.slice(0, -2) + "==";
                  break;
                case 2:
                  u3 = u3.slice(0, -1) + "=";
              }
              return u3;
            }(JSON.stringify(t4)), o4 = ((e5) => "data=" + encodeURIComponent("string" == typeof e5 ? e5 : JSON.stringify(e5)))(n3);
            return { contentType: "application/x-www-form-urlencoded", body: o4, estimatedSize: new Blob([o4]).size };
          }
          var a3 = JSON.stringify(t4);
          return { contentType: "application/json", body: a3, estimatedSize: new Blob([a3]).size };
        }
      };
      ar = [];
      u && ar.push({ transport: "XHR", method: (e4) => {
        var t4, i4 = new u();
        i4.open(e4.method || "GET", e4.url, true);
        var { contentType: s3, body: r4 } = null !== (t4 = or(e4)) && void 0 !== t4 ? t4 : {};
        f(e4.headers, function(e5, t5) {
          i4.setRequestHeader(t5, e5);
        }), s3 && i4.setRequestHeader("Content-Type", s3), e4.timeout && (i4.timeout = e4.timeout), i4.withCredentials = true, i4.onreadystatechange = () => {
          if (4 === i4.readyState) {
            var t5, s4 = { statusCode: i4.status, text: i4.responseText };
            if (200 === i4.status)
              try {
                s4.json = JSON.parse(i4.responseText);
              } catch (e5) {
              }
            null === (t5 = e4.callback) || void 0 === t5 || t5.call(e4, s4);
          }
        }, i4.send(r4);
      } }), l && ar.push({ transport: "fetch", method: (e4) => {
        var t4, i4, { contentType: s3, body: r4, estimatedSize: n3 } = null !== (t4 = or(e4)) && void 0 !== t4 ? t4 : {}, o4 = new Headers();
        f(e4.headers, function(e5, t5) {
          o4.append(t5, e5);
        }), s3 && o4.append("Content-Type", s3);
        var a3 = e4.url, u3 = null;
        if (c) {
          var d3 = new c();
          u3 = { signal: d3.signal, timeout: setTimeout(() => d3.abort(), e4.timeout) };
        }
        l(a3, { method: (null == e4 ? void 0 : e4.method) || "GET", headers: o4, keepalive: "POST" === e4.method && (n3 || 0) < 52428.8, body: r4, signal: null === (i4 = u3) || void 0 === i4 ? void 0 : i4.signal }).then((t5) => t5.text().then((i5) => {
          var s4, r5 = { statusCode: t5.status, text: i5 };
          if (200 === t5.status)
            try {
              r5.json = JSON.parse(i5);
            } catch (e5) {
              X.error(e5);
            }
          null === (s4 = e4.callback) || void 0 === s4 || s4.call(e4, r5);
        })).catch((t5) => {
          var i5;
          X.error(t5), null === (i5 = e4.callback) || void 0 === i5 || i5.call(e4, { statusCode: 0, text: t5 });
        }).finally(() => u3 ? clearTimeout(u3.timeout) : null);
      } }), null != n && n.sendBeacon && ar.push({ transport: "sendBeacon", method: (e4) => {
        var t4 = nr(e4.url, { beacon: "1" });
        try {
          var i4, { contentType: s3, body: r4 } = null !== (i4 = or(e4)) && void 0 !== i4 ? i4 : {}, o4 = "string" == typeof r4 ? new Blob([r4], { type: s3 }) : r4;
          n.sendBeacon(t4, o4);
        } catch (e5) {
        }
      } });
      lr = ["retriesPerformedSoFar"];
      ur = class {
        constructor(t4) {
          te(this, "isPolling", false), te(this, "pollIntervalMs", 3e3), te(this, "queue", []), this.instance = t4, this.queue = [], this.areWeOnline = true, !H(e2) && "onLine" in e2.navigator && (this.areWeOnline = e2.navigator.onLine, e2.addEventListener("online", () => {
            this.areWeOnline = true, this.flush();
          }), e2.addEventListener("offline", () => {
            this.areWeOnline = false;
          }));
        }
        retriableRequest(e4) {
          var { retriesPerformedSoFar: t4 } = e4, i4 = ie(e4, lr);
          V(t4) && t4 > 0 && (i4.url = nr(i4.url, { retry_count: t4 })), this.instance._send_request(ee(ee({}, i4), {}, { callback: (e5) => {
            var s3;
            200 !== e5.statusCode && (e5.statusCode < 400 || e5.statusCode >= 500) && (null != t4 ? t4 : 0) < 10 ? this.enqueue(ee({ retriesPerformedSoFar: t4 }, i4)) : null === (s3 = i4.callback) || void 0 === s3 || s3.call(i4, e5);
          } }));
        }
        enqueue(e4) {
          var t4 = e4.retriesPerformedSoFar || 0;
          e4.retriesPerformedSoFar = t4 + 1;
          var i4 = function(e5) {
            var t5 = 3e3 * Math.pow(2, e5), i5 = t5 / 2, s4 = Math.min(18e5, t5), r5 = (Math.random() - 0.5) * (s4 - i5);
            return Math.ceil(s4 + r5);
          }(t4), s3 = Date.now() + i4;
          this.queue.push({ retryAt: s3, requestOptions: e4 });
          var r4 = "Enqueued failed request for retry in ".concat(i4);
          navigator.onLine || (r4 += " (Browser is offline)"), X.warn(r4), this.isPolling || (this.isPolling = true, this.poll());
        }
        poll() {
          this.poller && clearTimeout(this.poller), this.poller = setTimeout(() => {
            this.areWeOnline && this.queue.length > 0 && this.flush(), this.poll();
          }, this.pollIntervalMs);
        }
        flush() {
          var e4 = Date.now(), t4 = [], i4 = this.queue.filter((i5) => i5.retryAt < e4 || (t4.push(i5), false));
          if (this.queue = t4, i4.length > 0)
            for (var { requestOptions: s3 } of i4)
              this.retriableRequest(s3);
        }
        unload() {
          for (var { requestOptions: e4 } of (this.poller && (clearTimeout(this.poller), this.poller = void 0), this.queue))
            try {
              this.instance._send_request(ee(ee({}, e4), {}, { transport: "sendBeacon" }));
            } catch (e5) {
              X.error(e5);
            }
          this.queue = [];
        }
      };
      dr = class {
        constructor(e4, t4, i4, s3) {
          var r4;
          te(this, "_sessionIdChangedHandlers", []), this.config = e4, this.persistence = t4, this._windowId = void 0, this._sessionId = void 0, this._sessionStartTimestamp = null, this._sessionActivityTimestamp = null, this._sessionIdGenerator = i4 || Je, this._windowIdGenerator = s3 || Je;
          var n3 = e4.persistence_name || e4.token, o4 = e4.session_idle_timeout_seconds || 1800;
          if (this._sessionTimeoutMs = 1e3 * ss(o4, 60, 1800, "session_idle_timeout_seconds"), this._window_id_storage_key = "ph_" + n3 + "_window_id", this._primary_window_exists_storage_key = "ph_" + n3 + "_primary_window_exists", this._canUseSessionStorage()) {
            var a3 = ut.parse(this._window_id_storage_key), l3 = ut.parse(this._primary_window_exists_storage_key);
            a3 && !l3 ? this._windowId = a3 : ut.remove(this._window_id_storage_key), ut.set(this._primary_window_exists_storage_key, true);
          }
          if (null !== (r4 = this.config.bootstrap) && void 0 !== r4 && r4.sessionID)
            try {
              var u3 = ((e5) => {
                var t5 = e5.replace(/-/g, "");
                if (32 !== t5.length)
                  throw new Error("Not a valid UUID");
                if ("7" !== t5[12])
                  throw new Error("Not a UUIDv7");
                return parseInt(t5.substring(0, 12), 16);
              })(this.config.bootstrap.sessionID);
              this._setSessionId(this.config.bootstrap.sessionID, (/* @__PURE__ */ new Date()).getTime(), u3);
            } catch (e5) {
              X.error("Invalid sessionID in bootstrap", e5);
            }
          this._listenToReloadWindow();
        }
        get sessionTimeoutMs() {
          return this._sessionTimeoutMs;
        }
        onSessionId(e4) {
          return H(this._sessionIdChangedHandlers) && (this._sessionIdChangedHandlers = []), this._sessionIdChangedHandlers.push(e4), this._sessionId && e4(this._sessionId, this._windowId), () => {
            this._sessionIdChangedHandlers = this._sessionIdChangedHandlers.filter((t4) => t4 !== e4);
          };
        }
        _canUseSessionStorage() {
          return "memory" !== this.config.persistence && !this.persistence.disabled && ut.is_supported();
        }
        _setWindowId(e4) {
          e4 !== this._windowId && (this._windowId = e4, this._canUseSessionStorage() && ut.set(this._window_id_storage_key, e4));
        }
        _getWindowId() {
          return this._windowId ? this._windowId : this._canUseSessionStorage() ? ut.parse(this._window_id_storage_key) : null;
        }
        _setSessionId(e4, t4, i4) {
          e4 === this._sessionId && t4 === this._sessionActivityTimestamp && i4 === this._sessionStartTimestamp || (this._sessionStartTimestamp = i4, this._sessionActivityTimestamp = t4, this._sessionId = e4, this.persistence.register({ [me]: [t4, e4, i4] }));
        }
        _getSessionId() {
          if (this._sessionId && this._sessionActivityTimestamp && this._sessionStartTimestamp)
            return [this._sessionActivityTimestamp, this._sessionId, this._sessionStartTimestamp];
          var e4 = this.persistence.props[me];
          return D(e4) && 2 === e4.length && e4.push(e4[0]), e4 || [0, null, 0];
        }
        resetSessionId() {
          this._setSessionId(null, null, null);
        }
        _listenToReloadWindow() {
          null == e2 || e2.addEventListener("beforeunload", () => {
            this._canUseSessionStorage() && ut.remove(this._primary_window_exists_storage_key);
          });
        }
        checkAndGetSessionAndWindowId() {
          var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t4 = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null) || (/* @__PURE__ */ new Date()).getTime(), [i4, s3, r4] = this._getSessionId(), n3 = this._getWindowId(), o4 = V(r4) && r4 > 0 && Math.abs(t4 - r4) > 864e5, a3 = false, l3 = !s3, u3 = !e4 && Math.abs(t4 - i4) > this.sessionTimeoutMs;
          l3 || u3 || o4 ? (s3 = this._sessionIdGenerator(), n3 = this._windowIdGenerator(), X.info("[SessionId] new session ID generated", { sessionId: s3, windowId: n3, changeReason: { noSessionId: l3, activityTimeout: u3, sessionPastMaximumLength: o4 } }), r4 = t4, a3 = true) : n3 || (n3 = this._windowIdGenerator(), a3 = true);
          var c3 = 0 === i4 || !e4 || o4 ? t4 : i4, d3 = 0 === r4 ? (/* @__PURE__ */ new Date()).getTime() : r4;
          return this._setWindowId(n3), this._setSessionId(s3, c3, d3), a3 && this._sessionIdChangedHandlers.forEach((e5) => e5(s3, n3, a3 ? { noSessionId: l3, activityTimeout: u3, sessionPastMaximumLength: o4 } : void 0)), { sessionId: s3, windowId: n3, sessionStartTimestamp: d3, changeReason: a3 ? { noSessionId: l3, activityTimeout: u3, sessionPastMaximumLength: o4 } : void 0, lastActivityTimestamp: i4 };
        }
      };
      !function(e4) {
        e4.US = "us", e4.EU = "eu", e4.CUSTOM = "custom";
      }(cr || (cr = {}));
      hr = "i.posthog.com";
      _r = class {
        constructor(e4) {
          te(this, "_regionCache", {}), this.instance = e4;
        }
        get apiHost() {
          var e4 = this.instance.config.api_host.trim().replace(/\/$/, "");
          return "https://app.posthog.com" === e4 ? "https://us.i.posthog.com" : e4;
        }
        get uiHost() {
          var e4, t4 = null === (e4 = this.instance.config.ui_host) || void 0 === e4 ? void 0 : e4.replace(/\/$/, "");
          return t4 || (t4 = this.apiHost.replace(".".concat(hr), ".posthog.com")), "https://app.posthog.com" === t4 ? "https://us.posthog.com" : t4;
        }
        get region() {
          return this._regionCache[this.apiHost] || (/https:\/\/(app|us|us-assets)(\.i)?\.posthog\.com/i.test(this.apiHost) ? this._regionCache[this.apiHost] = cr.US : /https:\/\/(eu|eu-assets)(\.i)?\.posthog\.com/i.test(this.apiHost) ? this._regionCache[this.apiHost] = cr.EU : this._regionCache[this.apiHost] = cr.CUSTOM), this._regionCache[this.apiHost];
        }
        endpointFor(e4) {
          var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
          if (t4 && (t4 = "/" === t4[0] ? t4 : "/".concat(t4)), "ui" === e4)
            return this.uiHost + t4;
          if (this.region === cr.CUSTOM)
            return this.apiHost + t4;
          var i4 = hr + t4;
          switch (e4) {
            case "assets":
              return "https://".concat(this.region, "-assets.").concat(i4);
            case "api":
              return "https://".concat(this.region, ".").concat(i4);
          }
        }
      };
      pr = "posthog-js";
      gr = class {
        constructor(e4, t4, i4, s3, r4) {
          this.name = pr, this.setupOnce = function(n3) {
            n3(vr(e4, { organization: t4, projectId: i4, prefix: s3, severityAllowList: r4 }));
          };
        }
      };
      wr = class {
        constructor(e4) {
          this._instance = e4;
        }
        doPageView(t4) {
          var i4, s3 = this._previousPageViewProperties(t4);
          return this._currentPath = null !== (i4 = null == e2 ? void 0 : e2.location.pathname) && void 0 !== i4 ? i4 : "", this._instance.scrollManager.resetContext(), this._prevPageviewTimestamp = t4, s3;
        }
        doPageLeave(e4) {
          return this._previousPageViewProperties(e4);
        }
        _previousPageViewProperties(e4) {
          var t4 = this._currentPath, i4 = this._prevPageviewTimestamp, s3 = this._instance.scrollManager.getContext();
          if (!i4)
            return {};
          var r4 = {};
          if (s3) {
            var { maxScrollHeight: n3, lastScrollY: o4, maxScrollY: a3, maxContentHeight: l3, lastContentY: u3, maxContentY: c3 } = s3;
            if (!(H(n3) || H(o4) || H(a3) || H(l3) || H(u3) || H(c3)))
              n3 = Math.ceil(n3), o4 = Math.ceil(o4), a3 = Math.ceil(a3), l3 = Math.ceil(l3), u3 = Math.ceil(u3), c3 = Math.ceil(c3), r4 = { $prev_pageview_last_scroll: o4, $prev_pageview_last_scroll_percentage: n3 <= 1 ? 1 : ss(o4 / n3, 0, 1), $prev_pageview_max_scroll: a3, $prev_pageview_max_scroll_percentage: n3 <= 1 ? 1 : ss(a3 / n3, 0, 1), $prev_pageview_last_content: u3, $prev_pageview_last_content_percentage: l3 <= 1 ? 1 : ss(u3 / l3, 0, 1), $prev_pageview_max_content: c3, $prev_pageview_max_content_percentage: l3 <= 1 ? 1 : ss(c3 / l3, 0, 1) };
          }
          return t4 && (r4.$prev_pageview_pathname = t4), i4 && (r4.$prev_pageview_duration = (e4.getTime() - i4.getTime()) / 1e3), r4;
        }
      };
      !function(e4) {
        e4.Popover = "popover", e4.API = "api", e4.Widget = "widget";
      }(fr || (fr = {})), function(e4) {
        e4.Open = "open", e4.MultipleChoice = "multiple_choice", e4.SingleChoice = "single_choice", e4.Rating = "rating", e4.Link = "link";
      }(mr || (mr = {})), function(e4) {
        e4.NextQuestion = "next_question", e4.End = "end", e4.ResponseBased = "response_based", e4.SpecificQuestion = "specific_question";
      }(br || (br = {}));
      Sr = class {
        constructor() {
          te(this, "events", {}), this.events = {};
        }
        on(e4, t4) {
          return this.events[e4] || (this.events[e4] = []), this.events[e4].push(t4), () => {
            this.events[e4] = this.events[e4].filter((e5) => e5 !== t4);
          };
        }
        emit(e4, t4) {
          for (var i4 of this.events[e4] || [])
            i4(t4);
          for (var s3 of this.events["*"] || [])
            s3(e4, t4);
        }
      };
      Er = class _Er {
        constructor(e4) {
          te(this, "_debugEventEmitter", new Sr()), te(this, "checkStep", (e5, t4) => this.checkStepEvent(e5, t4) && this.checkStepUrl(e5, t4) && this.checkStepElement(e5, t4)), te(this, "checkStepEvent", (e5, t4) => null == t4 || !t4.event || (null == e5 ? void 0 : e5.event) === (null == t4 ? void 0 : t4.event)), this.instance = e4, this.actionEvents = /* @__PURE__ */ new Set(), this.actionRegistry = /* @__PURE__ */ new Set();
        }
        init() {
          var e4;
          if (!H(null === (e4 = this.instance) || void 0 === e4 ? void 0 : e4._addCaptureHook)) {
            var t4;
            null === (t4 = this.instance) || void 0 === t4 || t4._addCaptureHook((e5, t5) => {
              this.on(e5, t5);
            });
          }
        }
        register(e4) {
          var t4, i4;
          if (!H(null === (t4 = this.instance) || void 0 === t4 ? void 0 : t4._addCaptureHook) && (e4.forEach((e5) => {
            var t5, i5;
            null === (t5 = this.actionRegistry) || void 0 === t5 || t5.add(e5), null === (i5 = e5.steps) || void 0 === i5 || i5.forEach((e6) => {
              var t6;
              null === (t6 = this.actionEvents) || void 0 === t6 || t6.add((null == e6 ? void 0 : e6.event) || "");
            });
          }), null !== (i4 = this.instance) && void 0 !== i4 && i4.autocapture)) {
            var s3, r4 = /* @__PURE__ */ new Set();
            e4.forEach((e5) => {
              var t5;
              null === (t5 = e5.steps) || void 0 === t5 || t5.forEach((e6) => {
                null != e6 && e6.selector && r4.add(null == e6 ? void 0 : e6.selector);
              });
            }), null === (s3 = this.instance) || void 0 === s3 || s3.autocapture.setElementSelectors(r4);
          }
        }
        on(e4, t4) {
          var i4;
          null != t4 && 0 != e4.length && (this.actionEvents.has(e4) || this.actionEvents.has(null == t4 ? void 0 : t4.event)) && this.actionRegistry && (null === (i4 = this.actionRegistry) || void 0 === i4 ? void 0 : i4.size) > 0 && this.actionRegistry.forEach((e5) => {
            this.checkAction(t4, e5) && this._debugEventEmitter.emit("actionCaptured", e5.name);
          });
        }
        _addActionHook(e4) {
          this.onAction("actionCaptured", (t4) => e4(t4));
        }
        checkAction(e4, t4) {
          if (null == (null == t4 ? void 0 : t4.steps))
            return false;
          for (var i4 of t4.steps)
            if (this.checkStep(e4, i4))
              return true;
          return false;
        }
        onAction(e4, t4) {
          return this._debugEventEmitter.on(e4, t4);
        }
        checkStepUrl(e4, t4) {
          if (null != t4 && t4.url) {
            var i4, s3 = null == e4 || null === (i4 = e4.properties) || void 0 === i4 ? void 0 : i4.$current_url;
            if (!s3 || "string" != typeof s3)
              return false;
            if (!_Er.matchString(s3, null == t4 ? void 0 : t4.url, (null == t4 ? void 0 : t4.url_matching) || "contains"))
              return false;
          }
          return true;
        }
        static matchString(t4, i4, s3) {
          switch (s3) {
            case "regex":
              return !!e2 && ht(t4, i4);
            case "exact":
              return i4 === t4;
            case "contains":
              var r4 = _Er.escapeStringRegexp(i4).replace(/_/g, ".").replace(/%/g, ".*");
              return ht(t4, r4);
            default:
              return false;
          }
        }
        static escapeStringRegexp(e4) {
          return e4.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
        }
        checkStepElement(e4, t4) {
          if ((null != t4 && t4.href || null != t4 && t4.tag_name || null != t4 && t4.text) && !this.getElementsList(e4).some((e5) => !(null != t4 && t4.href && !_Er.matchString(e5.href || "", null == t4 ? void 0 : t4.href, (null == t4 ? void 0 : t4.href_matching) || "exact")) && ((null == t4 || !t4.tag_name || e5.tag_name === (null == t4 ? void 0 : t4.tag_name)) && !(null != t4 && t4.text && !_Er.matchString(e5.text || "", null == t4 ? void 0 : t4.text, (null == t4 ? void 0 : t4.text_matching) || "exact") && !_Er.matchString(e5.$el_text || "", null == t4 ? void 0 : t4.text, (null == t4 ? void 0 : t4.text_matching) || "exact")))))
            return false;
          if (null != t4 && t4.selector) {
            var i4, s3 = null == e4 || null === (i4 = e4.properties) || void 0 === i4 ? void 0 : i4.$element_selectors;
            if (!s3)
              return false;
            if (!s3.includes(null == t4 ? void 0 : t4.selector))
              return false;
          }
          return true;
        }
        getElementsList(e4) {
          return null == (null == e4 ? void 0 : e4.properties.$elements) ? [] : null == e4 ? void 0 : e4.properties.$elements;
        }
      };
      kr = class _kr {
        constructor(e4) {
          this.instance = e4, this.eventToSurveys = /* @__PURE__ */ new Map(), this.actionToSurveys = /* @__PURE__ */ new Map();
        }
        register(e4) {
          var t4;
          H(null === (t4 = this.instance) || void 0 === t4 ? void 0 : t4._addCaptureHook) || (this.setupEventBasedSurveys(e4), this.setupActionBasedSurveys(e4));
        }
        setupActionBasedSurveys(e4) {
          var t4 = e4.filter((e5) => {
            var t5, i4, s3, r4;
            return (null === (t5 = e5.conditions) || void 0 === t5 ? void 0 : t5.actions) && (null === (i4 = e5.conditions) || void 0 === i4 || null === (s3 = i4.actions) || void 0 === s3 || null === (r4 = s3.values) || void 0 === r4 ? void 0 : r4.length) > 0;
          });
          if (0 !== t4.length) {
            if (null == this.actionMatcher) {
              this.actionMatcher = new Er(this.instance), this.actionMatcher.init();
              this.actionMatcher._addActionHook((e5) => {
                this.onAction(e5);
              });
            }
            t4.forEach((e5) => {
              var t5, i4, s3, r4, n3, o4, a3, l3, u3, c3;
              e5.conditions && null !== (t5 = e5.conditions) && void 0 !== t5 && t5.actions && null !== (i4 = e5.conditions) && void 0 !== i4 && null !== (s3 = i4.actions) && void 0 !== s3 && s3.values && (null === (r4 = e5.conditions) || void 0 === r4 || null === (n3 = r4.actions) || void 0 === n3 || null === (o4 = n3.values) || void 0 === o4 ? void 0 : o4.length) > 0 && (null === (a3 = this.actionMatcher) || void 0 === a3 || a3.register(e5.conditions.actions.values), null === (l3 = e5.conditions) || void 0 === l3 || null === (u3 = l3.actions) || void 0 === u3 || null === (c3 = u3.values) || void 0 === c3 || c3.forEach((t6) => {
                if (t6 && t6.name) {
                  var i5 = this.actionToSurveys.get(t6.name);
                  i5 && i5.push(e5.id), this.actionToSurveys.set(t6.name, i5 || [e5.id]);
                }
              }));
            });
          }
        }
        setupEventBasedSurveys(e4) {
          var t4;
          if (0 !== e4.filter((e5) => {
            var t5, i4, s3, r4;
            return (null === (t5 = e5.conditions) || void 0 === t5 ? void 0 : t5.events) && (null === (i4 = e5.conditions) || void 0 === i4 || null === (s3 = i4.events) || void 0 === s3 || null === (r4 = s3.values) || void 0 === r4 ? void 0 : r4.length) > 0;
          }).length) {
            null === (t4 = this.instance) || void 0 === t4 || t4._addCaptureHook((e5, t5) => {
              this.onEvent(e5, t5);
            }), e4.forEach((e5) => {
              var t5, i4, s3;
              null === (t5 = e5.conditions) || void 0 === t5 || null === (i4 = t5.events) || void 0 === i4 || null === (s3 = i4.values) || void 0 === s3 || s3.forEach((t6) => {
                if (t6 && t6.name) {
                  var i5 = this.eventToSurveys.get(t6.name);
                  i5 && i5.push(e5.id), this.eventToSurveys.set(t6.name, i5 || [e5.id]);
                }
              });
            });
          }
        }
        onEvent(e4, t4) {
          var i4, s3, r4 = (null === (i4 = this.instance) || void 0 === i4 || null === (s3 = i4.persistence) || void 0 === s3 ? void 0 : s3.props[Pe]) || [];
          if (_kr.SURVEY_SHOWN_EVENT_NAME == e4 && t4 && r4.length > 0) {
            var n3, o4 = null == t4 || null === (n3 = t4.properties) || void 0 === n3 ? void 0 : n3.$survey_id;
            if (o4) {
              var a3 = r4.indexOf(o4);
              a3 >= 0 && (r4.splice(a3, 1), this._updateActivatedSurveys(r4));
            }
          } else
            this.eventToSurveys.has(e4) && this._updateActivatedSurveys(r4.concat(this.eventToSurveys.get(e4) || []));
        }
        onAction(e4) {
          var t4, i4, s3 = (null === (t4 = this.instance) || void 0 === t4 || null === (i4 = t4.persistence) || void 0 === i4 ? void 0 : i4.props[Pe]) || [];
          this.actionToSurveys.has(e4) && this._updateActivatedSurveys(s3.concat(this.actionToSurveys.get(e4) || []));
        }
        _updateActivatedSurveys(e4) {
          var t4, i4;
          null === (t4 = this.instance) || void 0 === t4 || null === (i4 = t4.persistence) || void 0 === i4 || i4.register({ [Pe]: [...new Set(e4)] });
        }
        getSurveys() {
          var e4, t4, i4 = null === (e4 = this.instance) || void 0 === e4 || null === (t4 = e4.persistence) || void 0 === t4 ? void 0 : t4.props[Pe];
          return i4 || [];
        }
        getEventToSurveys() {
          return this.eventToSurveys;
        }
        _getActionMatcher() {
          return this.actionMatcher;
        }
      };
      te(kr, "SURVEY_SHOWN_EVENT_NAME", "survey shown");
      Mr = {};
      Ar = [];
      Or = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
      Lr = Array.isArray;
      xr = Ar.slice, Ir = { __e: function(e4, t4, i4, s3) {
        for (var r4, n3, o4; t4 = t4.__; )
          if ((r4 = t4.__c) && !r4.__)
            try {
              if ((n3 = r4.constructor) && null != n3.getDerivedStateFromError && (r4.setState(n3.getDerivedStateFromError(e4)), o4 = r4.__d), null != r4.componentDidCatch && (r4.componentDidCatch(e4, s3 || {}), o4 = r4.__d), o4)
                return r4.__E = r4;
            } catch (t5) {
              e4 = t5;
            }
        throw e4;
      } }, Pr = 0, Hr.prototype.setState = function(e4, t4) {
        var i4;
        i4 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = Dr({}, this.state), "function" == typeof e4 && (e4 = e4(Dr({}, i4), this.props)), e4 && Dr(i4, e4), null != e4 && this.__v && (t4 && this._sb.push(t4), zr(this));
      }, Hr.prototype.forceUpdate = function(e4) {
        this.__v && (this.__e = true, e4 && this.__h.push(e4), zr(this));
      }, Hr.prototype.render = Br, Fr = [], Cr = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, Tr = function(e4, t4) {
        return e4.__v.__b - t4.__v.__b;
      }, jr.__r = 0, $r = 0;
      !function(e4, t4) {
        var i4 = { __c: t4 = "__cC" + $r++, __: e4, Consumer: function(e5, t5) {
          return e5.children(t5);
        }, Provider: function(e5) {
          var i5, s3;
          return this.getChildContext || (i5 = [], (s3 = {})[t4] = this, this.getChildContext = function() {
            return s3;
          }, this.shouldComponentUpdate = function(e6) {
            this.props.value !== e6.value && i5.some(function(e7) {
              e7.__e = true, zr(e7);
            });
          }, this.sub = function(e6) {
            i5.push(e6);
            var t5 = e6.componentWillUnmount;
            e6.componentWillUnmount = function() {
              i5.splice(i5.indexOf(e6), 1), t5 && t5.call(e6);
            };
          }), e5.children;
        } };
        i4.Provider.__ = i4.Consumer.contextType = i4;
      }({ isPreviewMode: false, previewPageIndex: 0, handleCloseSurveyPopup: () => {
      }, isPopup: true });
      an = "[Surveys]";
      ln = { icontains: (t4) => !!e2 && e2.location.href.toLowerCase().indexOf(t4.toLowerCase()) > -1, not_icontains: (t4) => !!e2 && -1 === e2.location.href.toLowerCase().indexOf(t4.toLowerCase()), regex: (t4) => !!e2 && ht(e2.location.href, t4), not_regex: (t4) => !!e2 && !ht(e2.location.href, t4), exact: (t4) => (null == e2 ? void 0 : e2.location.href) === t4, is_not: (t4) => (null == e2 ? void 0 : e2.location.href) !== t4 };
      un = class {
        constructor(e4) {
          this.instance = e4, this._surveyEventReceiver = null;
        }
        afterDecideResponse(e4) {
          this._decideServerResponse = !!e4.surveys, this.loadIfEnabled();
        }
        reset() {
          localStorage.removeItem("lastSeenSurveyDate");
          var e4 = (() => {
            for (var e5 = [], t4 = 0; t4 < localStorage.length; t4++) {
              var i4 = localStorage.key(t4);
              null != i4 && i4.startsWith("seenSurvey_") && e5.push(i4);
            }
            return e5;
          })();
          e4.forEach((e5) => localStorage.removeItem(e5));
        }
        loadIfEnabled() {
          var e4, t4, i4, s3 = null == h || null === (e4 = h.__PosthogExtensions__) || void 0 === e4 ? void 0 : e4.generateSurveys;
          this.instance.config.disable_surveys || !this._decideServerResponse || s3 || (null == this._surveyEventReceiver && (this._surveyEventReceiver = new kr(this.instance)), null === (t4 = h.__PosthogExtensions__) || void 0 === t4 || null === (i4 = t4.loadExternalDependency) || void 0 === i4 || i4.call(t4, this.instance, "surveys", (e5) => {
            var t5, i5;
            if (e5)
              return X.error(an, "Could not load surveys script", e5);
            this._surveyManager = null === (t5 = h.__PosthogExtensions__) || void 0 === t5 || null === (i5 = t5.generateSurveys) || void 0 === i5 ? void 0 : i5.call(t5, this.instance);
          }));
        }
        getSurveys(e4) {
          var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          if (this.instance.config.disable_surveys)
            return e4([]);
          null == this._surveyEventReceiver && (this._surveyEventReceiver = new kr(this.instance));
          var i4 = this.instance.get_property(Ie);
          if (i4 && !t4)
            return e4(i4);
          this.instance._send_request({ url: this.instance.requestRouter.endpointFor("api", "/api/surveys/?token=".concat(this.instance.config.token)), method: "GET", transport: "XHR", callback: (t5) => {
            var i5;
            if (200 !== t5.statusCode || !t5.json)
              return e4([]);
            var s3, r4 = t5.json.surveys || [], n3 = r4.filter((e5) => {
              var t6, i6, s4, r5, n4, o4, a3, l3, u3, c3, d3, h3;
              return (null === (t6 = e5.conditions) || void 0 === t6 ? void 0 : t6.events) && (null === (i6 = e5.conditions) || void 0 === i6 || null === (s4 = i6.events) || void 0 === s4 ? void 0 : s4.values) && (null === (r5 = e5.conditions) || void 0 === r5 || null === (n4 = r5.events) || void 0 === n4 || null === (o4 = n4.values) || void 0 === o4 ? void 0 : o4.length) > 0 || (null === (a3 = e5.conditions) || void 0 === a3 ? void 0 : a3.actions) && (null === (l3 = e5.conditions) || void 0 === l3 || null === (u3 = l3.actions) || void 0 === u3 ? void 0 : u3.values) && (null === (c3 = e5.conditions) || void 0 === c3 || null === (d3 = c3.actions) || void 0 === d3 || null === (h3 = d3.values) || void 0 === h3 ? void 0 : h3.length) > 0;
            });
            n3.length > 0 && (null === (s3 = this._surveyEventReceiver) || void 0 === s3 || s3.register(n3));
            return null === (i5 = this.instance.persistence) || void 0 === i5 || i5.register({ [Ie]: r4 }), e4(r4);
          } });
        }
        getActiveMatchingSurveys(e4) {
          var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          this.getSurveys((t5) => {
            var i4, s3 = t5.filter((e5) => !(!e5.start_date || e5.end_date)).filter((e5) => {
              var t6, i5, s4, r5;
              if (!e5.conditions)
                return true;
              var n4 = null === (t6 = e5.conditions) || void 0 === t6 || !t6.url || ln[null !== (i5 = null === (s4 = e5.conditions) || void 0 === s4 ? void 0 : s4.urlMatchType) && void 0 !== i5 ? i5 : "icontains"](e5.conditions.url), a3 = null === (r5 = e5.conditions) || void 0 === r5 || !r5.selector || (null == o2 ? void 0 : o2.querySelector(e5.conditions.selector));
              return n4 && a3;
            }), r4 = null === (i4 = this._surveyEventReceiver) || void 0 === i4 ? void 0 : i4.getSurveys(), n3 = s3.filter((e5) => {
              var t6, i5, s4, n4, o4, a3, l3, u3, c3, d3, h3;
              if (!(e5.linked_flag_key || e5.targeting_flag_key || e5.internal_targeting_flag_key || null !== (t6 = e5.feature_flag_keys) && void 0 !== t6 && t6.length))
                return true;
              var _3 = !e5.linked_flag_key || this.instance.featureFlags.isFeatureEnabled(e5.linked_flag_key), p3 = !e5.targeting_flag_key || this.instance.featureFlags.isFeatureEnabled(e5.targeting_flag_key), v3 = (null === (i5 = e5.conditions) || void 0 === i5 ? void 0 : i5.events) && (null === (s4 = e5.conditions) || void 0 === s4 || null === (n4 = s4.events) || void 0 === n4 ? void 0 : n4.values) && (null === (o4 = e5.conditions) || void 0 === o4 || null === (a3 = o4.events) || void 0 === a3 ? void 0 : a3.values.length) > 0, g3 = (null === (l3 = e5.conditions) || void 0 === l3 ? void 0 : l3.actions) && (null === (u3 = e5.conditions) || void 0 === u3 || null === (c3 = u3.actions) || void 0 === c3 ? void 0 : c3.values) && (null === (d3 = e5.conditions) || void 0 === d3 || null === (h3 = d3.actions) || void 0 === h3 ? void 0 : h3.values.length) > 0, f3 = !v3 && !g3 || (null == r4 ? void 0 : r4.includes(e5.id)), m3 = this._canActivateRepeatedly(e5), b3 = !(e5.internal_targeting_flag_key && !m3) || this.instance.featureFlags.isFeatureEnabled(e5.internal_targeting_flag_key), y3 = this.checkFlags(e5);
              return _3 && p3 && b3 && f3 && y3;
            });
            return e4(n3);
          }, t4);
        }
        checkFlags(e4) {
          var t4;
          return null === (t4 = e4.feature_flag_keys) || void 0 === t4 || !t4.length || e4.feature_flag_keys.every((e5) => {
            var { key: t5, value: i4 } = e5;
            return !t5 || !i4 || this.instance.featureFlags.isFeatureEnabled(i4);
          });
        }
        getNextSurveyStep(e4, t4, i4) {
          var s3, r4 = e4.questions[t4], n3 = t4 + 1;
          if (null === (s3 = r4.branching) || void 0 === s3 || !s3.type)
            return t4 === e4.questions.length - 1 ? br.End : n3;
          if (r4.branching.type === br.End)
            return br.End;
          if (r4.branching.type === br.SpecificQuestion) {
            if (Number.isInteger(r4.branching.index))
              return r4.branching.index;
          } else if (r4.branching.type === br.ResponseBased) {
            if (r4.type === mr.SingleChoice) {
              var o4, a3, l3 = r4.choices.indexOf("".concat(i4));
              if (null !== (o4 = r4.branching) && void 0 !== o4 && null !== (a3 = o4.responseValues) && void 0 !== a3 && a3.hasOwnProperty(l3)) {
                var u3 = r4.branching.responseValues[l3];
                return Number.isInteger(u3) ? u3 : u3 === br.End ? br.End : n3;
              }
            } else if (r4.type === mr.Rating) {
              var c3, d3;
              if ("number" != typeof i4 || !Number.isInteger(i4))
                throw new Error("The response type must be an integer");
              var h3 = function(e5, t5) {
                if (3 === t5) {
                  if (e5 < 1 || e5 > 3)
                    throw new Error("The response must be in range 1-3");
                  return 1 === e5 ? "negative" : 2 === e5 ? "neutral" : "positive";
                }
                if (5 === t5) {
                  if (e5 < 1 || e5 > 5)
                    throw new Error("The response must be in range 1-5");
                  return e5 <= 2 ? "negative" : 3 === e5 ? "neutral" : "positive";
                }
                if (7 === t5) {
                  if (e5 < 1 || e5 > 7)
                    throw new Error("The response must be in range 1-7");
                  return e5 <= 3 ? "negative" : 4 === e5 ? "neutral" : "positive";
                }
                if (10 === t5) {
                  if (e5 < 0 || e5 > 10)
                    throw new Error("The response must be in range 0-10");
                  return e5 <= 6 ? "detractors" : e5 <= 8 ? "passives" : "promoters";
                }
                throw new Error("The scale must be one of: 3, 5, 7, 10");
              }(i4, r4.scale);
              if (null !== (c3 = r4.branching) && void 0 !== c3 && null !== (d3 = c3.responseValues) && void 0 !== d3 && d3.hasOwnProperty(h3)) {
                var _3 = r4.branching.responseValues[h3];
                return Number.isInteger(_3) ? _3 : _3 === br.End ? br.End : n3;
              }
            }
            return n3;
          }
          return X.warn(an, "Falling back to next question index due to unexpected branching type"), n3;
        }
        _canActivateRepeatedly(e4) {
          var t4;
          return j(null === (t4 = h.__PosthogExtensions__) || void 0 === t4 ? void 0 : t4.canActivateRepeatedly) ? (X.warn(an, "canActivateRepeatedly is not defined, must init before calling"), false) : h.__PosthogExtensions__.canActivateRepeatedly(e4);
        }
        canRenderSurvey(e4) {
          j(this._surveyManager) ? X.warn(an, "canActivateRepeatedly is not defined, must init before calling") : this.getSurveys((t4) => {
            var i4 = t4.filter((t5) => t5.id === e4)[0];
            this._surveyManager.canRenderSurvey(i4);
          });
        }
        renderSurvey(e4, t4) {
          j(this._surveyManager) ? X.warn(an, "canActivateRepeatedly is not defined, must init before calling") : this.getSurveys((i4) => {
            var s3 = i4.filter((t5) => t5.id === e4)[0];
            this._surveyManager.renderSurvey(s3, null == o2 ? void 0 : o2.querySelector(t4));
          });
        }
      };
      cn = class {
        constructor(e4) {
          var t4, i4;
          te(this, "serverLimits", {}), te(this, "lastEventRateLimited", false), te(this, "checkForLimiting", (e5) => {
            var t5 = e5.text;
            if (t5 && t5.length)
              try {
                (JSON.parse(t5).quota_limited || []).forEach((e6) => {
                  X.info("[RateLimiter] ".concat(e6 || "events", " is quota limited.")), this.serverLimits[e6] = (/* @__PURE__ */ new Date()).getTime() + 6e4;
                });
              } catch (e6) {
                return void X.warn('[RateLimiter] could not rate limit - continuing. Error: "'.concat(null == e6 ? void 0 : e6.message, '"'), { text: t5 });
              }
          }), this.instance = e4, this.captureEventsPerSecond = (null === (t4 = e4.config.rate_limiting) || void 0 === t4 ? void 0 : t4.events_per_second) || 10, this.captureEventsBurstLimit = Math.max((null === (i4 = e4.config.rate_limiting) || void 0 === i4 ? void 0 : i4.events_burst_limit) || 10 * this.captureEventsPerSecond, this.captureEventsPerSecond), this.lastEventRateLimited = this.clientRateLimitContext(true).isRateLimited;
        }
        clientRateLimitContext() {
          var e4, t4, i4, s3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = (/* @__PURE__ */ new Date()).getTime(), n3 = null !== (e4 = null === (t4 = this.instance.persistence) || void 0 === t4 ? void 0 : t4.get_property(Te)) && void 0 !== e4 ? e4 : { tokens: this.captureEventsBurstLimit, last: r4 };
          n3.tokens += (r4 - n3.last) / 1e3 * this.captureEventsPerSecond, n3.last = r4, n3.tokens > this.captureEventsBurstLimit && (n3.tokens = this.captureEventsBurstLimit);
          var o4 = n3.tokens < 1;
          return o4 || s3 || (n3.tokens = Math.max(0, n3.tokens - 1)), !o4 || this.lastEventRateLimited || s3 || this.instance.capture("$$client_ingestion_warning", { $$client_ingestion_warning_message: "posthog-js client rate limited. Config is set to ".concat(this.captureEventsPerSecond, " events per second and ").concat(this.captureEventsBurstLimit, " events burst limit.") }, { skip_client_rate_limiting: true }), this.lastEventRateLimited = o4, null === (i4 = this.instance.persistence) || void 0 === i4 || i4.set_property(Te, n3), { isRateLimited: o4, remainingTokens: n3.tokens };
        }
        isServerRateLimited(e4) {
          var t4 = this.serverLimits[e4 || "events"] || false;
          return false !== t4 && (/* @__PURE__ */ new Date()).getTime() < t4;
        }
      };
      dn = () => ee({ initialPathName: (null == a ? void 0 : a.pathname) || "", referringDomain: _i.referringDomain() }, _i.campaignParams());
      hn = class {
        constructor(e4, t4, i4) {
          te(this, "_onSessionIdCallback", (e5) => {
            var t5 = this._getStoredProps();
            if (!t5 || t5.sessionId !== e5) {
              var i5 = { sessionId: e5, props: this._sessionSourceParamGenerator() };
              this._persistence.register({ [Ce]: i5 });
            }
          }), this._sessionIdManager = e4, this._persistence = t4, this._sessionSourceParamGenerator = i4 || dn, this._sessionIdManager.onSessionId(this._onSessionIdCallback);
        }
        _getStoredProps() {
          return this._persistence.props[Ce];
        }
        getSessionProps() {
          var e4, t4 = null === (e4 = this._getStoredProps()) || void 0 === e4 ? void 0 : e4.props;
          return t4 ? { $client_session_initial_referring_host: t4.referringDomain, $client_session_initial_pathname: t4.initialPathName, $client_session_initial_utm_source: t4.utm_source, $client_session_initial_utm_campaign: t4.utm_campaign, $client_session_initial_utm_medium: t4.utm_medium, $client_session_initial_utm_content: t4.utm_content, $client_session_initial_utm_term: t4.utm_term } : {};
        }
      };
      _n = ["ahrefsbot", "ahrefssiteaudit", "applebot", "baiduspider", "bingbot", "bingpreview", "bot.htm", "bot.php", "crawler", "deepscan", "duckduckbot", "facebookexternal", "facebookcatalog", "gptbot", "http://yandex.com/bots", "hubspot", "ia_archiver", "linkedinbot", "mj12bot", "msnbot", "nessus", "petalbot", "pinterest", "prerender", "rogerbot", "screaming frog", "semrushbot", "sitebulb", "slurp", "turnitin", "twitterbot", "vercelbot", "yahoo! slurp", "yandexbot", "headlesschrome", "cypress", "Google-HotelAdsVerifier", "adsbot-google", "apis-google", "duplexweb-google", "feedfetcher-google", "google favicon", "google web preview", "google-read-aloud", "googlebot", "googleweblight", "mediapartners-google", "storebot-google", "Bytespider;"];
      pn = function(e4, t4) {
        if (!e4)
          return false;
        var i4 = e4.toLowerCase();
        return _n.concat(t4 || []).some((e5) => {
          var t5 = e5.toLowerCase();
          return -1 !== i4.indexOf(t5);
        });
      };
      vn = function(e4, t4) {
        if (!e4)
          return false;
        var i4 = e4.userAgent;
        if (i4 && pn(i4, t4))
          return true;
        try {
          var s3 = null == e4 ? void 0 : e4.userAgentData;
          if (null != s3 && s3.brands && s3.brands.some((e5) => pn(null == e5 ? void 0 : e5.brand, t4)))
            return true;
        } catch (e5) {
        }
        return !!e4.webdriver;
      };
      gn = class {
        constructor() {
          this.clicks = [];
        }
        isRageClick(e4, t4, i4) {
          var s3 = this.clicks[this.clicks.length - 1];
          if (s3 && Math.abs(e4 - s3.x) + Math.abs(t4 - s3.y) < 30 && i4 - s3.timestamp < 1e3) {
            if (this.clicks.push({ x: e4, y: t4, timestamp: i4 }), 3 === this.clicks.length)
              return true;
          } else
            this.clicks = [{ x: e4, y: t4, timestamp: i4 }];
          return false;
        }
      };
      fn = "[Dead Clicks]";
      mn = () => true;
      bn = (e4) => {
        var t4, i4 = !(null === (t4 = e4.instance.persistence) || void 0 === t4 || !t4.get_property(ce)), s3 = e4.instance.config.capture_dead_clicks;
        return G(s3) ? s3 : i4;
      };
      yn = class {
        get lazyLoadedDeadClicksAutocapture() {
          return this._lazyLoadedDeadClicksAutocapture;
        }
        constructor(e4, t4, i4) {
          this.instance = e4, this.isEnabled = t4, this.onCapture = i4, this.startIfEnabled();
        }
        afterDecideResponse(e4) {
          this.instance.persistence && this.instance.persistence.register({ [ce]: null == e4 ? void 0 : e4.captureDeadClicks }), this.startIfEnabled();
        }
        startIfEnabled() {
          this.isEnabled(this) && this.loadScript(() => {
            this.start();
          });
        }
        loadScript(e4) {
          var t4, i4, s3;
          null !== (t4 = h.__PosthogExtensions__) && void 0 !== t4 && t4.initDeadClicksAutocapture && e4(), null === (i4 = h.__PosthogExtensions__) || void 0 === i4 || null === (s3 = i4.loadExternalDependency) || void 0 === s3 || s3.call(i4, this.instance, "dead-clicks-autocapture", (t5) => {
            t5 ? X.error(fn + " failed to load script", t5) : e4();
          });
        }
        start() {
          var e4;
          if (o2) {
            if (!this._lazyLoadedDeadClicksAutocapture && null !== (e4 = h.__PosthogExtensions__) && void 0 !== e4 && e4.initDeadClicksAutocapture) {
              var t4 = q(this.instance.config.capture_dead_clicks) ? this.instance.config.capture_dead_clicks : {};
              t4.__onCapture = this.onCapture, this._lazyLoadedDeadClicksAutocapture = h.__PosthogExtensions__.initDeadClicksAutocapture(this.instance, t4), this._lazyLoadedDeadClicksAutocapture.start(o2), X.info("".concat(fn, " starting..."));
            }
          } else
            X.error(fn + " `document` not found. Cannot start.");
        }
        stop() {
          this._lazyLoadedDeadClicksAutocapture && (this._lazyLoadedDeadClicksAutocapture.stop(), this._lazyLoadedDeadClicksAutocapture = void 0, X.info("".concat(fn, " stopping...")));
        }
      };
      wn = class {
        constructor(t4) {
          var i4;
          te(this, "rageclicks", new gn()), te(this, "_enabledServerSide", false), te(this, "_initialized", false), te(this, "_flushInterval", null), this.instance = t4, this._enabledServerSide = !(null === (i4 = this.instance.persistence) || void 0 === i4 || !i4.props[ae]), null == e2 || e2.addEventListener("beforeunload", () => {
            this.flush();
          });
        }
        get flushIntervalMilliseconds() {
          var e4 = 5e3;
          return q(this.instance.config.capture_heatmaps) && this.instance.config.capture_heatmaps.flush_interval_milliseconds && (e4 = this.instance.config.capture_heatmaps.flush_interval_milliseconds), e4;
        }
        get isEnabled() {
          return H(this.instance.config.capture_heatmaps) ? H(this.instance.config.enable_heatmaps) ? this._enabledServerSide : this.instance.config.enable_heatmaps : false !== this.instance.config.capture_heatmaps;
        }
        startIfEnabled() {
          if (this.isEnabled) {
            if (this._initialized)
              return;
            X.info("[heatmaps] starting..."), this._setupListeners(), this._flushInterval = setInterval(this.flush.bind(this), this.flushIntervalMilliseconds);
          } else {
            var e4, t4;
            clearInterval(null !== (e4 = this._flushInterval) && void 0 !== e4 ? e4 : void 0), null === (t4 = this.deadClicksCapture) || void 0 === t4 || t4.stop(), this.getAndClearBuffer();
          }
        }
        afterDecideResponse(e4) {
          var t4 = !!e4.heatmaps;
          this.instance.persistence && this.instance.persistence.register({ [ae]: t4 }), this._enabledServerSide = t4, this.startIfEnabled();
        }
        getAndClearBuffer() {
          var e4 = this.buffer;
          return this.buffer = void 0, e4;
        }
        _onDeadClick(e4) {
          this._onClick(e4.originalEvent, "deadclick");
        }
        _setupListeners() {
          e2 && o2 && (P(o2, "click", (t4) => this._onClick(t4 || (null == e2 ? void 0 : e2.event)), false, true), P(o2, "mousemove", (t4) => this._onMouseMove(t4 || (null == e2 ? void 0 : e2.event)), false, true), this.deadClicksCapture = new yn(this.instance, mn, this._onDeadClick.bind(this)), this.deadClicksCapture.startIfEnabled(), this._initialized = true);
        }
        _getProperties(t4, i4) {
          var s3 = this.instance.scrollManager.scrollY(), r4 = this.instance.scrollManager.scrollX(), n3 = this.instance.scrollManager.scrollElement(), o4 = function(t5, i5, s4) {
            for (var r5 = t5; r5 && wi(r5) && !Si(r5, "body"); ) {
              if (r5 === s4)
                return false;
              if (b(i5, null == e2 ? void 0 : e2.getComputedStyle(r5).position))
                return true;
              r5 = $i(r5);
            }
            return false;
          }(Ci(t4), ["fixed", "sticky"], n3);
          return { x: t4.clientX + (o4 ? 0 : r4), y: t4.clientY + (o4 ? 0 : s3), target_fixed: o4, type: i4 };
        }
        _onClick(e4) {
          var t4, i4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "click";
          if (!yi(e4.target)) {
            var s3 = this._getProperties(e4, i4);
            null !== (t4 = this.rageclicks) && void 0 !== t4 && t4.isRageClick(e4.clientX, e4.clientY, (/* @__PURE__ */ new Date()).getTime()) && this._capture(ee(ee({}, s3), {}, { type: "rageclick" })), this._capture(s3);
          }
        }
        _onMouseMove(e4) {
          yi(e4.target) || (clearTimeout(this._mouseMoveTimeout), this._mouseMoveTimeout = setTimeout(() => {
            this._capture(this._getProperties(e4, "mousemove"));
          }, 500));
        }
        _capture(t4) {
          if (e2) {
            var i4 = e2.location.href;
            this.buffer = this.buffer || {}, this.buffer[i4] || (this.buffer[i4] = []), this.buffer[i4].push(t4);
          }
        }
        flush() {
          this.buffer && !B(this.buffer) && this.instance.capture("$$heatmap", { $heatmap_data: this.getAndClearBuffer() });
        }
      };
      Sn = class {
        constructor(e4) {
          te(this, "_updateScrollData", () => {
            var e5, t4, i4, s3;
            this.context || (this.context = {});
            var r4 = this.scrollElement(), n3 = this.scrollY(), o4 = r4 ? Math.max(0, r4.scrollHeight - r4.clientHeight) : 0, a3 = n3 + ((null == r4 ? void 0 : r4.clientHeight) || 0), l3 = (null == r4 ? void 0 : r4.scrollHeight) || 0;
            this.context.lastScrollY = Math.ceil(n3), this.context.maxScrollY = Math.max(n3, null !== (e5 = this.context.maxScrollY) && void 0 !== e5 ? e5 : 0), this.context.maxScrollHeight = Math.max(o4, null !== (t4 = this.context.maxScrollHeight) && void 0 !== t4 ? t4 : 0), this.context.lastContentY = a3, this.context.maxContentY = Math.max(a3, null !== (i4 = this.context.maxContentY) && void 0 !== i4 ? i4 : 0), this.context.maxContentHeight = Math.max(l3, null !== (s3 = this.context.maxContentHeight) && void 0 !== s3 ? s3 : 0);
          }), this.instance = e4;
        }
        getContext() {
          return this.context;
        }
        resetContext() {
          var e4 = this.context;
          return setTimeout(this._updateScrollData, 0), e4;
        }
        startMeasuringScrollPosition() {
          null == e2 || e2.addEventListener("scroll", this._updateScrollData, true), null == e2 || e2.addEventListener("scrollend", this._updateScrollData, true), null == e2 || e2.addEventListener("resize", this._updateScrollData);
        }
        scrollElement() {
          if (!this.instance.config.scroll_root_selector)
            return null == e2 ? void 0 : e2.document.documentElement;
          var t4 = D(this.instance.config.scroll_root_selector) ? this.instance.config.scroll_root_selector : [this.instance.config.scroll_root_selector];
          for (var i4 of t4) {
            var s3 = null == e2 ? void 0 : e2.document.querySelector(i4);
            if (s3)
              return s3;
          }
        }
        scrollY() {
          if (this.instance.config.scroll_root_selector) {
            var t4 = this.scrollElement();
            return t4 && t4.scrollTop || 0;
          }
          return e2 && (e2.scrollY || e2.pageYOffset || e2.document.documentElement.scrollTop) || 0;
        }
        scrollX() {
          if (this.instance.config.scroll_root_selector) {
            var t4 = this.scrollElement();
            return t4 && t4.scrollLeft || 0;
          }
          return e2 && (e2.scrollX || e2.pageXOffset || e2.document.documentElement.scrollLeft) || 0;
        }
      };
      Pn = class {
        constructor(e4) {
          te(this, "_initialized", false), te(this, "_isDisabledServerSide", null), te(this, "rageclicks", new gn()), te(this, "_elementsChainAsString", false), this.instance = e4, this._elementSelectors = null;
        }
        get config() {
          var e4, t4, i4 = q(this.instance.config.autocapture) ? this.instance.config.autocapture : {};
          return i4.url_allowlist = null === (e4 = i4.url_allowlist) || void 0 === e4 ? void 0 : e4.map((e5) => new RegExp(e5)), i4.url_ignorelist = null === (t4 = i4.url_ignorelist) || void 0 === t4 ? void 0 : t4.map((e5) => new RegExp(e5)), i4;
        }
        _addDomEventHandlers() {
          if (this.isBrowserSupported()) {
            if (e2 && o2) {
              var t4 = (t5) => {
                t5 = t5 || (null == e2 ? void 0 : e2.event);
                try {
                  this._captureEvent(t5);
                } catch (e4) {
                  X.error("Failed to capture event", e4);
                }
              }, i4 = (t5) => {
                t5 = t5 || (null == e2 ? void 0 : e2.event), this._captureEvent(t5, C);
              };
              P(o2, "submit", t4, false, true), P(o2, "change", t4, false, true), P(o2, "click", t4, false, true), this.config.capture_copied_text && (P(o2, "copy", i4, false, true), P(o2, "cut", i4, false, true));
            }
          } else
            X.info("Disabling Automatic Event Collection because this browser is not supported");
        }
        startIfEnabled() {
          this.isEnabled && !this._initialized && (this._addDomEventHandlers(), this._initialized = true);
        }
        afterDecideResponse(e4) {
          e4.elementsChainAsString && (this._elementsChainAsString = e4.elementsChainAsString), this.instance.persistence && this.instance.persistence.register({ [oe]: !!e4.autocapture_opt_out }), this._isDisabledServerSide = !!e4.autocapture_opt_out, this.startIfEnabled();
        }
        setElementSelectors(e4) {
          this._elementSelectors = e4;
        }
        getElementSelectors(e4) {
          var t4, i4 = [];
          return null === (t4 = this._elementSelectors) || void 0 === t4 || t4.forEach((t5) => {
            var s3 = null == o2 ? void 0 : o2.querySelectorAll(t5);
            null == s3 || s3.forEach((s4) => {
              e4 === s4 && i4.push(t5);
            });
          }), i4;
        }
        get isEnabled() {
          var e4, t4, i4 = null === (e4 = this.instance.persistence) || void 0 === e4 ? void 0 : e4.props[oe], s3 = this._isDisabledServerSide;
          if (z(s3) && !G(i4) && !this.instance.config.advanced_disable_decide)
            return false;
          var r4 = null !== (t4 = this._isDisabledServerSide) && void 0 !== t4 ? t4 : !!i4;
          return !!this.instance.config.autocapture && !r4;
        }
        _captureEvent(t4) {
          var i4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "$autocapture";
          if (this.isEnabled) {
            var s3, r4 = Ci(t4);
            if (Ei(r4) && (r4 = r4.parentNode || null), "$autocapture" === i4 && "click" === t4.type && t4 instanceof MouseEvent)
              this.instance.config.rageclick && null !== (s3 = this.rageclicks) && void 0 !== s3 && s3.isRageClick(t4.clientX, t4.clientY, (/* @__PURE__ */ new Date()).getTime()) && this._captureEvent(t4, "$rageclick");
            var n3 = i4 === C;
            if (r4 && Mi(r4, t4, this.config, n3, n3 ? ["copy", "cut"] : void 0)) {
              var { props: o4, explicitNoCapture: a3 } = In(r4, { e: t4, maskAllElementAttributes: this.instance.config.mask_all_element_attributes, maskAllText: this.instance.config.mask_all_text, elementAttributeIgnoreList: this.config.element_attribute_ignorelist, elementsChainAsString: this._elementsChainAsString });
              if (a3)
                return false;
              var l3 = this.getElementSelectors(r4);
              if (l3 && l3.length > 0 && (o4.$element_selectors = l3), i4 === C) {
                var u3, c3 = Fi(null == e2 || null === (u3 = e2.getSelection()) || void 0 === u3 ? void 0 : u3.toString()), d3 = t4.type || "clipboard";
                if (!c3)
                  return false;
                o4.$selected_content = c3, o4.$copy_type = d3;
              }
              return this.instance.capture(i4, o4), true;
            }
          }
        }
        isBrowserSupported() {
          return N(null == o2 ? void 0 : o2.querySelectorAll);
        }
      };
      Fn = class {
        constructor(e4) {
          te(this, "_restoreXHRPatch", void 0), te(this, "_restoreFetchPatch", void 0), te(this, "_startCapturing", () => {
            var e5, t4, i4, s3;
            H(this._restoreXHRPatch) && (null === (e5 = h.__PosthogExtensions__) || void 0 === e5 || null === (t4 = e5.tracingHeadersPatchFns) || void 0 === t4 || t4._patchXHR(this.instance.sessionManager));
            H(this._restoreFetchPatch) && (null === (i4 = h.__PosthogExtensions__) || void 0 === i4 || null === (s3 = i4.tracingHeadersPatchFns) || void 0 === s3 || s3._patchFetch(this.instance.sessionManager));
          }), this.instance = e4;
        }
        _loadScript(e4) {
          var t4, i4, s3;
          null !== (t4 = h.__PosthogExtensions__) && void 0 !== t4 && t4.tracingHeadersPatchFns && e4(), null === (i4 = h.__PosthogExtensions__) || void 0 === i4 || null === (s3 = i4.loadExternalDependency) || void 0 === s3 || s3.call(i4, this.instance, "tracing-headers", (t5) => {
            if (t5)
              return X.error("[TRACING-HEADERS] failed to load script", t5);
            e4();
          });
        }
        startIfEnabledOrStop() {
          var e4, t4;
          this.instance.config.__add_tracing_headers ? this._loadScript(this._startCapturing) : (null === (e4 = this._restoreXHRPatch) || void 0 === e4 || e4.call(this), null === (t4 = this._restoreFetchPatch) || void 0 === t4 || t4.call(this), this._restoreXHRPatch = void 0, this._restoreFetchPatch = void 0);
        }
      };
      !function(e4) {
        e4[e4.PENDING = -1] = "PENDING", e4[e4.DENIED = 0] = "DENIED", e4[e4.GRANTED = 1] = "GRANTED";
      }(Rn || (Rn = {}));
      Cn = class {
        constructor(e4) {
          this.instance = e4;
        }
        get config() {
          return this.instance.config;
        }
        get consent() {
          return this.getDnt() ? Rn.DENIED : this.storedConsent;
        }
        isOptedOut() {
          return this.consent === Rn.DENIED || this.consent === Rn.PENDING && this.config.opt_out_capturing_by_default;
        }
        isOptedIn() {
          return !this.isOptedOut();
        }
        optInOut(e4) {
          this.storage.set(this.storageKey, e4 ? 1 : 0, this.config.cookie_expiration, this.config.cross_subdomain_cookie, this.config.secure_cookie);
        }
        reset() {
          this.storage.remove(this.storageKey, this.config.cross_subdomain_cookie);
        }
        get storageKey() {
          var { token: e4, opt_out_capturing_cookie_prefix: t4 } = this.instance.config;
          return (t4 || "__ph_opt_in_out_") + e4;
        }
        get storedConsent() {
          var e4 = this.storage.get(this.storageKey);
          return "1" === e4 ? Rn.GRANTED : "0" === e4 ? Rn.DENIED : Rn.PENDING;
        }
        get storage() {
          if (!this._storage) {
            var e4 = this.config.opt_out_capturing_persistence_type;
            this._storage = "localStorage" === e4 ? st : tt;
            var t4 = "localStorage" === e4 ? tt : st;
            t4.get(this.storageKey) && (this._storage.get(this.storageKey) || this.optInOut("1" === t4.get(this.storageKey)), t4.remove(this.storageKey, this.config.cross_subdomain_cookie));
          }
          return this._storage;
        }
        getDnt() {
          return !!this.config.respect_dnt && !!F([null == n ? void 0 : n.doNotTrack, null == n ? void 0 : n.msDoNotTrack, h.doNotTrack], (e4) => b([true, 1, "1", "yes"], e4));
        }
      };
      Tn = "[Exception Autocapture]";
      $n = class {
        constructor(t4) {
          var i4;
          te(this, "originalOnUnhandledRejectionHandler", void 0), te(this, "startCapturing", () => {
            var t5, i5, s3, r4;
            if (e2 && this.isEnabled && !this.hasHandlers && !this.isCapturing) {
              var n3 = null === (t5 = h.__PosthogExtensions__) || void 0 === t5 || null === (i5 = t5.errorWrappingFunctions) || void 0 === i5 ? void 0 : i5.wrapOnError, o4 = null === (s3 = h.__PosthogExtensions__) || void 0 === s3 || null === (r4 = s3.errorWrappingFunctions) || void 0 === r4 ? void 0 : r4.wrapUnhandledRejection;
              if (n3 && o4)
                try {
                  this.unwrapOnError = n3(this.captureException.bind(this)), this.unwrapUnhandledRejection = o4(this.captureException.bind(this));
                } catch (e4) {
                  X.error(Tn + " failed to start", e4), this.stopCapturing();
                }
              else
                X.error(Tn + " failed to load error wrapping functions - cannot start");
            }
          }), this.instance = t4, this.remoteEnabled = !(null === (i4 = this.instance.persistence) || void 0 === i4 || !i4.props[le]), this.startIfEnabled();
        }
        get isEnabled() {
          var e4;
          return null !== (e4 = this.remoteEnabled) && void 0 !== e4 && e4;
        }
        get isCapturing() {
          var t4;
          return !(null == e2 || null === (t4 = e2.onerror) || void 0 === t4 || !t4.__POSTHOG_INSTRUMENTED__);
        }
        get hasHandlers() {
          return this.originalOnUnhandledRejectionHandler || this.unwrapOnError;
        }
        startIfEnabled() {
          this.isEnabled && !this.isCapturing && (X.info(Tn + " enabled, starting..."), this.loadScript(this.startCapturing));
        }
        loadScript(e4) {
          var t4, i4;
          this.hasHandlers && e4(), null === (t4 = h.__PosthogExtensions__) || void 0 === t4 || null === (i4 = t4.loadExternalDependency) || void 0 === i4 || i4.call(t4, this.instance, "exception-autocapture", (t5) => {
            if (t5)
              return X.error(Tn + " failed to load script", t5);
            e4();
          });
        }
        stopCapturing() {
          var e4, t4;
          null === (e4 = this.unwrapOnError) || void 0 === e4 || e4.call(this), null === (t4 = this.unwrapUnhandledRejection) || void 0 === t4 || t4.call(this);
        }
        afterDecideResponse(e4) {
          var t4 = e4.autocaptureExceptions;
          this.remoteEnabled = !!t4 || false, this.instance.persistence && this.instance.persistence.register({ [le]: this.remoteEnabled }), this.startIfEnabled();
        }
        captureException(e4) {
          var t4 = this.instance.requestRouter.endpointFor("ui");
          e4.$exception_personURL = "".concat(t4, "/project/").concat(this.instance.config.token, "/person/").concat(this.instance.get_distinct_id()), this.instance.exceptions.sendExceptionEvent(e4);
        }
      };
      Mn = 9e5;
      An = "[Web Vitals]";
      On = class {
        constructor(e4) {
          var t4;
          te(this, "_enabledServerSide", false), te(this, "_initialized", false), te(this, "buffer", { url: void 0, metrics: [], firstMetricTimestamp: void 0 }), te(this, "_flushToCapture", () => {
            clearTimeout(this._delayedFlushTimer), 0 !== this.buffer.metrics.length && (this.instance.capture("$web_vitals", this.buffer.metrics.reduce((e5, t5) => ee(ee({}, e5), {}, { ["$web_vitals_".concat(t5.name, "_event")]: ee({}, t5), ["$web_vitals_".concat(t5.name, "_value")]: t5.value }), {})), this.buffer = { url: void 0, metrics: [], firstMetricTimestamp: void 0 });
          }), te(this, "_addToBuffer", (e5) => {
            var t5, i4 = null === (t5 = this.instance.sessionManager) || void 0 === t5 ? void 0 : t5.checkAndGetSessionAndWindowId(true);
            if (H(i4))
              X.error(An + "Could not read session ID. Dropping metrics!");
            else {
              this.buffer = this.buffer || { url: void 0, metrics: [], firstMetricTimestamp: void 0 };
              var s3 = this._currentURL();
              if (!H(s3))
                if (j(null == e5 ? void 0 : e5.name) || j(null == e5 ? void 0 : e5.value))
                  X.error(An + "Invalid metric received", e5);
                else if (this._maxAllowedValue && e5.value >= this._maxAllowedValue)
                  X.error(An + "Ignoring metric with value >= " + this._maxAllowedValue, e5);
                else
                  this.buffer.url !== s3 && (this._flushToCapture(), this._delayedFlushTimer = setTimeout(this._flushToCapture, this.flushToCaptureTimeoutMs)), H(this.buffer.url) && (this.buffer.url = s3), this.buffer.firstMetricTimestamp = H(this.buffer.firstMetricTimestamp) ? Date.now() : this.buffer.firstMetricTimestamp, e5.attribution && e5.attribution.interactionTargetElement && (e5.attribution.interactionTargetElement = void 0), this.buffer.metrics.push(ee(ee({}, e5), {}, { $current_url: s3, $session_id: i4.sessionId, $window_id: i4.windowId, timestamp: Date.now() })), this.buffer.metrics.length === this.allowedMetrics.length && this._flushToCapture();
            }
          }), te(this, "_startCapturing", () => {
            var e5, t5, i4, s3, r4 = h.__PosthogExtensions__;
            H(r4) || H(r4.postHogWebVitalsCallbacks) || ({ onLCP: e5, onCLS: t5, onFCP: i4, onINP: s3 } = r4.postHogWebVitalsCallbacks), e5 && t5 && i4 && s3 ? (this.allowedMetrics.indexOf("LCP") > -1 && e5(this._addToBuffer.bind(this)), this.allowedMetrics.indexOf("CLS") > -1 && t5(this._addToBuffer.bind(this)), this.allowedMetrics.indexOf("FCP") > -1 && i4(this._addToBuffer.bind(this)), this.allowedMetrics.indexOf("INP") > -1 && s3(this._addToBuffer.bind(this)), this._initialized = true) : X.error(An + "web vitals callbacks not loaded - not starting");
          }), this.instance = e4, this._enabledServerSide = !(null === (t4 = this.instance.persistence) || void 0 === t4 || !t4.props[ue]), this.startIfEnabled();
        }
        get allowedMetrics() {
          var e4, t4, i4 = q(this.instance.config.capture_performance) ? null === (e4 = this.instance.config.capture_performance) || void 0 === e4 ? void 0 : e4.web_vitals_allowed_metrics : void 0;
          return H(i4) ? (null === (t4 = this.instance.persistence) || void 0 === t4 ? void 0 : t4.props[de]) || ["CLS", "FCP", "INP", "LCP"] : i4;
        }
        get flushToCaptureTimeoutMs() {
          return (q(this.instance.config.capture_performance) ? this.instance.config.capture_performance.web_vitals_delayed_flush_ms : void 0) || 5e3;
        }
        get _maxAllowedValue() {
          var e4 = q(this.instance.config.capture_performance) && V(this.instance.config.capture_performance.__web_vitals_max_value) ? this.instance.config.capture_performance.__web_vitals_max_value : Mn;
          return 0 < e4 && e4 <= 6e4 ? Mn : e4;
        }
        get isEnabled() {
          var e4 = q(this.instance.config.capture_performance) ? this.instance.config.capture_performance.web_vitals : void 0;
          return G(e4) ? e4 : this._enabledServerSide;
        }
        startIfEnabled() {
          this.isEnabled && !this._initialized && (X.info(An + " enabled, starting..."), this.loadScript(this._startCapturing));
        }
        afterDecideResponse(e4) {
          var t4 = q(e4.capturePerformance) && !!e4.capturePerformance.web_vitals, i4 = q(e4.capturePerformance) ? e4.capturePerformance.web_vitals_allowed_metrics : void 0;
          this.instance.persistence && (this.instance.persistence.register({ [ue]: t4 }), this.instance.persistence.register({ [de]: i4 })), this._enabledServerSide = t4, this.startIfEnabled();
        }
        loadScript(e4) {
          var t4, i4, s3;
          null !== (t4 = h.__PosthogExtensions__) && void 0 !== t4 && t4.postHogWebVitalsCallbacks && e4(), null === (i4 = h.__PosthogExtensions__) || void 0 === i4 || null === (s3 = i4.loadExternalDependency) || void 0 === s3 || s3.call(i4, this.instance, "web-vitals", (t5) => {
            t5 ? X.error(An + " failed to load script", t5) : e4();
          });
        }
        _currentURL() {
          var t4 = e2 ? e2.location.href : void 0;
          return t4 || X.error(An + "Could not determine current URL"), t4;
        }
      };
      Ln = { icontains: (t4, i4) => !!e2 && i4.href.toLowerCase().indexOf(t4.toLowerCase()) > -1, not_icontains: (t4, i4) => !!e2 && -1 === i4.href.toLowerCase().indexOf(t4.toLowerCase()), regex: (t4, i4) => !!e2 && ht(i4.href, t4), not_regex: (t4, i4) => !!e2 && !ht(i4.href, t4), exact: (e4, t4) => t4.href === e4, is_not: (e4, t4) => t4.href !== e4 };
      Dn = class _Dn {
        constructor(e4) {
          var t4 = this;
          te(this, "getWebExperimentsAndEvaluateDisplayLogic", function() {
            var e5 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            t4.getWebExperiments((e6) => {
              _Dn.logInfo("retrieved web experiments from the server"), t4._flagToExperiments = /* @__PURE__ */ new Map(), e6.forEach((e7) => {
                if (e7.feature_flag_key && t4._featureFlags && t4._featureFlags[e7.feature_flag_key]) {
                  var i4;
                  if (t4._flagToExperiments)
                    _Dn.logInfo("setting flag key ", e7.feature_flag_key, " to web experiment ", e7), null === (i4 = t4._flagToExperiments) || void 0 === i4 || i4.set(e7.feature_flag_key, e7);
                  var s3 = t4._featureFlags[e7.feature_flag_key];
                  s3 && e7.variants[s3] && t4.applyTransforms(e7.name, s3, e7.variants[s3].transforms);
                } else if (e7.variants)
                  for (var r4 in e7.variants) {
                    var n3 = e7.variants[r4];
                    _Dn.matchesTestVariant(n3) && t4.applyTransforms(e7.name, r4, n3.transforms);
                  }
              });
            }, e5);
          }), this.instance = e4;
          this.instance.onFeatureFlags && this.instance.onFeatureFlags((e5) => {
            this.applyFeatureFlagChanges(e5);
          }), this._flagToExperiments = /* @__PURE__ */ new Map();
        }
        applyFeatureFlagChanges(e4) {
          j(this._flagToExperiments) || this.instance.config.disable_web_experiments || (_Dn.logInfo("applying feature flags", e4), e4.forEach((e5) => {
            var t4;
            if (this._flagToExperiments && null !== (t4 = this._flagToExperiments) && void 0 !== t4 && t4.has(e5)) {
              var i4, s3 = this.instance.getFeatureFlag(e5), r4 = null === (i4 = this._flagToExperiments) || void 0 === i4 ? void 0 : i4.get(e5);
              s3 && null != r4 && r4.variants[s3] && this.applyTransforms(r4.name, s3, r4.variants[s3].transforms);
            }
          }));
        }
        afterDecideResponse(e4) {
          this._is_bot() ? _Dn.logInfo("Refusing to render web experiment since the viewer is a likely bot") : (this._featureFlags = e4.featureFlags, this.loadIfEnabled(), this.previewWebExperiment());
        }
        previewWebExperiment() {
          var e4 = _Dn.getWindowLocation();
          if (null != e4 && e4.search) {
            var t4 = pt(null == e4 ? void 0 : e4.search, "__experiment_id"), i4 = pt(null == e4 ? void 0 : e4.search, "__experiment_variant");
            t4 && i4 && (_Dn.logInfo("previewing web experiments ".concat(t4, " && ").concat(i4)), this.getWebExperiments((e5) => {
              this.showPreviewWebExperiment(parseInt(t4), i4, e5);
            }, false, true));
          }
        }
        loadIfEnabled() {
          this.instance.config.disable_web_experiments || this.getWebExperimentsAndEvaluateDisplayLogic();
        }
        getWebExperiments(e4, t4, i4) {
          if (this.instance.config.disable_web_experiments && !i4)
            return e4([]);
          var s3 = this.instance.get_property("$web_experiments");
          if (s3 && !t4)
            return e4(s3);
          this.instance._send_request({ url: this.instance.requestRouter.endpointFor("api", "/api/web_experiments/?token=".concat(this.instance.config.token)), method: "GET", transport: "XHR", callback: (t5) => {
            if (200 !== t5.statusCode || !t5.json)
              return e4([]);
            var i5 = t5.json.experiments || [];
            return e4(i5);
          } });
        }
        showPreviewWebExperiment(e4, t4, i4) {
          var s3 = i4.filter((t5) => t5.id === e4);
          s3 && s3.length > 0 && (_Dn.logInfo("Previewing web experiment [".concat(s3[0].name, "] with variant [").concat(t4, "]")), this.applyTransforms(s3[0].name, t4, s3[0].variants[t4].transforms, true));
        }
        static matchesTestVariant(e4) {
          return !j(e4.conditions) && (_Dn.matchUrlConditions(e4) && _Dn.matchUTMConditions(e4));
        }
        static matchUrlConditions(e4) {
          var t4;
          if (j(e4.conditions) || j(null === (t4 = e4.conditions) || void 0 === t4 ? void 0 : t4.url))
            return true;
          var i4, s3, r4, n3 = _Dn.getWindowLocation();
          return !!n3 && (null === (i4 = e4.conditions) || void 0 === i4 || !i4.url || Ln[null !== (s3 = null === (r4 = e4.conditions) || void 0 === r4 ? void 0 : r4.urlMatchType) && void 0 !== s3 ? s3 : "icontains"](e4.conditions.url, n3));
        }
        static getWindowLocation() {
          return null == e2 ? void 0 : e2.location;
        }
        static matchUTMConditions(e4) {
          var t4;
          if (j(e4.conditions) || j(null === (t4 = e4.conditions) || void 0 === t4 ? void 0 : t4.utm))
            return true;
          var i4 = _i.campaignParams();
          if (i4.utm_source) {
            var s3, r4, n3, o4, a3, l3, u3, c3, d3, h3, _3, p3, v3, g3, f3, m3, b3 = null === (s3 = e4.conditions) || void 0 === s3 || null === (r4 = s3.utm) || void 0 === r4 || !r4.utm_campaign || (null === (n3 = e4.conditions) || void 0 === n3 || null === (o4 = n3.utm) || void 0 === o4 ? void 0 : o4.utm_campaign) == i4.utm_campaign, y3 = null === (a3 = e4.conditions) || void 0 === a3 || null === (l3 = a3.utm) || void 0 === l3 || !l3.utm_source || (null === (u3 = e4.conditions) || void 0 === u3 || null === (c3 = u3.utm) || void 0 === c3 ? void 0 : c3.utm_source) == i4.utm_source, w3 = null === (d3 = e4.conditions) || void 0 === d3 || null === (h3 = d3.utm) || void 0 === h3 || !h3.utm_medium || (null === (_3 = e4.conditions) || void 0 === _3 || null === (p3 = _3.utm) || void 0 === p3 ? void 0 : p3.utm_medium) == i4.utm_medium, S3 = null === (v3 = e4.conditions) || void 0 === v3 || null === (g3 = v3.utm) || void 0 === g3 || !g3.utm_term || (null === (f3 = e4.conditions) || void 0 === f3 || null === (m3 = f3.utm) || void 0 === m3 ? void 0 : m3.utm_term) == i4.utm_term;
            return b3 && w3 && S3 && y3;
          }
          return false;
        }
        static logInfo(e4) {
          for (var t4 = arguments.length, i4 = new Array(t4 > 1 ? t4 - 1 : 0), s3 = 1; s3 < t4; s3++)
            i4[s3 - 1] = arguments[s3];
          X.info("[WebExperiments] ".concat(e4), i4);
        }
        applyTransforms(e4, t4, i4, s3) {
          var r4;
          this._is_bot() ? _Dn.logInfo("Refusing to render web experiment since the viewer is a likely bot") : "control" !== t4 ? i4.forEach((i5) => {
            if (i5.selector) {
              var r5;
              _Dn.logInfo("applying transform of variant ".concat(t4, " for experiment ").concat(e4, " "), i5);
              var n3, o4 = 0, a3 = null === (r5 = document) || void 0 === r5 ? void 0 : r5.querySelectorAll(i5.selector);
              if (null == a3 || a3.forEach((e5) => {
                var t5 = e5;
                o4 += 1, i5.attributes && i5.attributes.forEach((e6) => {
                  switch (e6.name) {
                    case "text":
                      t5.innerText = e6.value;
                      break;
                    case "html":
                      t5.innerHTML = e6.value;
                      break;
                    case "cssClass":
                      t5.className = e6.value;
                      break;
                    default:
                      t5.setAttribute(e6.name, e6.value);
                  }
                }), i5.text && (t5.innerText = i5.text), i5.html && (t5.parentElement ? t5.parentElement.innerHTML = i5.html : t5.innerHTML = i5.html), i5.css && t5.setAttribute("style", i5.css);
              }), this.instance && this.instance.capture)
                this.instance.capture("$web_experiment_applied", { $web_experiment_name: e4, $web_experiment_variant: t4, $web_experiment_preview: s3, $web_experiment_document_url: null === (n3 = _Dn.getWindowLocation()) || void 0 === n3 ? void 0 : n3.href, $web_experiment_elements_modified: o4 });
            }
          }) : (_Dn.logInfo("Control variants leave the page unmodified."), this.instance && this.instance.capture && this.instance.capture("$web_experiment_applied", { $web_experiment_name: e4, $web_experiment_preview: s3, $web_experiment_variant: t4, $web_experiment_document_url: null === (r4 = _Dn.getWindowLocation()) || void 0 === r4 ? void 0 : r4.href, $web_experiment_elements_modified: 0 }));
        }
        _is_bot() {
          return n && this.instance ? vn(n, this.instance.config.custom_blocked_useragents) : void 0;
        }
      };
      Nn = class {
        constructor(e4) {
          this.instance = e4;
        }
        sendExceptionEvent(e4) {
          this.instance.capture("$exception", e4, { _noTruncate: true, _batchKey: "exceptionEvent" });
        }
      };
      qn = {};
      Bn = () => {
      };
      Hn = "posthog";
      Un = !sr && -1 === (null == d ? void 0 : d.indexOf("MSIE")) && -1 === (null == d ? void 0 : d.indexOf("Mozilla"));
      Wn = () => {
        var t4, i4, s3;
        return { api_host: "https://us.i.posthog.com", ui_host: null, token: "", autocapture: true, rageclick: true, cross_subdomain_cookie: (i4 = null == o2 ? void 0 : o2.location, s3 = null == i4 ? void 0 : i4.hostname, !!U(s3) && "herokuapp.com" !== s3.split(".").slice(-2).join(".")), persistence: "localStorage+cookie", persistence_name: "", loaded: Bn, store_google: true, custom_campaign_params: [], custom_blocked_useragents: [], save_referrer: true, capture_pageview: true, capture_pageleave: "if_capture_pageview", debug: a && U(null == a ? void 0 : a.search) && -1 !== a.search.indexOf("__posthog_debug=true") || false, verbose: false, cookie_expiration: 365, upgrade: false, disable_session_recording: false, disable_persistence: false, disable_web_experiments: true, disable_surveys: false, enable_recording_console_log: void 0, secure_cookie: "https:" === (null == e2 || null === (t4 = e2.location) || void 0 === t4 ? void 0 : t4.protocol), ip: true, opt_out_capturing_by_default: false, opt_out_persistence_by_default: false, opt_out_useragent_filter: false, opt_out_capturing_persistence_type: "localStorage", opt_out_capturing_cookie_prefix: null, opt_in_site_apps: false, property_denylist: [], respect_dnt: false, sanitize_properties: null, request_headers: {}, inapp_protocol: "//", inapp_link_new_window: false, request_batching: true, properties_string_max_length: 65535, session_recording: {}, mask_all_element_attributes: false, mask_all_text: false, advanced_disable_decide: false, advanced_disable_feature_flags: false, advanced_disable_feature_flags_on_first_load: false, advanced_disable_toolbar_metrics: false, feature_flag_request_timeout_ms: 3e3, on_request_error: (e4) => {
          var t5 = "Bad HTTP status: " + e4.statusCode + " " + e4.text;
          X.error(t5);
        }, get_device_id: (e4) => e4, _onCapture: Bn, capture_performance: void 0, name: "posthog", bootstrap: {}, disable_compression: false, session_idle_timeout_seconds: 1800, person_profiles: "identified_only", __add_tracing_headers: false, before_send: void 0 };
      };
      zn = (e4) => {
        var t4 = {};
        H(e4.process_person) || (t4.person_profiles = e4.process_person), H(e4.xhr_headers) || (t4.request_headers = e4.xhr_headers), H(e4.cookie_name) || (t4.persistence_name = e4.cookie_name), H(e4.disable_cookie) || (t4.disable_persistence = e4.disable_cookie);
        var i4 = m({}, t4, e4);
        return D(e4.property_blacklist) && (H(e4.property_denylist) ? i4.property_denylist = e4.property_blacklist : D(e4.property_denylist) ? i4.property_denylist = [...e4.property_blacklist, ...e4.property_denylist] : X.error("Invalid value for property_denylist config: " + e4.property_denylist)), i4;
      };
      jn = class {
        constructor() {
          te(this, "__forceAllowLocalhost", false);
        }
        get _forceAllowLocalhost() {
          return this.__forceAllowLocalhost;
        }
        set _forceAllowLocalhost(e4) {
          X.error("WebPerformanceObserver is deprecated and has no impact on network capture. Use `_forceAllowLocalhostNetworkCapture` on `posthog.sessionRecording`"), this.__forceAllowLocalhost = e4;
        }
      };
      Vn = class _Vn {
        constructor() {
          te(this, "webPerformance", new jn()), te(this, "version", _.LIB_VERSION), te(this, "_internalEventEmitter", new Sr()), this.config = Wn(), this.decideEndpointWasHit = false, this.SentryIntegration = gr, this.sentryIntegration = (e4) => function(e5, t4) {
            var i4 = vr(e5, t4);
            return { name: pr, processEvent: (e6) => i4(e6) };
          }(this, e4), this.__request_queue = [], this.__loaded = false, this.analyticsDefaultEndpoint = "/e/", this._initialPageviewCaptured = false, this._initialPersonProfilesConfig = null, this.featureFlags = new Ue(this), this.toolbar = new tr(this), this.scrollManager = new Sn(this), this.pageViewManager = new wr(this), this.surveys = new un(this), this.experiments = new Dn(this), this.exceptions = new Nn(this), this.rateLimiter = new cn(this), this.requestRouter = new _r(this), this.consent = new Cn(this), this.people = { set: (e4, t4, i4) => {
            var s3 = U(e4) ? { [e4]: t4 } : e4;
            this.setPersonProperties(s3), null == i4 || i4({});
          }, set_once: (e4, t4, i4) => {
            var s3 = U(e4) ? { [e4]: t4 } : e4;
            this.setPersonProperties(void 0, s3), null == i4 || i4({});
          } }, this.on("eventCaptured", (e4) => X.info('send "'.concat(null == e4 ? void 0 : e4.event, '"'), e4));
        }
        init(e4, t4, i4) {
          if (i4 && i4 !== Hn) {
            var s3, r4 = null !== (s3 = qn[i4]) && void 0 !== s3 ? s3 : new _Vn();
            return r4._init(e4, t4, i4), qn[i4] = r4, qn[Hn][i4] = r4, r4;
          }
          return this._init(e4, t4, i4);
        }
        _init(t4) {
          var i4, s3, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n3 = arguments.length > 2 ? arguments[2] : void 0;
          if (H(t4) || W(t4))
            return X.critical("PostHog was initialized without a token. This likely indicates a misconfiguration. Please check the first argument passed to posthog.init()"), this;
          if (this.__loaded)
            return X.warn("You have already initialized PostHog! Re-initializing is a no-op"), this;
          this.__loaded = true, this.config = {}, this._triggered_notifs = [], r4.person_profiles && (this._initialPersonProfilesConfig = r4.person_profiles), this.set_config(m({}, Wn(), zn(r4), { name: n3, token: t4 })), this.config.on_xhr_error && X.error("[posthog] on_xhr_error is deprecated. Use on_request_error instead"), this.compression = r4.disable_compression ? void 0 : R.GZipJS, this.persistence = new vi(this.config), this.sessionPersistence = "sessionStorage" === this.config.persistence || "memory" === this.config.persistence ? this.persistence : new vi(ee(ee({}, this.config), {}, { persistence: "sessionStorage" }));
          var o4 = ee({}, this.persistence.props), a3 = ee({}, this.sessionPersistence.props);
          if (this._requestQueue = new ir((e4) => this._send_retriable_request(e4)), this._retryQueue = new ur(this), this.__request_queue = [], this.sessionManager = new dr(this.config, this.persistence), this.sessionPropsManager = new hn(this.sessionManager, this.persistence), new Fn(this).startIfEnabledOrStop(), this.sessionRecording = new Ys(this), this.sessionRecording.startIfEnabledOrStop(), this.config.disable_scroll_properties || this.scrollManager.startMeasuringScrollPosition(), this.autocapture = new Pn(this), this.autocapture.startIfEnabled(), this.surveys.loadIfEnabled(), this.heatmaps = new wn(this), this.heatmaps.startIfEnabled(), this.webVitalsAutocapture = new On(this), this.exceptionObserver = new $n(this), this.exceptionObserver.startIfEnabled(), this.deadClicksAutocapture = new yn(this, bn), this.deadClicksAutocapture.startIfEnabled(), _.DEBUG = _.DEBUG || this.config.debug, _.DEBUG && X.info("Starting in debug mode", { this: this, config: r4, thisC: ee({}, this.config), p: o4, s: a3 }), this._sync_opt_out_with_persistence(), void 0 !== (null === (i4 = r4.bootstrap) || void 0 === i4 ? void 0 : i4.distinctID)) {
            var l3, u3, c3 = this.config.get_device_id(Je()), d3 = null !== (l3 = r4.bootstrap) && void 0 !== l3 && l3.isIdentifiedID ? c3 : r4.bootstrap.distinctID;
            this.persistence.set_property(Re, null !== (u3 = r4.bootstrap) && void 0 !== u3 && u3.isIdentifiedID ? "identified" : "anonymous"), this.register({ distinct_id: r4.bootstrap.distinctID, $device_id: d3 });
          }
          if (this._hasBootstrappedFeatureFlags()) {
            var h3, p3, v3 = Object.keys((null === (h3 = r4.bootstrap) || void 0 === h3 ? void 0 : h3.featureFlags) || {}).filter((e4) => {
              var t5, i5;
              return !(null === (t5 = r4.bootstrap) || void 0 === t5 || null === (i5 = t5.featureFlags) || void 0 === i5 || !i5[e4]);
            }).reduce((e4, t5) => {
              var i5, s4;
              return e4[t5] = (null === (i5 = r4.bootstrap) || void 0 === i5 || null === (s4 = i5.featureFlags) || void 0 === s4 ? void 0 : s4[t5]) || false, e4;
            }, {}), g3 = Object.keys((null === (p3 = r4.bootstrap) || void 0 === p3 ? void 0 : p3.featureFlagPayloads) || {}).filter((e4) => v3[e4]).reduce((e4, t5) => {
              var i5, s4, n4, o5;
              null !== (i5 = r4.bootstrap) && void 0 !== i5 && null !== (s4 = i5.featureFlagPayloads) && void 0 !== s4 && s4[t5] && (e4[t5] = null === (n4 = r4.bootstrap) || void 0 === n4 || null === (o5 = n4.featureFlagPayloads) || void 0 === o5 ? void 0 : o5[t5]);
              return e4;
            }, {});
            this.featureFlags.receivedFeatureFlags({ featureFlags: v3, featureFlagPayloads: g3 });
          }
          if (!this.get_distinct_id()) {
            var f3 = this.config.get_device_id(Je());
            this.register_once({ distinct_id: f3, $device_id: f3 }, ""), this.persistence.set_property(Re, "anonymous");
          }
          return null == e2 || null === (s3 = e2.addEventListener) || void 0 === s3 || s3.call(e2, "onpagehide" in self ? "pagehide" : "unload", this._handle_unload.bind(this)), this.toolbar.maybeLoadToolbar(), r4.segment ? yr(this, () => this._loaded()) : this._loaded(), N(this.config._onCapture) && this.config._onCapture !== Bn && (X.warn("onCapture is deprecated. Please use `before_send` instead"), this.on("eventCaptured", (e4) => this.config._onCapture(e4.event, e4))), this;
        }
        _afterDecideResponse(e4) {
          var t4, i4, s3, r4, n3, o4, a3, l3, u3;
          this.compression = void 0, e4.supportedCompression && !this.config.disable_compression && (this.compression = b(e4.supportedCompression, R.GZipJS) ? R.GZipJS : b(e4.supportedCompression, R.Base64) ? R.Base64 : void 0), null !== (t4 = e4.analytics) && void 0 !== t4 && t4.endpoint && (this.analyticsDefaultEndpoint = e4.analytics.endpoint), this.set_config({ person_profiles: this._initialPersonProfilesConfig ? this._initialPersonProfilesConfig : e4.defaultIdentifiedOnly ? "identified_only" : "always" }), null === (i4 = this.sessionRecording) || void 0 === i4 || i4.afterDecideResponse(e4), null === (s3 = this.autocapture) || void 0 === s3 || s3.afterDecideResponse(e4), null === (r4 = this.heatmaps) || void 0 === r4 || r4.afterDecideResponse(e4), null === (n3 = this.experiments) || void 0 === n3 || n3.afterDecideResponse(e4), null === (o4 = this.surveys) || void 0 === o4 || o4.afterDecideResponse(e4), null === (a3 = this.webVitalsAutocapture) || void 0 === a3 || a3.afterDecideResponse(e4), null === (l3 = this.exceptionObserver) || void 0 === l3 || l3.afterDecideResponse(e4), null === (u3 = this.deadClicksAutocapture) || void 0 === u3 || u3.afterDecideResponse(e4);
        }
        _loaded() {
          var e4 = this.config.advanced_disable_decide;
          e4 || this.featureFlags.setReloadingPaused(true);
          try {
            this.config.loaded(this);
          } catch (e5) {
            X.critical("`loaded` function failed", e5);
          }
          this._start_queue_if_opted_in(), this.config.capture_pageview && setTimeout(() => {
            this.consent.isOptedIn() && this._captureInitialPageview();
          }, 1), e4 || (new Xs(this).call(), this.featureFlags.resetRequestQueue());
        }
        _start_queue_if_opted_in() {
          var e4;
          this.has_opted_out_capturing() || this.config.request_batching && (null === (e4 = this._requestQueue) || void 0 === e4 || e4.enable());
        }
        _dom_loaded() {
          this.has_opted_out_capturing() || g(this.__request_queue, (e4) => this._send_retriable_request(e4)), this.__request_queue = [], this._start_queue_if_opted_in();
        }
        _handle_unload() {
          var e4, t4;
          this.config.request_batching ? (this._shouldCapturePageleave() && this.capture("$pageleave"), null === (e4 = this._requestQueue) || void 0 === e4 || e4.unload(), null === (t4 = this._retryQueue) || void 0 === t4 || t4.unload()) : this._shouldCapturePageleave() && this.capture("$pageleave", null, { transport: "sendBeacon" });
        }
        _send_request(e4) {
          this.__loaded && (Un ? this.__request_queue.push(e4) : this.rateLimiter.isServerRateLimited(e4.batchKey) || (e4.transport = e4.transport || this.config.api_transport, e4.url = nr(e4.url, { ip: this.config.ip ? 1 : 0 }), e4.headers = ee({}, this.config.request_headers), e4.compression = "best-available" === e4.compression ? this.compression : e4.compression, ((e5) => {
            var t4, i4, s3, r4 = ee({}, e5);
            r4.timeout = r4.timeout || 6e4, r4.url = nr(r4.url, { _: (/* @__PURE__ */ new Date()).getTime().toString(), ver: _.LIB_VERSION, compression: r4.compression });
            var n3 = null !== (t4 = r4.transport) && void 0 !== t4 ? t4 : "XHR", o4 = null !== (i4 = null === (s3 = F(ar, (e6) => e6.transport === n3)) || void 0 === s3 ? void 0 : s3.method) && void 0 !== i4 ? i4 : ar[0].method;
            if (!o4)
              throw new Error("No available transport method");
            o4(r4);
          })(ee(ee({}, e4), {}, { callback: (t4) => {
            var i4, s3, r4;
            (this.rateLimiter.checkForLimiting(t4), t4.statusCode >= 400) && (null === (s3 = (r4 = this.config).on_request_error) || void 0 === s3 || s3.call(r4, t4));
            null === (i4 = e4.callback) || void 0 === i4 || i4.call(e4, t4);
          } }))));
        }
        _send_retriable_request(e4) {
          this._retryQueue ? this._retryQueue.retriableRequest(e4) : this._send_request(e4);
        }
        _execute_array(e4) {
          var t4, i4 = [], s3 = [], r4 = [];
          g(e4, (e5) => {
            e5 && (t4 = e5[0], D(t4) ? r4.push(e5) : N(e5) ? e5.call(this) : D(e5) && "alias" === t4 ? i4.push(e5) : D(e5) && -1 !== t4.indexOf("capture") && N(this[t4]) ? r4.push(e5) : s3.push(e5));
          });
          var n3 = function(e5, t5) {
            g(e5, function(e6) {
              if (D(e6[0])) {
                var i5 = t5;
                f(e6, function(e7) {
                  i5 = i5[e7[0]].apply(i5, e7.slice(1));
                });
              } else
                this[e6[0]].apply(this, e6.slice(1));
            }, t5);
          };
          n3(i4, this), n3(s3, this), n3(r4, this);
        }
        _hasBootstrappedFeatureFlags() {
          var e4, t4;
          return (null === (e4 = this.config.bootstrap) || void 0 === e4 ? void 0 : e4.featureFlags) && Object.keys(null === (t4 = this.config.bootstrap) || void 0 === t4 ? void 0 : t4.featureFlags).length > 0 || false;
        }
        push(e4) {
          this._execute_array([e4]);
        }
        capture(e4, t4, i4) {
          var s3;
          if (this.__loaded && this.persistence && this.sessionPersistence && this._requestQueue) {
            if (!this.consent.isOptedOut())
              if (!H(e4) && U(e4)) {
                if (this.config.opt_out_useragent_filter || !this._is_bot()) {
                  var r4 = null != i4 && i4.skip_client_rate_limiting ? void 0 : this.rateLimiter.clientRateLimitContext();
                  if (null == r4 || !r4.isRateLimited) {
                    this.sessionPersistence.update_search_keyword(), this.config.store_google && this.sessionPersistence.update_campaign_params(), this.config.save_referrer && this.sessionPersistence.update_referrer_info(), (this.config.store_google || this.config.save_referrer) && this.persistence.set_initial_person_info();
                    var n3 = /* @__PURE__ */ new Date(), o4 = (null == i4 ? void 0 : i4.timestamp) || n3, a3 = { uuid: Je(), event: e4, properties: this._calculate_event_properties(e4, t4 || {}, o4) };
                    r4 && (a3.properties.$lib_rate_limit_remaining_tokens = r4.remainingTokens), (null == i4 ? void 0 : i4.$set) && (a3.$set = null == i4 ? void 0 : i4.$set);
                    var l3 = this._calculate_set_once_properties(null == i4 ? void 0 : i4.$set_once);
                    l3 && (a3.$set_once = l3), (a3 = x(a3, null != i4 && i4._noTruncate ? null : this.config.properties_string_max_length)).timestamp = o4, H(null == i4 ? void 0 : i4.timestamp) || (a3.properties.$event_time_override_provided = true, a3.properties.$event_time_override_system_time = n3);
                    var u3 = ee(ee({}, a3.properties.$set), a3.$set);
                    if (B(u3) || this.setPersonPropertiesForFlags(u3), !j(this.config.before_send)) {
                      var c3 = this._runBeforeSend(a3);
                      if (!c3)
                        return;
                      a3 = c3;
                    }
                    this._internalEventEmitter.emit("eventCaptured", a3);
                    var d3 = { method: "POST", url: null !== (s3 = null == i4 ? void 0 : i4._url) && void 0 !== s3 ? s3 : this.requestRouter.endpointFor("api", this.analyticsDefaultEndpoint), data: a3, compression: "best-available", batchKey: null == i4 ? void 0 : i4._batchKey };
                    return !this.config.request_batching || i4 && (null == i4 || !i4._batchKey) || null != i4 && i4.send_instantly ? this._send_retriable_request(d3) : this._requestQueue.enqueue(d3), a3;
                  }
                  X.critical("This capture call is ignored due to client rate limiting.");
                }
              } else
                X.error("No event name provided to posthog.capture");
          } else
            X.uninitializedWarning("posthog.capture");
        }
        _addCaptureHook(e4) {
          return this.on("eventCaptured", (t4) => e4(t4.event, t4));
        }
        _calculate_event_properties(e4, t4, i4) {
          if (i4 = i4 || /* @__PURE__ */ new Date(), !this.persistence || !this.sessionPersistence)
            return t4;
          var s3 = this.persistence.remove_event_timer(e4), r4 = ee({}, t4);
          if (r4.token = this.config.token, "$snapshot" === e4) {
            var n3 = ee(ee({}, this.persistence.properties()), this.sessionPersistence.properties());
            return r4.distinct_id = n3.distinct_id, (!U(r4.distinct_id) && !V(r4.distinct_id) || W(r4.distinct_id)) && X.error("Invalid distinct_id for replay event. This indicates a bug in your implementation"), r4;
          }
          var a3 = _i.properties();
          if (this.sessionManager) {
            var { sessionId: l3, windowId: u3 } = this.sessionManager.checkAndGetSessionAndWindowId();
            r4.$session_id = l3, r4.$window_id = u3;
          }
          if (this.requestRouter.region === cr.CUSTOM && (r4.$lib_custom_api_host = this.config.api_host), this.sessionPropsManager && this.config.__preview_send_client_session_params && ("$pageview" === e4 || "$pageleave" === e4 || "$autocapture" === e4)) {
            var c3 = this.sessionPropsManager.getSessionProps();
            r4 = m(r4, c3);
          }
          if (!this.config.disable_scroll_properties) {
            var h3 = {};
            "$pageview" === e4 ? h3 = this.pageViewManager.doPageView(i4) : "$pageleave" === e4 && (h3 = this.pageViewManager.doPageLeave(i4)), r4 = m(r4, h3);
          }
          if ("$pageview" === e4 && o2 && (r4.title = o2.title), !H(s3)) {
            var _3 = i4.getTime() - s3;
            r4.$duration = parseFloat((_3 / 1e3).toFixed(3));
          }
          d && this.config.opt_out_useragent_filter && (r4.$browser_type = this._is_bot() ? "bot" : "browser"), (r4 = m({}, a3, this.persistence.properties(), this.sessionPersistence.properties(), r4)).$is_identified = this._isIdentified(), D(this.config.property_denylist) ? f(this.config.property_denylist, function(e5) {
            delete r4[e5];
          }) : X.error("Invalid value for property_denylist config: " + this.config.property_denylist + " or property_blacklist config: " + this.config.property_blacklist);
          var p3 = this.config.sanitize_properties;
          p3 && (r4 = p3(r4, e4));
          var v3 = this._hasPersonProcessing();
          return r4.$process_person_profile = v3, v3 && this._requirePersonProcessing("_calculate_event_properties"), r4;
        }
        _calculate_set_once_properties(e4) {
          if (!this.persistence || !this._hasPersonProcessing())
            return e4;
          var t4 = m({}, this.persistence.get_initial_props(), e4 || {}), i4 = this.config.sanitize_properties;
          return i4 && (t4 = i4(t4, "$set_once")), B(t4) ? void 0 : t4;
        }
        register(e4, t4) {
          var i4;
          null === (i4 = this.persistence) || void 0 === i4 || i4.register(e4, t4);
        }
        register_once(e4, t4, i4) {
          var s3;
          null === (s3 = this.persistence) || void 0 === s3 || s3.register_once(e4, t4, i4);
        }
        register_for_session(e4) {
          var t4;
          null === (t4 = this.sessionPersistence) || void 0 === t4 || t4.register(e4);
        }
        unregister(e4) {
          var t4;
          null === (t4 = this.persistence) || void 0 === t4 || t4.unregister(e4);
        }
        unregister_for_session(e4) {
          var t4;
          null === (t4 = this.sessionPersistence) || void 0 === t4 || t4.unregister(e4);
        }
        _register_single(e4, t4) {
          this.register({ [e4]: t4 });
        }
        getFeatureFlag(e4, t4) {
          return this.featureFlags.getFeatureFlag(e4, t4);
        }
        getFeatureFlagPayload(e4) {
          var t4 = this.featureFlags.getFeatureFlagPayload(e4);
          try {
            return JSON.parse(t4);
          } catch (e5) {
            return t4;
          }
        }
        isFeatureEnabled(e4, t4) {
          return this.featureFlags.isFeatureEnabled(e4, t4);
        }
        reloadFeatureFlags() {
          this.featureFlags.reloadFeatureFlags();
        }
        updateEarlyAccessFeatureEnrollment(e4, t4) {
          this.featureFlags.updateEarlyAccessFeatureEnrollment(e4, t4);
        }
        getEarlyAccessFeatures(e4) {
          var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          return this.featureFlags.getEarlyAccessFeatures(e4, t4);
        }
        on(e4, t4) {
          return this._internalEventEmitter.on(e4, t4);
        }
        onFeatureFlags(e4) {
          return this.featureFlags.onFeatureFlags(e4);
        }
        onSessionId(e4) {
          var t4, i4;
          return null !== (t4 = null === (i4 = this.sessionManager) || void 0 === i4 ? void 0 : i4.onSessionId(e4)) && void 0 !== t4 ? t4 : () => {
          };
        }
        getSurveys(e4) {
          var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          this.surveys.getSurveys(e4, t4);
        }
        getActiveMatchingSurveys(e4) {
          var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          this.surveys.getActiveMatchingSurveys(e4, t4);
        }
        renderSurvey(e4, t4) {
          this.surveys.renderSurvey(e4, t4);
        }
        canRenderSurvey(e4) {
          this.surveys.canRenderSurvey(e4);
        }
        getNextSurveyStep(e4, t4, i4) {
          return this.surveys.getNextSurveyStep(e4, t4, i4);
        }
        identify(e4, t4, i4) {
          if (!this.__loaded || !this.persistence)
            return X.uninitializedWarning("posthog.identify");
          if (V(e4) && (e4 = e4.toString(), X.warn("The first argument to posthog.identify was a number, but it should be a string. It has been converted to a string.")), e4) {
            if (["distinct_id", "distinctid"].includes(e4.toLowerCase()))
              X.critical('The string "'.concat(e4, '" was set in posthog.identify which indicates an error. This ID should be unique to the user and not a hardcoded string.'));
            else if (this._requirePersonProcessing("posthog.identify")) {
              var s3 = this.get_distinct_id();
              if (this.register({ $user_id: e4 }), !this.get_property("$device_id")) {
                var r4 = s3;
                this.register_once({ $had_persisted_distinct_id: true, $device_id: r4 }, "");
              }
              e4 !== s3 && e4 !== this.get_property(re) && (this.unregister(re), this.register({ distinct_id: e4 }));
              var n3 = "anonymous" === (this.persistence.get_property(Re) || "anonymous");
              e4 !== s3 && n3 ? (this.persistence.set_property(Re, "identified"), this.setPersonPropertiesForFlags(t4 || {}, false), this.capture("$identify", { distinct_id: e4, $anon_distinct_id: s3 }, { $set: t4 || {}, $set_once: i4 || {} }), this.featureFlags.setAnonymousDistinctId(s3)) : (t4 || i4) && this.setPersonProperties(t4, i4), e4 !== s3 && (this.reloadFeatureFlags(), this.unregister(Fe));
            }
          } else
            X.error("Unique user id has not been set in posthog.identify");
        }
        setPersonProperties(e4, t4) {
          (e4 || t4) && this._requirePersonProcessing("posthog.setPersonProperties") && (this.setPersonPropertiesForFlags(e4 || {}), this.capture("$set", { $set: e4 || {}, $set_once: t4 || {} }));
        }
        group(e4, t4, i4) {
          if (e4 && t4) {
            if (this._requirePersonProcessing("posthog.group")) {
              var s3 = this.getGroups();
              s3[e4] !== t4 && this.resetGroupPropertiesForFlags(e4), this.register({ $groups: ee(ee({}, s3), {}, { [e4]: t4 }) }), i4 && (this.capture("$groupidentify", { $group_type: e4, $group_key: t4, $group_set: i4 }), this.setGroupPropertiesForFlags({ [e4]: i4 })), s3[e4] === t4 || i4 || this.reloadFeatureFlags();
            }
          } else
            X.error("posthog.group requires a group type and group key");
        }
        resetGroups() {
          this.register({ $groups: {} }), this.resetGroupPropertiesForFlags(), this.reloadFeatureFlags();
        }
        setPersonPropertiesForFlags(e4) {
          var t4 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          this._requirePersonProcessing("posthog.setPersonPropertiesForFlags") && this.featureFlags.setPersonPropertiesForFlags(e4, t4);
        }
        resetPersonPropertiesForFlags() {
          this.featureFlags.resetPersonPropertiesForFlags();
        }
        setGroupPropertiesForFlags(e4) {
          var t4 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          this._requirePersonProcessing("posthog.setGroupPropertiesForFlags") && this.featureFlags.setGroupPropertiesForFlags(e4, t4);
        }
        resetGroupPropertiesForFlags(e4) {
          this.featureFlags.resetGroupPropertiesForFlags(e4);
        }
        reset(e4) {
          var t4, i4, s3, r4, n3;
          if (X.info("reset"), !this.__loaded)
            return X.uninitializedWarning("posthog.reset");
          var o4 = this.get_property("$device_id");
          this.consent.reset(), null === (t4 = this.persistence) || void 0 === t4 || t4.clear(), null === (i4 = this.sessionPersistence) || void 0 === i4 || i4.clear(), null === (s3 = this.surveys) || void 0 === s3 || s3.reset(), null === (r4 = this.persistence) || void 0 === r4 || r4.set_property(Re, "anonymous"), null === (n3 = this.sessionManager) || void 0 === n3 || n3.resetSessionId();
          var a3 = this.config.get_device_id(Je());
          this.register_once({ distinct_id: a3, $device_id: e4 ? a3 : o4 }, "");
        }
        get_distinct_id() {
          return this.get_property("distinct_id");
        }
        getGroups() {
          return this.get_property("$groups") || {};
        }
        get_session_id() {
          var e4, t4;
          return null !== (e4 = null === (t4 = this.sessionManager) || void 0 === t4 ? void 0 : t4.checkAndGetSessionAndWindowId(true).sessionId) && void 0 !== e4 ? e4 : "";
        }
        get_session_replay_url(e4) {
          if (!this.sessionManager)
            return "";
          var { sessionId: t4, sessionStartTimestamp: i4 } = this.sessionManager.checkAndGetSessionAndWindowId(true), s3 = this.requestRouter.endpointFor("ui", "/project/".concat(this.config.token, "/replay/").concat(t4));
          if (null != e4 && e4.withTimestamp && i4) {
            var r4, n3 = null !== (r4 = e4.timestampLookBack) && void 0 !== r4 ? r4 : 10;
            if (!i4)
              return s3;
            var o4 = Math.max(Math.floor(((/* @__PURE__ */ new Date()).getTime() - i4) / 1e3) - n3, 0);
            s3 += "?t=".concat(o4);
          }
          return s3;
        }
        alias(e4, t4) {
          return e4 === this.get_property(se) ? (X.critical("Attempting to create alias for existing People user - aborting."), -2) : this._requirePersonProcessing("posthog.alias") ? (H(t4) && (t4 = this.get_distinct_id()), e4 !== t4 ? (this._register_single(re, e4), this.capture("$create_alias", { alias: e4, distinct_id: t4 })) : (X.warn("alias matches current distinct_id - skipping api call."), this.identify(e4), -1)) : void 0;
        }
        set_config(e4) {
          var t4, i4, s3, r4, n3 = ee({}, this.config);
          q(e4) && (m(this.config, zn(e4)), null === (t4 = this.persistence) || void 0 === t4 || t4.update_config(this.config, n3), this.sessionPersistence = "sessionStorage" === this.config.persistence || "memory" === this.config.persistence ? this.persistence : new vi(ee(ee({}, this.config), {}, { persistence: "sessionStorage" })), st.is_supported() && "true" === st.get("ph_debug") && (this.config.debug = true), this.config.debug && (_.DEBUG = true, X.info("set_config", { config: e4, oldConfig: n3, newConfig: ee({}, this.config) })), null === (i4 = this.sessionRecording) || void 0 === i4 || i4.startIfEnabledOrStop(), null === (s3 = this.autocapture) || void 0 === s3 || s3.startIfEnabled(), null === (r4 = this.heatmaps) || void 0 === r4 || r4.startIfEnabled(), this.surveys.loadIfEnabled(), this._sync_opt_out_with_persistence());
        }
        startSessionRecording(e4) {
          var t4 = true === e4, i4 = { sampling: t4 || !(null == e4 || !e4.sampling), linked_flag: t4 || !(null == e4 || !e4.linked_flag), url_trigger: t4 || !(null == e4 || !e4.url_trigger), event_trigger: t4 || !(null == e4 || !e4.event_trigger) };
          if (Object.values(i4).some(Boolean)) {
            var s3, r4, n3, o4, a3;
            if (null === (s3 = this.sessionManager) || void 0 === s3 || s3.checkAndGetSessionAndWindowId(), i4.sampling)
              null === (r4 = this.sessionRecording) || void 0 === r4 || r4.overrideSampling();
            if (i4.linked_flag)
              null === (n3 = this.sessionRecording) || void 0 === n3 || n3.overrideLinkedFlag();
            if (i4.url_trigger)
              null === (o4 = this.sessionRecording) || void 0 === o4 || o4.overrideTrigger("url");
            if (i4.event_trigger)
              null === (a3 = this.sessionRecording) || void 0 === a3 || a3.overrideTrigger("event");
          }
          this.set_config({ disable_session_recording: false });
        }
        stopSessionRecording() {
          this.set_config({ disable_session_recording: true });
        }
        sessionRecordingStarted() {
          var e4;
          return !(null === (e4 = this.sessionRecording) || void 0 === e4 || !e4.started);
        }
        captureException(e4, t4) {
          var i4, s3 = new Error("PostHog syntheticException"), r4 = N(null === (i4 = h.__PosthogExtensions__) || void 0 === i4 ? void 0 : i4.parseErrorAsProperties) ? h.__PosthogExtensions__.parseErrorAsProperties([e4.message, void 0, void 0, void 0, e4], { syntheticException: s3 }) : ee({ $exception_level: "error", $exception_list: [{ type: e4.name, value: e4.message, mechanism: { handled: true, synthetic: false } }] }, t4);
          this.exceptions.sendExceptionEvent(r4);
        }
        loadToolbar(e4) {
          return this.toolbar.loadToolbar(e4);
        }
        get_property(e4) {
          var t4;
          return null === (t4 = this.persistence) || void 0 === t4 ? void 0 : t4.props[e4];
        }
        getSessionProperty(e4) {
          var t4;
          return null === (t4 = this.sessionPersistence) || void 0 === t4 ? void 0 : t4.props[e4];
        }
        toString() {
          var e4, t4 = null !== (e4 = this.config.name) && void 0 !== e4 ? e4 : Hn;
          return t4 !== Hn && (t4 = Hn + "." + t4), t4;
        }
        _isIdentified() {
          var e4, t4;
          return "identified" === (null === (e4 = this.persistence) || void 0 === e4 ? void 0 : e4.get_property(Re)) || "identified" === (null === (t4 = this.sessionPersistence) || void 0 === t4 ? void 0 : t4.get_property(Re));
        }
        _hasPersonProcessing() {
          var e4, t4, i4, s3;
          return !("never" === this.config.person_profiles || "identified_only" === this.config.person_profiles && !this._isIdentified() && B(this.getGroups()) && (null === (e4 = this.persistence) || void 0 === e4 || null === (t4 = e4.props) || void 0 === t4 || !t4[re]) && (null === (i4 = this.persistence) || void 0 === i4 || null === (s3 = i4.props) || void 0 === s3 || !s3[Oe]));
        }
        _shouldCapturePageleave() {
          return true === this.config.capture_pageleave || "if_capture_pageview" === this.config.capture_pageleave && this.config.capture_pageview;
        }
        createPersonProfile() {
          this._hasPersonProcessing() || this._requirePersonProcessing("posthog.createPersonProfile") && this.setPersonProperties({}, {});
        }
        _requirePersonProcessing(e4) {
          return "never" === this.config.person_profiles ? (X.error(e4 + ' was called, but process_person is set to "never". This call will be ignored.'), false) : (this._register_single(Oe, true), true);
        }
        _sync_opt_out_with_persistence() {
          var e4, t4, i4, s3, r4 = this.consent.isOptedOut(), n3 = this.config.opt_out_persistence_by_default, o4 = this.config.disable_persistence || r4 && !!n3;
          (null === (e4 = this.persistence) || void 0 === e4 ? void 0 : e4.disabled) !== o4 && (null === (i4 = this.persistence) || void 0 === i4 || i4.set_disabled(o4));
          (null === (t4 = this.sessionPersistence) || void 0 === t4 ? void 0 : t4.disabled) !== o4 && (null === (s3 = this.sessionPersistence) || void 0 === s3 || s3.set_disabled(o4));
        }
        opt_in_capturing(e4) {
          var t4;
          (this.consent.optInOut(true), this._sync_opt_out_with_persistence(), H(null == e4 ? void 0 : e4.captureEventName) || null != e4 && e4.captureEventName) && this.capture(null !== (t4 = null == e4 ? void 0 : e4.captureEventName) && void 0 !== t4 ? t4 : "$opt_in", null == e4 ? void 0 : e4.captureProperties, { send_instantly: true });
          this.config.capture_pageview && this._captureInitialPageview();
        }
        opt_out_capturing() {
          this.consent.optInOut(false), this._sync_opt_out_with_persistence();
        }
        has_opted_in_capturing() {
          return this.consent.isOptedIn();
        }
        has_opted_out_capturing() {
          return this.consent.isOptedOut();
        }
        clear_opt_in_out_capturing() {
          this.consent.reset(), this._sync_opt_out_with_persistence();
        }
        _is_bot() {
          return n ? vn(n, this.config.custom_blocked_useragents) : void 0;
        }
        _captureInitialPageview() {
          o2 && !this._initialPageviewCaptured && (this._initialPageviewCaptured = true, this.capture("$pageview", { title: o2.title }, { send_instantly: true }));
        }
        debug(t4) {
          false === t4 ? (null == e2 || e2.console.log("You've disabled debug mode."), localStorage && localStorage.removeItem("ph_debug"), this.set_config({ debug: false })) : (null == e2 || e2.console.log("You're now in debug mode. All calls to PostHog will be logged in your console.\nYou can disable this with `posthog.debug(false)`."), localStorage && localStorage.setItem("ph_debug", "true"), this.set_config({ debug: true }));
        }
        _runBeforeSend(e4) {
          if (j(this.config.before_send))
            return e4;
          var t4 = D(this.config.before_send) ? this.config.before_send : [this.config.before_send], i4 = e4;
          for (var s3 of t4) {
            if (i4 = s3(i4), j(i4)) {
              var r4 = "Event '".concat(e4.event, "' was rejected in beforeSend function");
              return J(e4.event) ? X.warn("".concat(r4, ". This can cause unexpected behavior.")) : X.info(r4), null;
            }
            i4.properties && !B(i4.properties) || X.warn("Event '".concat(e4.event, "' has no properties after beforeSend function, this is likely an error."));
          }
          return i4;
        }
      };
      !function(e4, t4) {
        for (var i4 = 0; i4 < t4.length; i4++)
          e4.prototype[t4[i4]] = S(e4.prototype[t4[i4]]);
      }(Vn, ["identify"]);
      Qn = (Gn = qn[Hn] = new Vn(), function() {
        function t4() {
          t4.done || (t4.done = true, Un = false, f(qn, function(e4) {
            e4._dom_loaded();
          }));
        }
        null != o2 && o2.addEventListener && ("complete" === o2.readyState ? t4() : o2.addEventListener("DOMContentLoaded", t4, false)), e2 && P(e2, "load", t4, true);
      }(), Gn);
    }
  });

  // ../../node_modules/.pnpm/posthog-js@1.189.0/node_modules/posthog-js/react/dist/esm/index.js
  function PostHogProvider(_a) {
    var children = _a.children, client = _a.client, apiKey2 = _a.apiKey, options = _a.options;
    var posthog = (0, import_react.useMemo)(function() {
      if (client && apiKey2) {
        console.warn("[PostHog.js] You have provided both a client and an apiKey to PostHogProvider. The apiKey will be ignored in favour of the client.");
      }
      if (client && options) {
        console.warn("[PostHog.js] You have provided both a client and options to PostHogProvider. The options will be ignored in favour of the client.");
      }
      if (client) {
        return client;
      }
      if (apiKey2) {
        if (Qn.__loaded) {
          console.warn("[PostHog.js] was already loaded elsewhere. This may cause issues.");
        }
        Qn.init(apiKey2, options);
      }
      return Qn;
    }, [client, apiKey2]);
    return import_react.default.createElement(PostHogContext.Provider, { value: { client: posthog } }, children);
  }
  var import_react, PostHogContext, usePostHog;
  var init_esm = __esm({
    "../../node_modules/.pnpm/posthog-js@1.189.0/node_modules/posthog-js/react/dist/esm/index.js"() {
      init_module();
      import_react = __toESM(require_react());
      PostHogContext = (0, import_react.createContext)({ client: Qn });
      usePostHog = function() {
        var client = (0, import_react.useContext)(PostHogContext).client;
        return client;
      };
    }
  });

  // ../../node_modules/.pnpm/react-scan@0.0.31/node_modules/react-scan/dist/index.mjs
  var e3, t3, n2, o3, r3, a2, i2, s2, c2, l2, d2, p2, u2, m2, f2, h2, g2, y2, w2, b2, v2, x2, k2, C2, E2, S2, M2, L2, $, T2, F2, O2, R2, z2, j2, D2, A2, _2, P2, H2, B2, N2, I2, q2, V2, W2, X2, Y2, G2, U2, K2, J2, Q2, Z2, ee2, te2, ne2, oe2, re2, ae2, ie2, se2, ce2, le2, de2, pe2, ue2, me2, fe2, he2, ge2, ye2, we2, ve2, ke2, Ee2;
  var init_dist = __esm({
    "../../node_modules/.pnpm/react-scan@0.0.31/node_modules/react-scan/dist/index.mjs"() {
      e3 = __toESM(require_react(), 1);
      t3 = () => {
      };
      n2 = ({ onCommitFiberRoot: e4 }) => {
        let n3 = globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        const o4 = /* @__PURE__ */ new Map();
        let r4 = 0;
        n3 || (n3 = { checkDCE: t3, supportsFiber: true, renderers: o4, onScheduleFiberRoot: t3, onCommitFiberRoot: t3, onCommitFiberUnmount: t3, inject(e5) {
          const t4 = ++r4;
          return o4.set(t4, e5), t4;
        } }, globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__ = n3);
        const a3 = n3.onCommitFiberRoot;
        return n3.onCommitFiberRoot = (t4, n4) => {
          a3 && a3(t4, n4), e4(t4, n4);
        }, n3;
      };
      n2({ onCommitFiberRoot() {
      } });
      o3 = (t4) => {
        switch (typeof t4) {
          case "function":
            return t4.toString();
          case "string":
            return t4;
          case "object":
            if (null === t4)
              return "null";
            if (Array.isArray(t4))
              return t4.length > 0 ? "[\u2026]" : "[]";
            if (e3.isValidElement(t4) && "$$typeof" in t4 && "symbol" == typeof t4.$$typeof && "Symbol(react.element)" === String(t4.$$typeof))
              return `<${a2(t4.type) ?? ""}${Object.keys(t4.props || {}).length > 0 ? " \u2026" : ""}>`;
            if ("object" == typeof t4 && null !== t4 && t4.constructor === Object) {
              for (const e4 in t4)
                if (Object.prototype.hasOwnProperty.call(t4, e4))
                  return "{\u2026}";
              return "{}";
            }
            const n3 = Object.prototype.toString.call(t4).slice(8, -1);
            if ("Object" === n3) {
              const e4 = Object.getPrototypeOf(t4), n4 = e4?.constructor;
              if ("function" == typeof n4)
                return `${n4.displayName || n4.name || ""}{\u2026}`;
            }
            return `${n3}{\u2026}`;
          default:
            return String(t4);
        }
      };
      r3 = (e4) => "function" == typeof e4 ? e4 : "object" == typeof e4 && e4 ? r3(e4.type || e4.render) : null;
      a2 = (e4) => (e4 = r3(e4)) && (e4.displayName || e4.name) || null;
      i2 = (e4) => 5 === e4.tag || 26 === e4.tag || 27 === e4.tag;
      s2 = (e4) => {
        const t4 = e4.memoizedProps, n3 = e4.alternate?.memoizedProps || {}, o4 = e4.flags ?? e4.effectTag ?? 0;
        switch (e4.tag) {
          case 1:
          case 0:
          case 9:
          case 11:
          case 14:
          case 15:
            return !(1 & ~o4);
          default:
            return !e4.alternate || (n3 !== t4 || e4.alternate.memoizedState !== e4.memoizedState || e4.alternate.ref !== e4.ref);
        }
      };
      c2 = (e4) => {
        switch (e4.tag) {
          case 18:
          case 6:
          case 7:
          case 23:
          case 22:
            return true;
          case 3:
            return false;
          default: {
            const t4 = "object" == typeof e4.type && null !== e4.type ? e4.type.$$typeof : e4.type;
            switch ("symbol" == typeof t4 ? t4.toString() : t4) {
              case 60111:
              case "Symbol(react.concurrent_mode)":
              case "Symbol(react.async_mode)":
                return true;
              default:
                return false;
            }
          }
        }
      };
      l2 = (e4, t4, n3 = false) => {
        if (!e4)
          return null;
        if (true === t4(e4))
          return e4;
        let o4 = n3 ? e4.return : e4.child;
        for (; o4; ) {
          const e5 = l2(o4, t4, n3);
          if (e5)
            return e5;
          o4 = n3 ? null : o4.sibling;
        }
        return null;
      };
      d2 = (e4) => {
        const t4 = e4?.actualDuration ?? 0;
        let n3 = t4, o4 = e4?.child ?? null;
        for (; t4 > 0 && null != o4; )
          n3 -= o4.actualDuration ?? 0, o4 = o4.sibling;
        return n3;
      };
      p2 = (e4) => Boolean(e4.updateQueue?.memoCache);
      u2 = ["function", "object"];
      m2 = ({ onCommitStart: t4, onRender: i4, onCommitFinish: m3 }) => {
        const f3 = (n3, f4) => {
          if (we2.isPaused && "inspect-off" === we2.inspectState.kind || false === we2.options.enabled)
            return;
          t4();
          const h3 = (t5) => {
            const n4 = r3(t5.type);
            if (!n4)
              return null;
            if (!s2(t5))
              return null;
            const c3 = ((t6, n5) => {
              const r4 = [], i5 = t6.alternate?.memoizedProps, s3 = t6.memoizedProps;
              for (const t7 in { ...i5, ...s3 }) {
                const n6 = i5?.[t7], a3 = s3?.[t7];
                if (Object.is(n6, a3) || e3.isValidElement(n6) || e3.isValidElement(a3) || "children" === t7)
                  continue;
                const c4 = { name: t7, prevValue: n6, nextValue: a3, unstable: false };
                r4.push(c4);
                const l3 = o3(n6), d3 = o3(a3);
                u2.includes(typeof n6) && u2.includes(typeof a3) && l3 === d3 && (c4.unstable = true);
              }
              return { type: "props", count: 1, trigger: false, changes: r4, name: a2(n5), time: d2(t6), forget: p2(t6) };
            })(t5, n4), m4 = ((e4, t6) => {
              const n5 = [], r4 = ((e5, t7) => {
                const n6 = e5.dependencies, o4 = e5.alternate?.dependencies;
                if (!n6 || !o4)
                  return false;
                if ("object" != typeof n6 || !("firstContext" in n6) || "object" != typeof o4 || !("firstContext" in o4))
                  return false;
                let r5 = n6.firstContext, a3 = o4.firstContext;
                for (; r5 && "object" == typeof r5 && "memoizedValue" in r5 && a3 && "object" == typeof a3 && "memoizedValue" in a3; ) {
                  if (true === t7(r5, a3))
                    return true;
                  r5 = r5.next, a3 = a3.next;
                }
                return false;
              })(e4, (e5, t7) => {
                const r5 = e5.memoizedValue, a3 = t7.memoizedValue, i5 = { name: "", prevValue: r5, nextValue: a3, unstable: false };
                n5.push(i5);
                const s3 = o3(r5), c4 = o3(a3);
                u2.includes(typeof r5) && u2.includes(typeof a3) && s3 === c4 && (i5.unstable = true);
              });
              return r4 ? { type: "context", count: 1, trigger: false, changes: n5, name: a2(t6), time: d2(e4), forget: p2(e4) } : null;
            })(t5, n4);
            let f5 = false;
            if (t5.alternate) {
              const e4 = ((e5, t6) => {
                let n5 = e5.memoizedState, o4 = e5.alternate?.memoizedState;
                for (; n5 && o4; ) {
                  if (true === t6(n5, o4))
                    return true;
                  n5 = n5.next, o4 = o4.next;
                }
                return false;
              })(t5, (e5, t6) => !Object.is(e5.memoizedState, t6.memoizedState));
              e4 && (f5 = true);
            }
            const h4 = a2(n4);
            if (h4 && (((e4, t6) => {
              const [n5, o4] = (() => {
                const t7 = we2.reportDataByFiber.get(e4);
                if (t7)
                  return [e4, t7];
                if (!e4.alternate)
                  return [e4, null];
                const n6 = we2.reportDataByFiber.get(e4.alternate);
                return [e4.alternate, n6];
              })();
              if (o4)
                for (let e5 = 0, n6 = t6.length; e5 < n6; e5++) {
                  const n7 = t6[e5];
                  n7 && o4.badRenders.push(n7);
                }
              const r4 = d2(e4);
              we2.reportDataByFiber.set(n5, { count: (o4?.count ?? 0) + 1, time: (o4?.time ?? 0) + (0 !== r4 ? r4 : 0.1), badRenders: o4?.badRenders ?? [], displayName: a2(e4.type) }), we2.emit("reportDataByFiber", we2.reportDataByFiber);
            })(t5, [c3, m4]), ((e4, t6, n5) => {
              if (false === we2.options.report)
                return;
              const o4 = we2.reportData[e4];
              if (o4)
                for (let e5 = 0, t7 = n5.length; e5 < t7; e5++) {
                  const t8 = n5[e5];
                  t8 && o4.badRenders.push(t8);
                }
              const a3 = d2(t6) ?? 0;
              we2.reportData[e4] = { count: (o4?.count ?? 0) + 1, time: (o4?.time ?? 0) + a3, badRenders: o4?.badRenders || [], type: r3(t6.type) || t6.type };
            })(h4, t5, [c3, m4])), !c3 && !m4)
              return null;
            const g4 = we2.componentAllowList, y4 = g4?.has(t5.type) ?? g4?.has(t5.elementType);
            if (y4) {
              if (!l2(t5, (e4) => {
                const t6 = g4?.get(e4.type) ?? g4?.get(e4.elementType);
                return t6?.includeChildren;
              }, true) && !y4)
                return null;
            }
            c3 && (c3.trigger = f5, i4(t5, c3)), m4 && (m4.trigger = f5, i4(t5, m4)), f5 && i4(t5, { type: "state", count: 1, trigger: f5, changes: [], name: a2(n4), time: d2(t5), forget: p2(t5) }), c3 || m4 || f5 || i4(t5, { type: "misc", count: 1, trigger: f5, changes: [], name: a2(n4), time: d2(t5), forget: p2(t5) });
          }, g3 = f4.current, y3 = null !== g3.alternate && Boolean(g3.alternate.memoizedState?.element) && true !== g3.alternate.memoizedState.isDehydrated, w3 = Boolean(g3.memoizedState?.element), b3 = (e4, t5) => {
            let n4 = e4;
            for (; null != n4; ) {
              !c2(n4) && h3(n4), null != n4.child && b3(n4.child, true), n4 = t5 ? n4.sibling : null;
            }
          }, v3 = (e4, t5) => {
            if (!t5)
              return;
            if (!c2(e4) && h3(e4), e4.child !== t5.child) {
              let t6 = e4.child;
              for (; t6; ) {
                const e5 = t6.alternate;
                e5 ? v3(t6, e5) : b3(t6, false), t6 = t6.sibling;
              }
            }
          };
          !y3 && w3 ? b3(g3, false) : y3 && w3 && v3(g3, g3.alternate), m3();
        };
        we2.onCommitFiberRoot = (e4, t5) => {
          t5 && we2.fiberRoots.add(t5);
          try {
            f3(0, t5);
          } catch (e5) {
            console.error("[React Scan] Error instrumenting: ", e5);
          }
        }, n2({ onCommitFiberRoot: we2.onCommitFiberRoot });
      };
      f2 = (e4) => {
        let t4 = "";
        const n3 = /* @__PURE__ */ new Map();
        for (let t5 = 0, o5 = e4.length; t5 < o5; t5++) {
          const o6 = e4[t5], r5 = o6.name;
          if (!r5?.trim())
            continue;
          const { count: a3, trigger: i4, forget: s3 } = n3.get(r5) ?? { count: 0, trigger: false, forget: false };
          n3.set(r5, { count: a3 + o6.count, trigger: i4 || o6.trigger, forget: s3 || o6.forget });
        }
        const o4 = Array.from(n3.entries()).sort(([, e5], [, t5]) => t5.count - e5.count), r4 = [];
        for (const [e5, { count: t5, trigger: n4, forget: a3 }] of o4) {
          let o5 = e5;
          t5 > 1 && (o5 += ` \xD7${t5}`), n4 && (o5 = `\u{1F525} ${o5}`), a3 && (o5 = `${o5} \u2728`), r4.push(o5);
        }
        return t4 = r4.join(" "), t4.length ? (t4.length > 20 && (t4 = `${t4.slice(0, 20)}\u2026`), t4) : null;
      };
      h2 = (e4, t4) => {
        let n3 = 0;
        return (...o4) => {
          const r4 = Date.now();
          if (r4 - n3 >= t4)
            return n3 = r4, e4(...o4);
        };
      };
      g2 = (e4) => {
        for (let t4 = 0, n3 = e4.renders.length; t4 < n3; t4++) {
          const n4 = e4.renders[t4];
          if (n4.changes)
            for (let e5 = 0, t5 = n4.changes.length; e5 < t5; e5++) {
              if (n4.changes[e5].unstable)
                return true;
            }
        }
        return false;
      };
      y2 = "Menlo,Consolas,Monaco,Liberation Mono,Lucida Console,monospace";
      w2 = 115;
      b2 = 97;
      v2 = 230;
      x2 = 185;
      k2 = 49;
      C2 = 115;
      E2 = /* @__PURE__ */ new Map();
      S2 = (e4) => {
        const t4 = performance.now(), n3 = E2.get(e4);
        if (n3 && t4 - n3.timestamp < 32)
          return n3.rect;
        const o4 = window.getComputedStyle(e4);
        if ("none" === o4.display || "hidden" === o4.visibility || "0" === o4.opacity)
          return null;
        const r4 = e4.getBoundingClientRect();
        return r4.bottom > 0 && r4.right > 0 && r4.top < window.innerHeight && r4.left < window.innerWidth && r4.width && r4.height ? (E2.set(e4, { rect: r4, timestamp: t4 }), r4) : null;
      };
      M2 = (e4, t4) => {
        const n3 = ((e5) => {
          let t5 = l2(e5, i2);
          return t5 || (t5 = l2(e5, i2, true)), t5;
        })(e4);
        if (!n3)
          return null;
        const o4 = n3.stateNode;
        if (!(o4 instanceof HTMLElement))
          return null;
        let r4 = false, a3 = o4;
        for (; a3; ) {
          if (a3.hasAttribute("data-react-scan-ignore")) {
            r4 = true;
            break;
          }
          a3 = a3.parentElement;
        }
        if (r4)
          return null;
        const s3 = S2(o4);
        return s3 ? { rect: s3, domNode: o4, renders: [t4] } : null;
      };
      L2 = h2(() => {
        const { scheduledOutlines: e4, activeOutlines: t4 } = we2;
        for (let t5 = e4.length - 1; t5 >= 0; t5--) {
          const n3 = e4[t5], o4 = S2(n3.domNode);
          o4 ? n3.rect = o4 : e4.splice(t5, 1);
        }
        for (let e5 = t4.length - 1; e5 >= 0; e5--) {
          const n3 = t4[e5];
          if (!n3)
            continue;
          const { outline: o4 } = n3, r4 = S2(o4.domNode);
          r4 ? o4.rect = r4 : t4.splice(e5, 1);
        }
      }, 32);
      $ = (e4, t4 = /* @__PURE__ */ new Map()) => {
        if (!we2.scheduledOutlines.length)
          return;
        const n3 = we2.scheduledOutlines;
        we2.scheduledOutlines = [], L2();
        const o4 = /* @__PURE__ */ new Map();
        !async function(e5, t5) {
          new Promise((n4) => {
            const { options: o5 } = we2, r4 = o5.alwaysShowLabels ? 60 : 30, a3 = 0.8;
            o5.onPaintStart?.(t5);
            const i4 = t5.map((e6) => {
              const t6 = e6.renders;
              return { outline: e6, alpha: a3, frame: 0, totalFrames: r4, resolve: n4, text: f2(t6) };
            });
            we2.activeOutlines.push(...i4), T2 || (T2 = requestAnimationFrame(() => F2(e5)));
          });
        }(e4, n3.filter((e5) => {
          const n4 = ((e6) => `${e6.rect.top}-${e6.rect.left}-${e6.rect.width}-${e6.rect.height}`)(e5);
          return !t4.has(n4) && (o4.set(n4, e5), true);
        })), we2.scheduledOutlines.length && requestAnimationFrame(() => {
          $(e4, o4);
        });
      };
      T2 = null;
      F2 = (e4) => {
        const { activeOutlines: t4, options: n3 } = we2, o4 = window.devicePixelRatio || 1;
        e4.clearRect(0, 0, e4.canvas.width / o4, e4.canvas.height / o4);
        const r4 = /* @__PURE__ */ new Map();
        for (let e5 = t4.length - 1; e5 >= 0; e5--) {
          const o5 = t4[e5];
          if (!o5)
            continue;
          const { outline: a4 } = o5, { rect: i5 } = a4, s3 = `${i5.x}-${i5.y}`;
          if (r4.has(s3)) {
            const n4 = r4.get(s3);
            n4.outline.renders !== a4.renders && (n4.outline.renders = [...n4.outline.renders, ...a4.renders]), n4.alpha = Math.max(n4.alpha, o5.alpha), n4.frame = Math.min(n4.frame, o5.frame), n4.totalFrames = Math.max(n4.totalFrames, o5.totalFrames), t4.splice(e5, 1);
          } else
            r4.set(s3, o5);
          o5.frame++;
          const c3 = o5.frame / o5.totalFrames, l3 = g2(o5.outline) || n3.alwaysShowLabels ? 0.8 : 0.2;
          o5.alpha = l3 * (1 - c3), o5.frame >= o5.totalFrames && (o5.resolve(), t4.splice(e5, 1));
        }
        const a3 = [];
        e4.save();
        const i4 = n3.renderCountThreshold ?? 0;
        for (const t5 of Array.from(r4.values())) {
          const { outline: o5, frame: r5, totalFrames: s3 } = t5;
          let c3 = 0, l3 = 0;
          for (let e5 = 0, t6 = o5.renders.length; e5 < t6; e5++) {
            const t7 = o5.renders[e5];
            c3 += t7.count, l3 += t7.time;
          }
          const d3 = we2.options.maxRenders ?? 100, p3 = Math.min(c3 * (l3 || 1) / d3, 1), u3 = { r: Math.round(w2 + p3 * (x2 - w2)), g: Math.round(b2 + p3 * (k2 - b2)), b: Math.round(v2 + p3 * (C2 - v2)) }, { rect: m3 } = o5, h3 = g2(o5);
          if (i4 > 0) {
            let e5 = 0;
            for (let t6 = 0, n4 = o5.renders.length; t6 < n4; t6++) {
              e5 += o5.renders[t6].count;
            }
            if (e5 < i4)
              continue;
          }
          const y3 = h3 || n3.alwaysShowLabels, E3 = y3 ? 0.8 : 0.2;
          t5.alpha = E3 * (1 - r5 / s3);
          const S3 = t5.alpha, M3 = y3 ? 0.1 * t5.alpha : 0, L3 = `${u3.r},${u3.g},${u3.b}`;
          if (e4.strokeStyle = `rgba(${L3},${S3})`, e4.lineWidth = 1, e4.fillStyle = `rgba(${L3},${M3})`, e4.beginPath(), e4.rect(m3.x, m3.y, m3.width, m3.height), e4.stroke(), e4.fill(), y3) {
            const e5 = f2(o5.renders);
            a3.push({ alpha: S3, outline: o5, text: e5, color: u3 });
          }
        }
        e4.restore();
        for (let t5 = 0, n4 = a3.length; t5 < n4; t5++) {
          const { alpha: n5, outline: o5, text: r5, color: i5 } = a3[t5], { rect: s3 } = o5;
          if (e4.save(), r5) {
            e4.font = `11px ${y2}`;
            const t6 = e4.measureText(r5).width, o6 = 11, a4 = s3.x, c3 = s3.y - o6 - 4;
            e4.fillStyle = `rgba(${i5.r},${i5.g},${i5.b},${n5})`, e4.fillRect(a4, c3, t6 + 4, o6 + 4), e4.fillStyle = `rgba(255,255,255,${n5})`, e4.fillText(r5, a4 + 2, c3 + o6);
          }
          e4.restore();
        }
        T2 = t4.length ? requestAnimationFrame(() => F2(e4)) : null;
      };
      j2 = () => {
        class e4 extends HTMLElement {
          canvas;
          ctx;
          constructor() {
            super();
            const e5 = this.attachShadow({ mode: "open" });
            this.canvas = document.createElement("canvas"), this.setupCanvas(), e5.appendChild(this.canvas);
          }
          getContext() {
            return this.ctx;
          }
          setupCanvas() {
            this.canvas.id = "react-scan-canvas", this.canvas.style.position = "fixed", this.canvas.style.top = "0", this.canvas.style.left = "0", this.canvas.style.width = "100vw", this.canvas.style.height = "100vh", this.canvas.style.pointerEvents = "none", this.canvas.style.zIndex = "2147483646", this.canvas.setAttribute("aria-hidden", "true");
            const e5 = "OffscreenCanvas" in globalThis ? this.canvas.transferControlToOffscreen() : this.canvas;
            this.ctx = e5.getContext("2d");
            let t4 = false;
            const n3 = () => {
              const e6 = window.devicePixelRatio || 1;
              this.ctx.canvas.width = e6 * window.innerWidth, this.ctx.canvas.height = e6 * window.innerHeight, this.canvas.style.width = `${window.innerWidth}px`, this.canvas.style.height = `${window.innerHeight}px`, this.ctx.resetTransform(), this.ctx.scale(e6, e6), t4 = false;
            };
            n3(), window.addEventListener("resize", () => {
              L2(), t4 || (t4 = true, requestAnimationFrame(() => {
                n3();
              }));
            }), window.addEventListener("scroll", () => {
              L2();
            });
          }
        }
        return customElements.define("react-scan-overlay", e4), e4;
      };
      D2 = (e4) => {
        if (!e4)
          return null;
        const t4 = ((e5) => {
          if ("__REACT_DEVTOOLS_GLOBAL_HOOK__" in window) {
            const { renderers: t5 } = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (!t5)
              return null;
            for (const [n4, o4] of Array.from(t5))
              try {
                const t6 = o4.findFiberByHostInstance(e5);
                if (t6)
                  return t6;
              } catch (e6) {
              }
          }
          if ("_reactRootContainer" in e5)
            return e5._reactRootContainer?._internalRoot?.current?.child;
          for (const t5 in e5)
            if (t5.startsWith("__reactInternalInstance$") || t5.startsWith("__reactFiber"))
              return e5[t5];
          return null;
        })(e4);
        if (!t4)
          return null;
        const n3 = A2(t4);
        return n3 ? n3[0] : null;
      };
      A2 = (e4) => {
        let t4 = e4, n3 = null;
        for (; t4; ) {
          if (0 === t4.tag || 1 === t4.tag)
            return [t4, n3];
          i2(t4) && (n3 = t4), t4 = t4.return;
        }
      };
      _2 = (e4) => {
        if (!e4)
          return {};
        if (0 === e4.tag || 11 === e4.tag) {
          let t4 = e4.memoizedState;
          const n3 = {};
          let o4 = 0;
          for (; t4; )
            t4.queue && void 0 !== t4.memoizedState && (n3[o4] = t4.memoizedState), t4 = t4.next, o4++;
          return n3;
        }
        return 1 === e4.tag && e4.memoizedState || {};
      };
      P2 = (e4) => {
        let t4 = e4, n3 = null;
        for (; t4; ) {
          if (t4.stateNode && we2.fiberRoots.has(t4.stateNode)) {
            n3 = t4;
            break;
          }
          t4 = t4.return;
        }
        if (!n3)
          return false;
        return ((e5, t5) => !!l2(t5, (t6) => t6 === e5))(e4, n3.stateNode.current);
      };
      H2 = (e4) => {
        const t4 = D2(e4);
        if (!t4)
          return {};
        const n3 = P2(t4) ? t4 : t4.alternate ?? t4, o4 = ((e5) => {
          let t5 = e5;
          for (; t5; ) {
            if (t5.stateNode instanceof HTMLElement)
              return t5.stateNode;
            if (!t5.child)
              return null;
            t5 = t5.child;
          }
          return null;
        })(n3);
        if (!o4)
          return {};
        const r4 = S2(o4);
        if (!r4)
          return {};
        const a3 = A2(n3);
        if (!a3)
          return {};
        let [i4] = a3;
        return i4 = (P2(i4) ? i4 : i4.alternate) ?? i4, { parentCompositeFiber: i4, targetRect: r4 };
      };
      B2 = () => {
        if ("focused" !== we2.inspectState.kind)
          return false;
        const { focusedDomElement: e4 } = we2.inspectState;
        if (!e4)
          return false;
        let t4 = false;
        if (e4.parentElement) {
          const n3 = D2(e4);
          let o4 = e4.parentElement;
          for (; o4; ) {
            const e5 = D2(o4);
            if (!e5 || e5 !== n3) {
              t4 = true;
              break;
            }
            o4 = o4.parentElement;
          }
        }
        return t4;
      };
      N2 = false;
      I2 = false;
      q2 = 0;
      V2 = 0;
      W2 = 15;
      X2 = h2((e4) => {
        localStorage.setItem("react-scan-toolbar-width", String(e4));
      }, 100);
      Y2 = () => {
        if ("undefined" == typeof window)
          return () => {
          };
        const e4 = '\n<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-eye-off"><path d="M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49"/><path d="M14.084 14.158a3 3 0 0 1-4.242-4.242"/><path d="M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143"/><path d="m2 2 20 20"/></svg>\n  ', t4 = '<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-square-dashed-mouse-pointer"><path d="M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z"/><path d="M5 3a2 2 0 0 0-2 2"/><path d="M19 3a2 2 0 0 1 2 2"/><path d="M5 21a2 2 0 0 1-2-2"/><path d="M9 3h1"/><path d="M9 21h2"/><path d="M14 3h1"/><path d="M3 9v1"/><path d="M21 9v2"/><path d="M3 14v1"/></svg>', n3 = "150ms", o4 = '\n    <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-2"><path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/><path d="M16 9a5 5 0 0 1 0 6"/><path d="M19.364 18.364a9 9 0 0 0 0-12.728"/></svg>\n  ', r4 = ((e5) => {
          const t5 = document.createElement("template");
          return t5.innerHTML = e5.trim(), t5.content.firstElementChild;
        })(`
  <div id="react-scan-toolbar" style="
    position: fixed;
    z-index: 2147483647;
    font-family: ${y2};
    font-size: 13px;
    background: transparent;
    user-select: none;
    right: 24px;
    bottom: 24px;
    display: flex;
    flex-direction: column-reverse;
    align-items: flex-end;
    pointer-events: none;
    max-height: 450px;
  ">
    <div id="react-scan-toolbar-content" style="
      background: rgba(0, 0, 0, 0.95);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
      display: flex;
      flex-direction: column-reverse;
      cursor: move;
      pointer-events: auto;
      overflow: hidden;
      width: fit-content;
      min-width: min-content;
      position: relative;
    ">
      <div style="display: flex; align-items: center; height: 36px; width: 100%;">
        <button id="${fe2}" style="
          padding: 0 12px;
          display: flex;
          align-items: center;
          justify-content: center;
          background: none;
          border: none;
          color: #fff;
          cursor: pointer;
          transition: all ${n3} ease;
          height: 100%;
          min-width: 36px;
          outline: none;
        " title="Inspect element">
          ${t4}
        </button>
        <button id="react-scan-power" style="
          padding: 0 12px;
          display: flex;
          align-items: center;
          justify-content: center;
          background: none;
          border: none;
          color: #fff;
          cursor: pointer;
          transition: all ${n3} ease;
          height: 100%;
          min-width: 36px;
          outline: none;
        " title="Start">
          ${e4}
        </button>
        <button id="react-scan-sound-toggle" style="
          padding: 0 12px;
          display: flex;
          align-items: center;
          justify-content: center;
          background: none;
          border: none;
          color: #fff;
          cursor: pointer;
          transition: all ${n3} ease;
          height: 100%;
          min-width: 36px;
          outline: none;
        " title="Sound On">
          ${o4}
        </button>
        <div style="
          padding: 0 12px;
          color: #fff;
          border-left: 1px solid rgba(255, 255, 255, 0.1);
          display: flex;
          align-items: center;
          height: 100%;
          flex: 1;
          justify-content: space-evenly;
        ">
          <div style="display: flex; gap: 8px; align-items: center;">
            <button id="react-scan-parent-focus" style="
              padding: 4px 10px;
              display: none;
              align-items: center;
              justify-content: center;
              background: none;
              color: #fff;
              cursor: pointer;
              transition: all ${n3} ease;
              height: 26px;
              outline: none;
               border: none;
              font-size: 12px;
              white-space: nowrap;
               font-family: ${y2};
            ">jump to parent</button>
            <button id="react-scan-previous-focus" style="
              padding: 4px 10px;
              display: none;
              align-items: center;
              justify-content: center;
              background: none;
              color: #fff;
              cursor: pointer;
              transition: all ${n3} ease;
              height: 26px;
              outline: none;
               border: none;
              font-size: 12px;
              white-space: nowrap;
            "><svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-undo-2"><path d="M9 14 4 9l5-5"/><path d="M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5a5.5 5.5 0 0 1-5.5 5.5H11"/></svg></button>
          </div>
           <span style="font-size: 14px; font-weight: 500;">react-scan</span>
        </div>
      </div>
      <div id="react-scan-props" style="
        pointer-events: auto;
        background: #000;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        min-width: 100%;
        width: 360px;
        overflow: auto;
        max-height: 0;
        transition: max-height 500ms cubic-bezier(0, 0.95, 0.1, 1);
      ">
        <!-- Props content will be injected here -->
      </div>
      <div id="react-scan-resize-handle" style="
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        cursor: ew-resize;
        dis
      "></div>
    </div>
  </div>
`), a3 = document.createElement("style");
        a3.textContent = `
  #react-scan-toolbar {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  }


  .react-scan-inspector {
    font-size: 13px;
    width: 360px;
    color: #fff;
    width: 100%;
  }

  .react-scan-header {
    padding: 8px 12px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    gap: 8px;
    align-items: center;
    background: #000;
  }

  .react-scan-component-name {
    font-weight: 500;
    color: #fff;
  }

  .react-scan-metrics {
    color: #888;
    font-size: 12px;
  }

  .react-scan-content {
    padding: 12px;
    background: #000;
  }

  .react-scan-section {
    color: #888;
    margin-bottom: 16px;
    font-size: 12px;
  }

  .react-scan-section:last-child {
    margin-bottom: 0;
  }

  .react-scan-property {
    margin-left: 14px;
    margin-top: 8px;
    position: relative;
  }

  .react-scan-section > .react-scan-property:first-child {
    margin-top: 4px;
  }

  .react-scan-key {
    color: #fff;
  }

  .react-scan-string {
    color: #9ECBFF;
  }

  .react-scan-number {
    color: #79C7FF;
  }

  .react-scan-boolean {
    color: #56B6C2;
  }

  .react-scan-object-key {
    color: #fff;
  }

  .react-scan-array {
    color: #fff;
  }

  .react-scan-expandable {
    display: flex;
    align-items: flex-start;
  }

  .react-scan-arrow {
    cursor: pointer;
    content: '\u25B6';
    display: inline-block;
    font-size: 8px;
    margin: 5px 4px 0 0;
    transition: transform ${n3} ease;
    width: 8px;
    flex-shrink: 0;
    color: #888;
  }

  .react-scan-expanded > .react-scan-arrow {
    transform: rotate(90deg);
  }

  .react-scan-property-content {
    flex: 1;
    min-width: 0;
  }

  .react-scan-hidden {
    display: none;
  }

  .react-scan-array-container {
    overflow-y: auto;
    margin-left: 14px;
    margin-top: 8px;
    border-left: 1px solid rgba(255, 255, 255, 0.1);
    padding-left: 8px;
  }

  .react-scan-nested-object {
    margin-left: 14px;
    margin-top: 8px;
    border-left: 1px solid rgba(255, 255, 255, 0.1);
    padding-left: 8px;
  }

  .react-scan-nested-object > .react-scan-property {
    margin-top: 8px;
  }

  .react-scan-nested-object > .react-scan-property:first-child {
    margin-top: 0;
  }

 .react-scan-preview-line {
  position: relative;
  padding: 3px 6px;
  border-radius: 4px;
  font-family: 'Menlo', 'Monaco', 'Courier New', monospace;
  display: flex;
  align-items: center;
}
.react-scan-flash-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(142, 97, 227, 1);
  pointer-events: none;
  opacity: 0;
  z-index: 999999;
  mix-blend-mode: multiply;
  transition: opacity ${n3} ease-in;
  border-radius: 4px;
}

.react-scan-flash-active {
  opacity: 0.4;
  transition: opacity 300ms ease-in-out;
}

  /* Hover states */
  #react-scan-toolbar button:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  #react-scan-toolbar button:active {
    background: rgba(255, 255, 255, 0.15);
  }

  /* Focus states */
  #react-scan-toolbar button:focus-visible {
    outline: 2px solid #0070F3;
    outline-offset: -2px;
  }

  /* Scrollbar styling */
  .react-scan-props::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }

  .react-scan-props::-webkit-scrollbar-track {
    background: transparent;
  }

  .react-scan-props::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
  }

  .react-scan-props::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  ::-webkit-scrollbar {
  width: 4px;
  height: 4px;
}

::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.3);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.4);
}

/* For Firefox */
* {
  scrollbar-width: thin;
  scrollbar-color: rgba(255, 255, 255, 0.3) rgba(255, 255, 255, 0.1);
}
  `, document.head && document.head.appendChild(a3);
        const i4 = r4.querySelector(`#${fe2}`), s3 = r4.querySelector("#react-scan-power"), c3 = r4.querySelector("#react-scan-parent-focus"), l3 = r4.querySelector("#react-scan-previous-focus"), d3 = r4.querySelector("#react-scan-sound-toggle"), p3 = [], u3 = r4.querySelector("#react-scan-props"), m3 = r4.querySelector("#react-scan-toolbar-content"), f3 = r4.querySelector("#react-scan-resize-handle");
        let g3 = !we2.isPaused, w3 = false;
        document.documentElement.appendChild(r4);
        let b3 = 0, v3 = 0, x3 = 0, k3 = 0;
        const C3 = (e5, t5) => {
          r4.style.transform = `translate(${e5}px, ${t5}px)`;
        };
        C3(0, 0);
        const E3 = () => {
          const e5 = r4.getBoundingClientRect(), t5 = window.innerWidth, n4 = window.innerHeight, o5 = [{ edge: "left", distance: Math.abs(e5.left - W2), deltaX: W2 - e5.left, deltaY: 0 }, { edge: "right", distance: Math.abs(t5 - W2 - e5.right), deltaX: t5 - W2 - e5.right, deltaY: 0 }, { edge: "top", distance: Math.abs(e5.top - W2), deltaX: 0, deltaY: W2 - e5.top }, { edge: "bottom", distance: Math.abs(n4 - W2 - e5.bottom), deltaX: 0, deltaY: n4 - W2 - e5.bottom }].reduce((e6, t6) => t6.distance < e6.distance ? t6 : e6);
          x3 += o5.deltaX, k3 += o5.deltaY, r4.style.transition = "transform 300ms cubic-bezier(0.4, 0, 0.2, 1)", C3(x3, k3), setTimeout(() => {
            r4.style.transition = "";
          }, 300);
        };
        m3.addEventListener("mousedown", (e5) => {
          if (e5.target === i4 || e5.target === s3 || e5.target === c3 || e5.target === f3)
            return;
          N2 = true;
          const t5 = new DOMMatrix(getComputedStyle(r4).transform);
          x3 = t5.m41, k3 = t5.m42, b3 = e5.clientX - x3, v3 = e5.clientY - k3, r4.style.transition = "none", e5.preventDefault();
        }), f3.addEventListener("mousedown", (e5) => {
          I2 = true, q2 = u3.offsetWidth, V2 = e5.clientX, e5.preventDefault();
        }), document.addEventListener("mousemove", (e5) => {
          if (N2) {
            const t5 = e5.clientX - b3, n4 = e5.clientY - v3;
            x3 = t5, k3 = n4, C3(t5, n4);
          }
          if (I2) {
            const t5 = q2 - (e5.clientX - V2);
            u3.style.width = `${Math.max(360, t5)}px`, X2(t5);
          }
        }), document.addEventListener("mouseup", () => {
          N2 && (N2 = false, E3()), I2 && (I2 = false);
        });
        const S3 = () => {
          s3.innerHTML = g3 ? '\n <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-eye"><path d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"/><circle cx="12" cy="12" r="3"/></svg>\n  ' : e4, s3.title = g3 ? "Stop" : "Start", s3.style.color = g3 ? "#fff" : "#999";
          const n4 = "focused" === we2.inspectState.kind, r5 = "inspecting" === we2.inspectState.kind;
          r5 ? (i4.innerHTML = t4, i4.style.color = "rgba(142, 97, 227, 1)") : n4 ? (i4.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-square-mouse-pointer"><path d="M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z"/><path d="M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"/></svg>', i4.style.color = "rgba(142, 97, 227, 1)") : i4.style.color = "#999", r5 || n4 ? n4 && (f3.style.display = "block") : (u3.style.maxHeight = "0", u3.style.width = "fit-content", u3.innerHTML = "", f3.style.display = "none"), d3.innerHTML = w3 ? o4 : '\n    <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-x"><path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/><line x1="22" x2="16" y1="9" y2="15"/><line x1="16" x2="22" y1="9" y2="15"/></svg>\n  ', d3.style.color = w3 ? "#fff" : "#999", d3.title = w3 ? "Sound On" : "Sound Off", (() => {
            if ("focused" === we2.inspectState.kind) {
              const e5 = B2();
              if (!we2.inspectState.focusedDomElement)
                return c3.style.display = "none", void (l3.style.display = "none");
              c3.style.display = "flex", c3.style.color = e5 ? "#999" : "#444", c3.style.cursor = e5 ? "pointer" : "not-allowed", l3.style.display = p3.length > 0 ? "flex" : "none", l3.style.color = "#999", l3.style.cursor = "pointer";
            } else
              c3.style.display = "none", l3.style.display = "none";
          })();
        };
        s3.addEventListener("click", (e5) => {
          e5.stopPropagation(), g3 = !g3, we2.isPaused = !g3, localStorage.setItem("react-scan-paused", String(we2.isPaused)), S3();
        }), i4.addEventListener("click", (e5) => {
          e5.stopPropagation();
          const t5 = we2.inspectState;
          switch (t5.kind) {
            case "inspecting":
              return u3.innerHTML = "", u3.style.maxHeight = "0", u3.style.width = "fit-content", we2.inspectState = { kind: "inspect-off", propContainer: t5.propContainer }, void setTimeout(() => {
                "inspect-off" === we2.inspectState.kind && (we2.inspectState = { kind: "inspect-off", propContainer: t5.propContainer });
              }, 500);
            case "focused":
              u3.style.maxHeight = "0", u3.style.width = "fit-content", u3.innerHTML = "", we2.inspectState = { kind: "inspecting", hoveredDomElement: t5.focusedDomElement, propContainer: t5.propContainer };
              break;
            case "inspect-off":
              we2.inspectState = { kind: "inspecting", hoveredDomElement: null, propContainer: u3 };
          }
          S3();
        }), c3.addEventListener("click", (e5) => {
          e5.stopPropagation();
          const t5 = we2.inspectState;
          if ("focused" !== t5.kind)
            return;
          const { focusedDomElement: n4 } = t5;
          if (!n4 || !n4.parentElement)
            return;
          p3.push(n4);
          let o5 = n4.parentElement;
          const r5 = D2(n4);
          for (; o5; ) {
            const e6 = D2(o5);
            if (!e6 || e6.memoizedProps !== r5?.memoizedProps)
              break;
            o5 = o5.parentElement;
          }
          o5 && (we2.inspectState = { kind: "focused", focusedDomElement: o5, propContainer: t5.propContainer });
        }), l3.addEventListener("click", (e5) => {
          e5.stopPropagation();
          const t5 = we2.inspectState;
          if ("focused" !== t5.kind || 0 === p3.length)
            return;
          const n4 = p3.pop();
          n4 && (we2.inspectState = { kind: "focused", focusedDomElement: n4, propContainer: t5.propContainer });
        }), d3.addEventListener("click", (e5) => {
          e5.stopPropagation(), w3 = !w3, ve2({ playSound: w3 }), S3();
        }), S3();
        const M3 = document.getElementById("react-scan-toolbar");
        M3 && M3.remove(), r4.parentElement || document.documentElement.appendChild(r4), we2.inspectState = { kind: "inspect-off", propContainer: u3 }, we2.subscribe("inspectState", () => {
          S3();
        });
        const L3 = h2(() => {
          N2 || I2 || E3();
        }, 100);
        window.addEventListener("resize", L3), window.addEventListener("scroll", L3);
        return () => {
          window.removeEventListener("resize", L3), window.removeEventListener("scroll", L3);
        };
      };
      G2 = /* @__PURE__ */ new Set();
      U2 = /* @__PURE__ */ new WeakMap();
      K2 = (e4, t4, n3, o4) => {
        const r4 = ee2(() => Array.from(((e5) => {
          const t5 = /* @__PURE__ */ new Map();
          if (!e5)
            return t5;
          let n4 = e5;
          for (; n4; ) {
            const e6 = n4.dependencies;
            if (e6?.firstContext) {
              let n5 = e6.firstContext;
              for (; n5; ) {
                const e7 = n5.context, o5 = e7._currentValue;
                t5.has(e7) || t5.set(e7, o5), n5 = n5.next;
              }
            }
            if (n4.type?._context) {
              const e7 = n4.type._context, o5 = n4.memoizedProps?.value;
              t5.has(e7) || t5.set(e7, o5);
            }
            n4 = n4.return;
          }
          return t5;
        })(t4).entries()).map((e5) => e5[1]), []), a3 = t4.type?.displayName || t4.type?.name || "Unknown", i4 = t4.memoizedProps || {}, s3 = _2(t4) || {}, c3 = n3?.count || 0, l3 = n3?.time?.toFixed(2) || "0", d3 = new Set(((e5) => {
          const t5 = /* @__PURE__ */ new Set(), n4 = e5.memoizedProps || {}, o5 = e5.alternate?.memoizedProps || {};
          return Object.keys(n4).forEach((e6) => {
            n4[e6] !== o5[e6] && t5.add(e6);
          }), t5;
        })(t4)), p3 = new Set(((e5) => {
          const t5 = /* @__PURE__ */ new Set(), n4 = _2(e5), o5 = e5.alternate ? _2(e5.alternate) : {};
          return Object.keys(n4).forEach((e6) => {
            n4[e6] !== o5[e6] && t5.add(e6);
          }), t5;
        })(t4));
        o4.innerHTML = "";
        const u3 = document.createElement("div");
        u3.className = "react-scan-inspector";
        const m3 = document.createElement("div");
        m3.className = "react-scan-header", m3.innerHTML = `
    <span class="react-scan-component-name">${a3}</span>
    <span class="react-scan-metrics">${c3} renders \u2022 ${l3}ms</span>
  `, u3.appendChild(m3);
        const f3 = document.createElement("div");
        f3.className = "react-scan-content", Object.values(i4).length && ee2(() => {
          f3.appendChild(J2(a3, e4, o4, "Props", i4, d3));
        }, null), Object.values(s3).length && ee2(() => {
          f3.appendChild(J2(a3, e4, o4, "State", Object.values(s3), p3));
        }, null), r4.length && ee2(() => {
          f3.appendChild(J2(a3, e4, o4, "Context", r4));
        }, null), u3.appendChild(f3), o4.appendChild(u3), requestAnimationFrame(() => {
          const e5 = u3.getBoundingClientRect().height;
          o4.style.maxHeight = `${e5}px`;
        });
      };
      J2 = (e4, t4, n3, o4, r4, a3 = /* @__PURE__ */ new Set()) => {
        const i4 = document.createElement("div");
        return i4.className = "react-scan-section", i4.textContent = o4, Object.entries(r4).forEach(([r5, s3]) => {
          const c3 = te2(e4, t4, n3, r5, s3, o4.toLowerCase(), 0, a3, "", /* @__PURE__ */ new WeakMap());
          c3 && i4.appendChild(c3);
        }), i4;
      };
      Q2 = /* @__PURE__ */ new Map();
      Z2 = /* @__PURE__ */ new Map();
      ee2 = (e4, t4) => {
        try {
          return e4();
        } catch (e5) {
          return t4;
        }
      };
      te2 = (e4, t4, n3, o4, r4, a3 = "", i4 = 0, s3 = /* @__PURE__ */ new Set(), c3 = "", l3 = /* @__PURE__ */ new WeakMap()) => {
        try {
          O2 || (O2 = setInterval(() => {
            Q2.forEach((e5, t5) => {
              Date.now() - e5 > 450 && Q2.delete(t5);
            });
          }, 200));
          const d3 = document.createElement("div");
          d3.className = "react-scan-property";
          const p3 = "object" == typeof r4 && null !== r4 || Array.isArray(r4), u3 = ((e5, t5, n4, o5) => n4 ? `${e5}.${n4}.${o5}` : `${e5}.${t5}.${o5}`)(e4, a3, c3, o4);
          if (p3) {
            const c4 = G2.has(u3);
            if ("object" == typeof r4 && null !== r4) {
              let e5 = l3.get(r4);
              if (e5 || (e5 = /* @__PURE__ */ new Set(), l3.set(r4, e5)), e5.has(u3))
                return ne2(o4);
              e5.add(u3);
            }
            d3.classList.add("react-scan-expandable"), c4 && d3.classList.add("react-scan-expanded");
            const p4 = document.createElement("span");
            p4.className = "react-scan-arrow", p4.textContent = "\u25B6", d3.appendChild(p4);
            const m4 = document.createElement("div");
            m4.className = "react-scan-property-content";
            const f3 = document.createElement("div");
            f3.className = "react-scan-preview-line", f3.dataset.key = o4, f3.dataset.section = a3, f3.innerHTML = `
    <span class="react-scan-key">${o4}</span>: <span class="${oe2(r4)}">${re2(r4)}</span>
  `;
            const h3 = document.createElement("div");
            if (h3.className = c4 ? "react-scan-nested-object" : "react-scan-nested-object react-scan-hidden", m4.appendChild(f3), m4.appendChild(h3), d3.appendChild(m4), c4)
              if (Array.isArray(r4)) {
                const o5 = document.createElement("div");
                o5.className = "react-scan-array-container", r4.forEach((r5, c5) => {
                  const d4 = te2(e4, t4, n3, c5.toString(), r5, a3, i4 + 1, s3, u3, l3);
                  d4 && o5.appendChild(d4);
                }), h3.appendChild(o5);
              } else
                Object.entries(r4).forEach(([o5, r5]) => {
                  const c5 = te2(e4, t4, n3, o5, r5, a3, i4 + 1, s3, u3, l3);
                  c5 && h3.appendChild(c5);
                });
            p4.addEventListener("click", (o5) => {
              o5.stopPropagation();
              if (!d3.classList.contains("react-scan-expanded")) {
                if (G2.add(u3), d3.classList.add("react-scan-expanded"), h3.classList.remove("react-scan-hidden"), !h3.hasChildNodes())
                  if (Array.isArray(r4)) {
                    const o6 = document.createElement("div");
                    o6.className = "react-scan-array-container", r4.forEach((r5, c5) => {
                      const l4 = te2(e4, t4, n3, c5.toString(), r5, a3, i4 + 1, s3, u3, /* @__PURE__ */ new WeakMap());
                      l4 && o6.appendChild(l4);
                    }), h3.appendChild(o6);
                  } else
                    Object.entries(r4).forEach(([o6, r5]) => {
                      const c5 = te2(e4, t4, n3, o6, r5, a3, i4 + 1, s3, u3, /* @__PURE__ */ new WeakMap());
                      c5 && h3.appendChild(c5);
                    });
              } else
                G2.delete(u3), d3.classList.remove("react-scan-expanded"), h3.classList.add("react-scan-hidden");
              requestAnimationFrame(() => {
                const e5 = n3.firstElementChild;
                if (e5) {
                  const t5 = e5.getBoundingClientRect().height;
                  n3.style.maxHeight = `${t5}px`;
                }
              });
            });
          } else {
            const e5 = document.createElement("div");
            e5.className = "react-scan-preview-line", e5.dataset.key = o4, e5.dataset.section = a3, e5.innerHTML = `
    <span style="width: 8px; display: inline-block"></span>
    <span class="react-scan-key">${o4}</span>: <span class="${oe2(r4)}">${re2(r4)}</span>
  `, d3.appendChild(e5);
          }
          const m3 = void 0 !== Z2.get(u3) && Z2.get(u3) !== r4;
          if (Z2.set(u3, r4), m3 && Q2.set(u3, Date.now()), s3.has(o4) && Q2.set(u3, Date.now()), Q2.has(u3)) {
            const e5 = document.createElement("div");
            e5.className = "react-scan-flash-overlay", d3.appendChild(e5), e5.style.opacity = ".9";
            const t5 = U2.get(e5);
            void 0 !== t5 && clearTimeout(t5);
            const n4 = setTimeout(() => {
              e5.style.transition = "opacity 400ms ease-out", e5.style.opacity = "0", U2.delete(e5);
            }, 300);
            U2.set(e5, n4);
          }
          return d3;
        } catch {
          return null;
        }
      };
      ne2 = (e4) => {
        const t4 = document.createElement("div");
        t4.className = "react-scan-property";
        const n3 = document.createElement("div");
        return n3.className = "react-scan-preview-line", n3.innerHTML = `
    <span style="width: 8px; display: inline-block"></span>
    <span class="react-scan-key">${e4}</span>: <span class="react-scan-circular">[Circular Reference]</span>
  `, t4.appendChild(n3), t4;
      };
      oe2 = (e4) => {
        if (Array.isArray(e4))
          return "react-scan-array";
        if (null == e4)
          return "react-scan-null";
        switch (typeof e4) {
          case "string":
            return "react-scan-string";
          case "number":
            return "react-scan-number";
          case "boolean":
            return "react-scan-boolean";
          case "object":
            return "react-scan-object-key";
          default:
            return "";
        }
      };
      re2 = (e4) => {
        if (Array.isArray(e4))
          return `Array(${e4.length})`;
        if (null === e4)
          return "null";
        if (void 0 === e4)
          return "undefined";
        switch (typeof e4) {
          case "string":
            return `"${e4}"`;
          case "number":
          case "boolean":
            return e4.toString();
          case "object": {
            const t4 = Object.keys(e4);
            return t4.length <= 3 ? `{${t4.join(", ")}}` : `{${t4.slice(0, 3).join(", ")}, ...}`;
          }
          default:
            return typeof e4;
        }
      };
      ae2 = null;
      ie2 = null;
      se2 = "undefined" != typeof window && window.devicePixelRatio || 1;
      ce2 = null;
      le2 = (e4, t4, n3) => e4 * (1 - n3) + t4 * n3;
      de2 = (e4, t4, n3, o4) => {
        const { parentCompositeFiber: r4, targetRect: a3 } = H2(e4);
        if (!r4 || !a3)
          return;
        const i4 = we2.reportDataByFiber.get(r4) ?? (r4.alternate ? we2.reportDataByFiber.get(r4.alternate) : null), s3 = { count: i4?.count ?? 0, time: i4?.time ?? 0 };
        if (n3.save(), ae2) {
          null !== ce2 && cancelAnimationFrame(ce2);
          const e5 = () => {
            ae2 = { left: le2(ae2.left, a3.left, 0.1), top: le2(ae2.top, a3.top, 0.1), width: le2(ae2.width, a3.width, 0.1), height: le2(ae2.height, a3.height, 0.1) }, me2(ae2, t4, n3, o4, s3, r4);
            Math.abs(ae2.left - a3.left) > 0.1 || Math.abs(ae2.top - a3.top) > 0.1 || Math.abs(ae2.width - a3.width) > 0.1 || Math.abs(ae2.height - a3.height) > 0.1 ? ce2 = requestAnimationFrame(e5) : (ae2 = a3, ce2 = null);
          };
          ce2 = requestAnimationFrame(e5);
        } else
          me2(a3, t4, n3, o4, s3, r4), ae2 = a3;
        n3.restore();
      };
      pe2 = (e4, t4) => {
        e4 && (e4.width = Math.floor(window.innerWidth * se2), e4.height = Math.floor(window.innerHeight * se2), t4 && (t4.setTransform(1, 0, 0, 1, 0, 0), t4.scale(se2, se2)));
      };
      ue2 = (e4, t4, n3, o4, r4) => {
        let i4 = r4 ? a2(r4) ?? "Unknown" : "Unknown";
        n3.count && (i4 += ` \u2022 \xD7${n3.count}`, n3.time && (i4 += ` (${n3.time.toFixed(1)}ms)`)), e4.save(), e4.font = "12px system-ui, -apple-system, sans-serif";
        const s3 = "locked" === o4 ? 14 : 0, c3 = "locked" === o4 ? 6 : 0, l3 = e4.measureText(i4).width + 16 + s3 + c3, d3 = t4.left, p3 = t4.top - 24 - 4;
        if (e4.fillStyle = "rgb(37, 37, 38, .75)", e4.beginPath(), e4.roundRect(d3, p3, l3, 24, 3), e4.fill(), "locked" === o4) {
          const t5 = d3 + 8, n4 = p3 + (24 - s3) / 2 + 2;
          ((e5, t6, n5, o5) => {
            e5.save(), e5.strokeStyle = "white", e5.fillStyle = "white", e5.lineWidth = 1.5;
            const r5 = 0.6 * o5, a3 = 0.5 * o5, i5 = t6 + (o5 - r5) / 2, s4 = n5;
            e5.beginPath(), e5.arc(i5 + r5 / 2, s4 + a3 / 2, r5 / 2, Math.PI, 0, false), e5.stroke();
            const c4 = 0.8 * o5, l4 = 0.5 * o5, d4 = t6 + (o5 - c4) / 2, p4 = n5 + a3 / 2;
            e5.fillRect(d4, p4, c4, l4), e5.restore();
          })(e4, t5, n4, s3), ie2 = { x: t5, y: n4, width: s3, height: s3 };
        } else
          ie2 = null;
        e4.fillStyle = "white", e4.textBaseline = "middle";
        const u3 = d3 + 8 + ("locked" === o4 ? s3 + c3 : 0);
        e4.fillText(i4, u3, p3 + 12), e4.restore();
      };
      me2 = (e4, t4, n3, o4, r4, a3) => {
        n3.clearRect(0, 0, t4.width, t4.height), "locked" === o4 ? (n3.strokeStyle = "rgba(142, 97, 227, 0.5)", n3.fillStyle = "rgba(173, 97, 230, 0.10)", n3.setLineDash([])) : (n3.strokeStyle = "rgba(142, 97, 227, 0.5)", n3.fillStyle = "rgba(173, 97, 230, 0.10)", n3.setLineDash([4])), n3.lineWidth = 1, n3.fillRect(e4.left, e4.top, e4.width, e4.height), n3.strokeRect(e4.left, e4.top, e4.width, e4.height), ue2(n3, e4, r4, o4, a3);
      };
      fe2 = "react-scan-inspect-element-toggle";
      he2 = "react-scan-inspect-canvas";
      ge2 = () => {
        if ("undefined" == typeof window)
          return;
        let e4 = document.getElementById(he2);
        if (!e4) {
          e4 = document.createElement("canvas"), e4.id = he2, e4.style.cssText = "\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100vw;\n    height: 100vh;\n    pointer-events: none;\n    z-index: 214748367;\n  ", document.documentElement.appendChild(e4);
          const t5 = e4.getContext("2d", { alpha: true });
          if (!t5)
            return;
          pe2(e4, t5), window.addEventListener("resize", () => {
            pe2(e4, t5);
          });
        }
        const t4 = e4.getContext("2d", { alpha: true });
        if (!t4)
          return;
        const n3 = () => {
          cancelAnimationFrame(z2), t4.save(), t4.setTransform(1, 0, 0, 1, 0, 0), t4.clearRect(0, 0, e4.width, e4.height), t4.restore();
        }, o4 = {}, r4 = (e5) => {
          const t5 = () => {
            z2 && cancelAnimationFrame(z2), z2 = requestAnimationFrame(() => {
              e5(), t5();
            });
          };
          t5();
        };
        return we2.subscribeMultiple(["reportDataByFiber", "inspectState"], h2((a3) => {
          Object.entries(o4).forEach(([e5, t5]) => {
            t5();
          });
          const i4 = (() => {
            const o5 = a3.inspectState;
            switch (o5.kind) {
              case "uninitialized":
                return;
              case "inspect-off": {
                n3();
                const o6 = () => {
                  n3(), pe2(e4, t4);
                };
                return window.addEventListener("mousemove", o6), () => {
                  window.removeEventListener("mousemove", o6);
                };
              }
              case "inspecting": {
                r4(() => {
                  o5.hoveredDomElement && de2(o5.hoveredDomElement, e4, t4, "inspecting");
                });
                const a4 = document.createElement("div");
                a4.style.cssText = `
              position: fixed;
              left: 0;
              top: 0;
              width: 100vw;
              height: 100vh;
              z-index: ${parseInt(e4.style.zIndex) - 1};
              pointer-events: auto;
            `, e4.parentNode.insertBefore(a4, e4);
                let i5 = null;
                const s3 = h2((n4) => {
                  if ("inspecting" !== we2.inspectState.kind)
                    return;
                  a4.style.pointerEvents = "none";
                  const r5 = document.elementFromPoint(n4.clientX, n4.clientY);
                  a4.style.pointerEvents = "auto", r5 && (R2 = r5, i5 = r5, o5.hoveredDomElement = r5, de2(r5, e4, t4, "inspecting"));
                }, 16);
                window.addEventListener("mousemove", s3);
                const c3 = (n4) => {
                  n4.stopPropagation(), a4.style.pointerEvents = "none";
                  const r5 = i5 ?? document.elementFromPoint(n4.clientX, n4.clientY) ?? R2;
                  if (a4.style.pointerEvents = "auto", r5 && (de2(r5, e4, t4, "locked"), ((e5) => {
                    const t5 = localStorage.getItem("react-scan-toolbar-width");
                    e5.style.width = `${t5 ?? 360}px`;
                  })(o5.propContainer), we2.inspectState = { kind: "focused", focusedDomElement: r5, propContainer: o5.propContainer }, !B2())) {
                    const e5 = document.getElementById("react-scan-previous-focus"), t5 = document.getElementById("react-scan-parent-focus");
                    e5.style.display = "none", t5.style.display = "none";
                  }
                };
                window.addEventListener("click", c3);
                const l3 = (e5) => {
                  "Escape" === e5.key && (we2.inspectState = { kind: "inspect-off", propContainer: o5.propContainer }, n3());
                };
                window.addEventListener("keydown", l3);
                let d3 = () => {
                };
                return o5.hoveredDomElement && (d3 = ye2(o5.hoveredDomElement, () => {
                  de2(o5.hoveredDomElement, e4, t4, "inspecting");
                })), () => {
                  window.removeEventListener("click", c3), window.removeEventListener("mousemove", s3), window.removeEventListener("keydown", l3), a4.parentNode?.removeChild(a4), d3();
                };
              }
              case "focused": {
                if (r4(() => {
                  de2(o5.focusedDomElement, e4, t4, "locked");
                }), !document.contains(o5.focusedDomElement))
                  return setTimeout(() => {
                    n3();
                  }, 500), o5.propContainer.style.maxHeight = "0", o5.propContainer.style.width = "fit-content", o5.propContainer.innerHTML = "", void (we2.inspectState = { kind: "inspect-off", propContainer: o5.propContainer });
                de2(o5.focusedDomElement, e4, t4, "locked");
                const i5 = o5.focusedDomElement, { parentCompositeFiber: c3 } = H2(i5);
                if (!c3)
                  return;
                const l3 = a3.reportDataByFiber.get(c3) ?? (c3.alternate ? a3.reportDataByFiber.get(c3.alternate) : null), d3 = s2(c3);
                K2(d3, c3, l3, o5.propContainer);
                const p3 = (r5) => {
                  "Escape" === r5.key && (n3(), de2(r5.target ?? o5.focusedDomElement, e4, t4, "inspecting"), o5.propContainer.style.maxHeight = "0", o5.propContainer.style.width = "fit-content", o5.propContainer.innerHTML = "", we2.inspectState = { kind: "inspecting", hoveredDomElement: r5.target ?? o5.focusedDomElement, propContainer: o5.propContainer });
                };
                window.addEventListener("keydown", p3);
                const u3 = (r5) => {
                  if (!ie2)
                    return;
                  const a4 = e4.getBoundingClientRect(), i6 = e4.width / a4.width, s3 = e4.height / a4.height, c4 = (r5.clientX - a4.left) * i6, l4 = (r5.clientY - a4.top) * s3, d4 = c4 / se2, p4 = l4 / se2;
                  return d4 >= ie2.x && d4 <= ie2.x + ie2.width && p4 >= ie2.y && p4 <= ie2.y + ie2.height ? (o5.propContainer.innerHTML = "", o5.propContainer.style.maxHeight = "0", n3(), de2(r5.target, e4, t4, "inspecting"), r5.stopPropagation(), void (we2.inspectState = { kind: "inspecting", hoveredDomElement: r5.target, propContainer: o5.propContainer })) : void 0;
                };
                window.addEventListener("click", u3);
                const m3 = ye2(o5.focusedDomElement, () => {
                  de2(o5.focusedDomElement, e4, t4, "locked");
                });
                return () => {
                  m3(), window.removeEventListener("keydown", p3), window.removeEventListener("click", u3);
                };
              }
            }
          })();
          i4 && (o4[a3.inspectState.kind] = i4);
        }, 16)), () => {
        };
      };
      ye2 = (e4, t4) => {
        const n3 = () => {
          t4(e4);
        };
        return document.addEventListener("scroll", n3, { passive: true, capture: true }), () => {
          document.removeEventListener("scroll", n3, { capture: true });
        };
      };
      we2 = ((e4) => {
        const t4 = { ...e4 }, n3 = {}, o4 = (e5, t5) => {
          n3[e5]?.forEach((e6) => e6(t5));
        }, r4 = (e5, n4) => {
          t4[e5] !== n4 && (t4[e5] = n4, o4(e5, n4));
        }, a3 = (e5, o5) => (n3[e5] || (n3[e5] = []), n3[e5].push(o5), o5(t4[e5]), () => {
          n3[e5] = n3[e5].filter((e6) => e6 !== o5);
        }), i4 = (e5) => {
          for (const t5 in e5)
            Object.prototype.hasOwnProperty.call(e5, t5) && r4(t5, e5[t5]);
        }, s3 = (e5, o5) => (e5.forEach((e6) => {
          n3[e6] || (n3[e6] = []), n3[e6]?.push(() => o5(t4));
        }), () => {
          e5.forEach((e6) => {
            n3[e6] = n3[e6]?.filter((e7) => e7 !== o5);
          });
        });
        return new Proxy(t4, { get: (e5, t5, n4) => "subscribe" === t5 ? a3 : "setState" === t5 ? i4 : "emit" === t5 ? o4 : "set" === t5 ? r4 : "subscribeMultiple" === t5 ? s3 : Reflect.get(e5, t5, n4), set(e5, t5, n4) {
          if (t5 in e5)
            return r4(t5, n4), true;
          throw new Error(`Property "${String(t5)}" does not exist`);
        }, deleteProperty(e5, t5) {
          throw new Error(`Cannot delete property "${String(t5)}" from store`);
        } });
      })({ onCommitFiberRoot: (e4, t4) => {
      }, isInIframe: "undefined" != typeof window && window.self !== window.top, isPaused: "undefined" == typeof window || ((e4) => {
        try {
          return JSON.parse(e4);
        } catch {
          return "false";
        }
      })(localStorage.getItem("react-scan-paused") ?? "false"), componentAllowList: null, options: { enabled: true, includeChildren: true, playSound: false, log: false, showToolbar: true, renderCountThreshold: 0, report: void 0, alwaysShowLabels: false }, onRender: null, reportData: {}, reportDataByFiber: /* @__PURE__ */ new WeakMap(), scheduledOutlines: [], activeOutlines: [], fiberRoots: /* @__PURE__ */ new WeakSet(), inspectState: { kind: "uninitialized" } });
      ve2 = (e4) => {
        we2.options = { ...we2.options, ...e4 };
      };
      ke2 = () => {
        if ("undefined" == typeof window)
          return;
        if (document.querySelector("react-scan-overlay"))
          return;
        j2();
        const e4 = document.createElement("react-scan-overlay");
        document.documentElement.appendChild(e4), we2.options.showToolbar && Y2();
        const t4 = e4.getContext();
        ge2();
        const n3 = "undefined" != typeof window ? new (window.AudioContext || window.webkitAudioContext)() : null;
        (() => {
          const e5 = new PerformanceObserver((e6) => {
            const t5 = e6.getEntries();
            let n4 = 0;
            for (let e7 = 0, o4 = t5.length; e7 < o4; e7++)
              n4 += t5[e7].duration;
          });
          e5.observe({ entryTypes: ["longtask"] });
        })(), console.log("%c[\xB7] %cReact Scan", "font-weight:bold;color:#7a68e8;font-size:20px;", "font-weight:bold;font-size:14px;"), console.log("Try Million Lint to automatically optimize your app: https://million.dev"), globalThis.__REACT_SCAN__ = { ReactScanInternals: we2 }, m2({ onCommitStart() {
          we2.options.onCommitStart?.();
        }, onRender(e5, o4) {
          if (we2.isPaused)
            return;
          we2.options.onRender?.(e5, o4);
          const r4 = M2(e5, o4);
          if (r4) {
            if (we2.scheduledOutlines.push(r4), we2.options.playSound && n3) {
              const e6 = 10, t5 = Math.min(1, (o4.time - e6) / (2 * e6));
              ((e7, t6) => {
                const n4 = Math.max(0.5, t6), o5 = 1e-3, r5 = 440 + 200 * t6, a3 = e7.createOscillator();
                a3.type = "sine", a3.frequency.setValueAtTime(r5, e7.currentTime), a3.frequency.exponentialRampToValueAtTime(220, e7.currentTime + o5);
                const i4 = e7.createGain();
                i4.gain.setValueAtTime(n4, e7.currentTime), i4.gain.exponentialRampToValueAtTime(0.01, 5e-4), a3.connect(i4), i4.connect(e7.destination), a3.start(), a3.stop(e7.currentTime + o5);
              })(n3, t5);
            }
            $(t4, /* @__PURE__ */ new Map());
          }
        }, onCommitFinish() {
          we2.options.onCommitFinish?.();
        } });
      };
      Ee2 = (e4 = {}) => {
        ve2(e4);
        const { isInIframe: t4 } = we2;
        t4 || false === e4.enabled || ke2();
      };
    }
  });

  // runtime/src/core/dev/fps-stats.tsx
  function FPSStats({ graphWidth = 35, graphHeight = 15 }) {
    const [state, dispatch] = (0, import_react2.useReducer)(
      (state2) => {
        const currentTime = Date.now();
        if (currentTime > state2.prevTime + 1e3) {
          const nextFPS = [
            ...new Array(
              Math.floor((currentTime - state2.prevTime - 1e3) / 1e3)
            ).fill(0),
            Math.max(
              1,
              Math.round(state2.frames * 1e3 / (currentTime - state2.prevTime))
            )
          ];
          return {
            max: Math.max(state2.max, ...nextFPS),
            len: Math.min(state2.len + nextFPS.length, graphWidth),
            fps: [...state2.fps, ...nextFPS].slice(-graphWidth),
            frames: 1,
            prevTime: currentTime
          };
        }
        return { ...state2, frames: state2.frames + 1 };
      },
      {
        len: 0,
        max: 0,
        frames: 0,
        prevTime: Date.now(),
        fps: []
      }
    );
    const requestRef = (0, import_react2.useRef)();
    const tick = () => {
      dispatch();
      requestRef.current = requestAnimationFrame(tick);
    };
    (0, import_react2.useEffect)(() => {
      requestRef.current = requestAnimationFrame(tick);
      return () => cancelAnimationFrame(requestRef.current);
    }, []);
    const { fps, len } = state;
    const getColor = (fps2) => {
      if (fps2 >= 60)
        return "hsl(120, 100%, 50%)";
      const hue = Math.max(0, Math.min(120, (fps2 - 12) * 2.5));
      return `hsl(${hue}, 100%, 50%)`;
    };
    return /* @__PURE__ */ import_react2.default.createElement(
      "div",
      {
        style: {
          zIndex: 999999,
          color: "#fff",
          fontSize: "8px",
          fontFamily: "Helvetica, Arial, sans-serif",
          fontWeight: "semibold",
          boxSizing: "border-box",
          pointerEvents: "none"
        }
      },
      /* @__PURE__ */ import_react2.default.createElement("div", null, /* @__PURE__ */ import_react2.default.createElement(
        "span",
        {
          style: {
            fontSize: "11px"
          }
        },
        fps[len - 1]
      ), " ", "FPS"),
      /* @__PURE__ */ import_react2.default.createElement(
        "div",
        {
          style: {
            display: "flex",
            height: graphHeight,
            boxSizing: "border-box"
          }
        },
        fps.map((frame, i4) => /* @__PURE__ */ import_react2.default.createElement(
          "div",
          {
            key: `fps-${i4}`,
            style: {
              right: `${len - 1 - i4}px`,
              height: "100%",
              width: 1,
              background: frame === 0 ? "#414141" : getColor(frame),
              boxSizing: "border-box"
            }
          }
        ))
      )
    );
  }
  var import_react2, fps_stats_default;
  var init_fps_stats = __esm({
    "runtime/src/core/dev/fps-stats.tsx"() {
      import_react2 = __toESM(require_react());
      fps_stats_default = FPSStats;
    }
  });

  // runtime/src/core/dev/select.ts
  var getFiberFromElement, getParentComponentFiber, getChildComponentFiber, getDisplayName, destroySelections, _selection, _selectionLite, _indicator, isPending, pendingSelections, acquirableSelectionElements, createSelectionAreaElement, startSelection;
  var init_select = __esm({
    "runtime/src/core/dev/select.ts"() {
      init_utils();
      init_constants();
      init_core();
      getFiberFromElement = (element) => {
        if ("__REACT_DEVTOOLS_GLOBAL_HOOK__" in _window) {
          const { renderers } = _window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (!renderers)
            return null;
          for (const renderer of renderers.values()) {
            try {
              const fiber = renderer.findFiberByHostInstance(element);
              if (fiber) {
                return fiber;
              }
            } catch (e4) {
            }
          }
        }
        if ("_reactRootContainer" in element) {
          return element._reactRootContainer._internalRoot.current.child;
        }
        for (const key in element) {
          if (key.startsWith("__reactInternalInstance$") || key.startsWith("__reactFiber")) {
            return element[key];
          }
        }
        return _null;
      };
      getParentComponentFiber = (fiber) => {
        if (!fiber)
          return _null;
        if (typeof fiber.type === "function" && fiber.type[FLAG]) {
          return fiber;
        }
        return getParentComponentFiber(fiber._debugOwner);
      };
      getChildComponentFiber = (fiber) => {
        if (!fiber)
          return _null;
        if (typeof fiber.type === "function" || typeof fiber.type === "object") {
          return fiber;
        }
        return getChildComponentFiber(fiber._debugOwner);
      };
      getDisplayName = (fiber) => {
        if (!fiber)
          return void 0;
        const { elementType, type } = fiber;
        if (typeof type === "string") {
          return type;
        }
        return type.displayName || type.name || elementType.displayName || elementType.name;
      };
      destroySelections = () => {
        acquirableSelectionElements.forEach((selection) => selection.remove());
        pendingSelections.clear();
        const selections = document.getElementsByClassName("million-select");
        for (const selection of selections) {
          selection.remove();
        }
      };
      _selection = document.createElement("div");
      _selection.className = "million-select";
      _selection.setAttribute("aria-hidden", "true");
      _selection.style.cssText = `
  position: fixed;
  border-radius: 4px;
  background-color: #8048de5e;
  z-index: 2147483647;
  border: 1px dashed #8048de;
  pointer-events: none;
  user-select: none;
  opacity: 1;
  transition: all 1000ms ease;
`;
      _selectionLite = _selection.cloneNode(true);
      _selectionLite.style.backgroundColor = "transparent";
      _selectionLite.style.border = "1px solid #8048de5e";
      _selectionLite.style.boxShadow = "0px 0px 1.5px 1.5px rgba(128, 72, 222, 0.1)";
      _indicator = document.createElement("div");
      _indicator.setAttribute("aria-hidden", "true");
      _indicator.style.cssText = `
  position: absolute;
  left: 4px;
  color: white;
  font-family: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace;
  font-size: 10px;
  padding: 2px 4px;
  background-color: #8048de;
  border-radius: 2px;
  z-index: 2147483646;
  top: -16px;
  pointer-events: none;
  user-select: none;
`;
      isPending = false;
      pendingSelections = /* @__PURE__ */ new Set();
      acquirableSelectionElements = [];
      createSelectionAreaElement = (element, name, translucent = false, lite = false, _color = _null, minimal = false) => {
        const fail = { selection: _null, indicator: _null, fadeOut: _null };
        if (isPending)
          return fail;
        isPending = true;
        const selection = lite ? acquirableSelectionElements.length ? acquirableSelectionElements.pop() : _selectionLite.cloneNode() : _selection.cloneNode();
        const rect = element.getBoundingClientRect();
        if (rect.top < 0 || rect.bottom > window.innerHeight) {
          isPending = false;
          return fail;
        }
        const { top, left } = rect;
        const { offsetWidth, offsetHeight } = element;
        const key = `${top}-${left}-${offsetWidth}-${offsetHeight}-${name}`;
        if (pendingSelections.has(key) && lite) {
          isPending = false;
          return fail;
        }
        pendingSelections.add(key);
        if (!selection)
          return fail;
        selection.style.top = `${top - 2}px`;
        selection.style.left = `${left - 4}px`;
        selection.style.width = `${offsetWidth + 8}px`;
        selection.style.height = `${offsetHeight + 4}px`;
        selection.style.opacity = translucent ? "0.5" : "1";
        if (minimal) {
          selection.style.border = "none";
          selection.style.boxShadow = "none";
          selection.style.backgroundColor = "transparent";
        }
        const indicator = _indicator.cloneNode();
        if (minimal) {
          indicator.style.fontFamily = "sans";
          indicator.style.backgroundColor = "transparent";
          indicator.style.opacity = "0.1";
          indicator.style.fontSize = "8px";
          indicator.textContent = "\u26A0\uFE0F";
          indicator.style.filter = "grayscale(0.5)";
        } else {
          indicator.textContent = name;
        }
        if (minimal || name)
          selection.appendChild(indicator);
        const fadeOut = () => {
          requestAnimationFrame(() => {
            selection.style.opacity = "0";
            setTimeout(() => {
              acquirableSelectionElements.push(selection);
              setTimeout(() => {
                pendingSelections.delete(key);
              }, 16);
              setTimeout(() => {
                acquirableSelectionElements.pop()?.remove();
              }, 750);
            }, 1e3);
          });
        };
        isPending = false;
        return { selection, indicator, fadeOut };
      };
      startSelection = (uriScheme, onChange) => {
        destroySelections();
        let destroyHovered = _null;
        let currentSelection = _null;
        let currentFiber2 = _null;
        let freeze = false;
        const createSelection = (element, name, translucent = false) => {
          if (freeze)
            return _null;
          const { selection, indicator } = createSelectionAreaElement(
            element,
            name,
            translucent
          );
          if (!selection)
            return _null;
          document.body.appendChild(selection);
          currentSelection = selection;
          try {
            const destroy2 = () => {
              if (document.body.contains(selection)) {
                document.body.removeChild(selection);
              }
            };
            return destroy2;
          } finally {
            const selectionRect = selection.getBoundingClientRect();
            const indicatorRect = indicator.getBoundingClientRect();
            if (indicatorRect.top < 0 || indicatorRect.bottom > window.innerHeight) {
              indicator.style.top = "0";
            }
            if (selectionRect.height < indicatorRect.height) {
              indicator.style.top = `-${selectionRect.top - indicatorRect.bottom + 16}px`;
            }
          }
        };
        const resetHovered = () => {
          if (destroyHovered) {
            destroyHovered();
            destroyHovered = _null;
            currentSelection = _null;
          }
        };
        resetHovered();
        onChange({
          selector: _null,
          destroy: _null
        });
        document.addEventListener("mouseleave", resetHovered);
        const hoverSelection = debounce((event) => {
          if (freeze || !event)
            return;
          requestAnimationFrame(() => {
            const element = document.elementFromPoint(event.clientX, event.clientY);
            if (!element || freeze)
              return;
            resetHovered();
            const fiber = getFiberFromElement(element);
            if (!fiber)
              return;
            let parentComponentFiber = getParentComponentFiber(fiber);
            let needsTranslucent = false;
            if (!parentComponentFiber) {
              parentComponentFiber = fiber?._debugOwner || fiber?.return || fiber;
              needsTranslucent = true;
            }
            let childComponentFiber = getChildComponentFiber(fiber) || fiber;
            childComponentFiber = fiber;
            if (!parentComponentFiber)
              return;
            currentFiber2 = parentComponentFiber;
            const metadata2 = componentMetadata.get(parentComponentFiber.type[FLAG]);
            const type = parentComponentFiber.type;
            if (destroyHovered)
              resetHovered();
            const parentName = getDisplayName(parentComponentFiber);
            const childName = getDisplayName(childComponentFiber);
            const selectedName = metadata2?._ ? metadata2._.componentName : parentName;
            const selectedChildName = !childName || parentName === childName ? getDisplayName(fiber) : childName;
            destroyHovered = createSelection(
              element,
              selectedName ? `${selectedName} > ${selectedChildName}` : selectedChildName || "?",
              needsTranslucent
            );
            onChange({
              selector: type[FLAG]
            });
          });
        }, 1);
        document.addEventListener("mousemove", hoverSelection);
        const clickSelection = (event) => {
          if (event.target === currentSelection) {
            event.stopPropagation();
            event.stopImmediatePropagation();
            event.preventDefault();
          }
          if (!currentSelection)
            return;
          if (freeze) {
            freeze = false;
            currentSelection.style.border = "1px dashed #8048de";
            resetHovered();
            return;
          }
          currentSelection.style.border = "2px dashed #8048de";
          if (!currentFiber2)
            return;
          const metadata2 = componentMetadata.get(currentFiber2.type[FLAG]);
          if (!metadata2?._)
            return;
          freeze = true;
          if (confirm(`Do you want to open ${metadata2._.componentName}?`)) {
            _window.location.assign(`${uriScheme}://file/${metadata2._.filename}`);
          }
        };
        document.addEventListener("click", clickSelection);
        const destroy = () => {
          freeze = true;
          onChange({
            selector: _null,
            destroy: _null
          });
          document.removeEventListener("mousemove", hoverSelection);
          document.removeEventListener("click", clickSelection);
          document.removeEventListener("mouseleave", resetHovered);
          document.removeEventListener("keydown", handleEscape);
          resetHovered();
          destroySelections();
        };
        const handleEscape = (event) => {
          if (event.key === "Escape") {
            if (freeze) {
              freeze = false;
              if (currentSelection) {
                currentSelection.style.border = "1px dashed #8048de";
              }
              resetHovered();
              return;
            }
            destroy();
          }
        };
        document.addEventListener("keydown", handleEscape);
        return destroy;
      };
    }
  });

  // runtime/src/core/dev/feedback.tsx
  var import_react3, FeedbackSurvey;
  var init_feedback = __esm({
    "runtime/src/core/dev/feedback.tsx"() {
      import_react3 = __toESM(require_react());
      init_esm();
      FeedbackSurvey = ({
        survey,
        setIsOpen
      }) => {
        const posthog = usePostHog();
        const handleSubmit = (0, import_react3.useCallback)((e4) => {
          e4.preventDefault();
          const formData = new FormData(e4.target);
          const feedback = formData.get("feedback");
          const email = formData.get("email");
          if (!email || !feedback)
            return;
          posthog.identify(email.toString());
          posthog.capture("survey sent", {
            $survey_id: survey.id,
            // eslint-disable-next-line @typescript-eslint/no-base-to-string
            $survey_response: feedback?.toString()
          });
          setButtonText("Thank you!");
          setTimeout(() => {
            setIsOpen(false);
          }, 2e3);
        }, []);
        const [buttonText, setButtonText] = (0, import_react3.useState)(
          survey.questions[0].buttonText ?? "Submit"
        );
        return /* @__PURE__ */ import_react3.default.createElement(
          "div",
          {
            style: {
              position: "fixed",
              inset: 0,
              backgroundColor: "rgba(0, 0, 0, 0.7)",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              padding: "1rem"
            }
          },
          /* @__PURE__ */ import_react3.default.createElement(
            "div",
            {
              style: {
                userSelect: "none",
                backgroundColor: "#1E1E1E",
                borderRadius: "0.5rem",
                boxShadow: "0 10px 15px rgba(0, 0, 0, 0.3)",
                width: "100%",
                maxWidth: "28rem",
                position: "relative"
              }
            },
            /* @__PURE__ */ import_react3.default.createElement(
              "button",
              {
                onClick: () => setIsOpen(false),
                style: {
                  position: "absolute",
                  top: "0.5rem",
                  right: "0.5rem",
                  color: "#FFFFFF",
                  backgroundColor: "transparent",
                  border: "none",
                  outline: "none"
                }
              },
              /* @__PURE__ */ import_react3.default.createElement(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "1em",
                  height: "1em",
                  viewBox: "0 0 24 24"
                },
                /* @__PURE__ */ import_react3.default.createElement(
                  "path",
                  {
                    fill: "none",
                    stroke: "currentColor",
                    "stroke-linecap": "round",
                    "stroke-linejoin": "round",
                    "stroke-width": "2",
                    d: "M18 6L6 18M6 6l12 12"
                  }
                )
              )
            ),
            /* @__PURE__ */ import_react3.default.createElement("form", { onSubmit: handleSubmit }, /* @__PURE__ */ import_react3.default.createElement(
              "div",
              {
                style: {
                  padding: "1rem 1.5rem 1rem",
                  display: "flex",
                  flexDirection: "column",
                  gap: "0.2rem"
                }
              },
              /* @__PURE__ */ import_react3.default.createElement(
                "h2",
                {
                  style: {
                    marginBottom: "0.5rem",
                    fontWeight: 500,
                    color: "#FFFFFF",
                    textAlign: "center"
                  }
                },
                survey.questions[0].question
              ),
              /* @__PURE__ */ import_react3.default.createElement(
                "input",
                {
                  name: "email",
                  type: "email",
                  placeholder: "Email",
                  style: {
                    marginTop: "0.50rem",
                    padding: "0.50rem",
                    borderRadius: "0.250rem",
                    marginBottom: "1rem",
                    border: "none",
                    fontSize: "0.75rem",
                    lineHeight: "1rem",
                    color: "#FFFFFF",
                    backgroundColor: "#2C2C2C"
                  }
                }
              ),
              /* @__PURE__ */ import_react3.default.createElement(
                "textarea",
                {
                  name: "feedback",
                  style: {
                    padding: "0.50rem",
                    marginBottom: "1rem",
                    borderRadius: "0.250rem",
                    border: "none",
                    fontSize: "0.75rem",
                    lineHeight: "1rem",
                    color: "#FFFFFF",
                    backgroundColor: "#2C2C2C"
                  },
                  rows: 4,
                  placeholder: "I found a bug..."
                }
              ),
              /* @__PURE__ */ import_react3.default.createElement(
                "button",
                {
                  style: {
                    display: "inline-flex",
                    position: "relative",
                    justifyContent: "center",
                    alignItems: "center",
                    borderRadius: "0.125rem",
                    borderColor: "#FFFFFF",
                    outlineStyle: "none",
                    width: "100%",
                    fontSize: "0.75rem",
                    lineHeight: "1rem",
                    fontWeight: 600,
                    color: "#000000",
                    backgroundColor: "#FFFFFF",
                    transitionProperty: "all",
                    cursor: "pointer",
                    boxShadow: "0 1px 2px 0 rgba(255, 255, 255, 0.1)",
                    padding: "12px"
                  },
                  type: "submit",
                  onMouseOver: (e4) => (
                    // @ts-expect-error lol
                    e4.target.style.backgroundColor = "rgba(255, 255, 255, 0.9)"
                  ),
                  onMouseOut: (e4) => e4.target.style.backgroundColor = "white"
                },
                buttonText
              )
            ))
          )
        );
      };
    }
  });

  // runtime/src/core/dev/use-ses-shim.js
  var import_react5, useSES, useSyncExternalStore;
  var init_use_ses_shim = __esm({
    "runtime/src/core/dev/use-ses-shim.js"() {
      import_react5 = __toESM(require_react());
      (function() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactSharedInternals2 = import_react5.default.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED || {
          ReactDebugCurrentFrame: {
            getStackAddendum: () => ""
          }
        };
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals2.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function is2(x3, y3) {
          return x3 === y3 && (x3 !== 0 || 1 / x3 === 1 / y3) || x3 !== x3 && y3 !== y3;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        var useState5 = import_react5.default.useState, useEffect7 = import_react5.default.useEffect, useLayoutEffect3 = import_react5.default.useLayoutEffect, useDebugValue = import_react5.default.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore3(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (import_react5.default.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error(
                  "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
                );
              }
            }
          }
          var value2 = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value2, cachedValue)) {
                error(
                  "The result of getSnapshot should be cached to avoid an infinite loop"
                );
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState5({
            inst: {
              value: value2,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect3(
            function() {
              inst.value = value2;
              inst.getSnapshot = getSnapshot;
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            },
            [subscribe, value2, getSnapshot]
          );
          useEffect7(
            function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
              var handleStoreChange = function() {
                if (checkIfSnapshotChanged(inst)) {
                  forceUpdate({
                    inst
                  });
                }
              };
              return subscribe(handleStoreChange);
            },
            [subscribe]
          );
          useDebugValue(value2);
          return value2;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore3;
        var useSyncExternalStore$2 = import_react5.default.useSyncExternalStore !== void 0 ? import_react5.default.useSyncExternalStore : shim;
        useSES = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
      useSyncExternalStore = useSES;
    }
  });

  // ../../node_modules/.pnpm/engine.io-parser@5.2.2/node_modules/engine.io-parser/build/esm/commons.js
  var PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET;
  var init_commons = __esm({
    "../../node_modules/.pnpm/engine.io-parser@5.2.2/node_modules/engine.io-parser/build/esm/commons.js"() {
      PACKET_TYPES = /* @__PURE__ */ Object.create(null);
      PACKET_TYPES["open"] = "0";
      PACKET_TYPES["close"] = "1";
      PACKET_TYPES["ping"] = "2";
      PACKET_TYPES["pong"] = "3";
      PACKET_TYPES["message"] = "4";
      PACKET_TYPES["upgrade"] = "5";
      PACKET_TYPES["noop"] = "6";
      PACKET_TYPES_REVERSE = /* @__PURE__ */ Object.create(null);
      Object.keys(PACKET_TYPES).forEach((key) => {
        PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
      });
      ERROR_PACKET = { type: "error", data: "parser error" };
    }
  });

  // ../../node_modules/.pnpm/engine.io-parser@5.2.2/node_modules/engine.io-parser/build/esm/encodePacket.browser.js
  function toArray(data) {
    if (data instanceof Uint8Array) {
      return data;
    } else if (data instanceof ArrayBuffer) {
      return new Uint8Array(data);
    } else {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
    }
  }
  function encodePacketToBinary(packet, callback) {
    if (withNativeBlob && packet.data instanceof Blob) {
      return packet.data.arrayBuffer().then(toArray).then(callback);
    } else if (withNativeArrayBuffer && (packet.data instanceof ArrayBuffer || isView(packet.data))) {
      return callback(toArray(packet.data));
    }
    encodePacket(packet, false, (encoded) => {
      if (!TEXT_ENCODER) {
        TEXT_ENCODER = new TextEncoder();
      }
      callback(TEXT_ENCODER.encode(encoded));
    });
  }
  var withNativeBlob, withNativeArrayBuffer, isView, encodePacket, encodeBlobAsBase64, TEXT_ENCODER;
  var init_encodePacket_browser = __esm({
    "../../node_modules/.pnpm/engine.io-parser@5.2.2/node_modules/engine.io-parser/build/esm/encodePacket.browser.js"() {
      init_commons();
      withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
      withNativeArrayBuffer = typeof ArrayBuffer === "function";
      isView = (obj) => {
        return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
      };
      encodePacket = ({ type, data }, supportsBinary, callback) => {
        if (withNativeBlob && data instanceof Blob) {
          if (supportsBinary) {
            return callback(data);
          } else {
            return encodeBlobAsBase64(data, callback);
          }
        } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {
          if (supportsBinary) {
            return callback(data);
          } else {
            return encodeBlobAsBase64(new Blob([data]), callback);
          }
        }
        return callback(PACKET_TYPES[type] + (data || ""));
      };
      encodeBlobAsBase64 = (data, callback) => {
        const fileReader = new FileReader();
        fileReader.onload = function() {
          const content = fileReader.result.split(",")[1];
          callback("b" + (content || ""));
        };
        return fileReader.readAsDataURL(data);
      };
    }
  });

  // ../../node_modules/.pnpm/engine.io-parser@5.2.2/node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js
  var chars, lookup, decode;
  var init_base64_arraybuffer = __esm({
    "../../node_modules/.pnpm/engine.io-parser@5.2.2/node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js"() {
      chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      lookup = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
      for (let i4 = 0; i4 < chars.length; i4++) {
        lookup[chars.charCodeAt(i4)] = i4;
      }
      decode = (base64) => {
        let bufferLength = base64.length * 0.75, len = base64.length, i4, p3 = 0, encoded1, encoded2, encoded3, encoded4;
        if (base64[base64.length - 1] === "=") {
          bufferLength--;
          if (base64[base64.length - 2] === "=") {
            bufferLength--;
          }
        }
        const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
        for (i4 = 0; i4 < len; i4 += 4) {
          encoded1 = lookup[base64.charCodeAt(i4)];
          encoded2 = lookup[base64.charCodeAt(i4 + 1)];
          encoded3 = lookup[base64.charCodeAt(i4 + 2)];
          encoded4 = lookup[base64.charCodeAt(i4 + 3)];
          bytes[p3++] = encoded1 << 2 | encoded2 >> 4;
          bytes[p3++] = (encoded2 & 15) << 4 | encoded3 >> 2;
          bytes[p3++] = (encoded3 & 3) << 6 | encoded4 & 63;
        }
        return arraybuffer;
      };
    }
  });

  // ../../node_modules/.pnpm/engine.io-parser@5.2.2/node_modules/engine.io-parser/build/esm/decodePacket.browser.js
  var withNativeArrayBuffer2, decodePacket, decodeBase64Packet, mapBinary;
  var init_decodePacket_browser = __esm({
    "../../node_modules/.pnpm/engine.io-parser@5.2.2/node_modules/engine.io-parser/build/esm/decodePacket.browser.js"() {
      init_commons();
      init_base64_arraybuffer();
      withNativeArrayBuffer2 = typeof ArrayBuffer === "function";
      decodePacket = (encodedPacket, binaryType) => {
        if (typeof encodedPacket !== "string") {
          return {
            type: "message",
            data: mapBinary(encodedPacket, binaryType)
          };
        }
        const type = encodedPacket.charAt(0);
        if (type === "b") {
          return {
            type: "message",
            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
          };
        }
        const packetType = PACKET_TYPES_REVERSE[type];
        if (!packetType) {
          return ERROR_PACKET;
        }
        return encodedPacket.length > 1 ? {
          type: PACKET_TYPES_REVERSE[type],
          data: encodedPacket.substring(1)
        } : {
          type: PACKET_TYPES_REVERSE[type]
        };
      };
      decodeBase64Packet = (data, binaryType) => {
        if (withNativeArrayBuffer2) {
          const decoded = decode(data);
          return mapBinary(decoded, binaryType);
        } else {
          return { base64: true, data };
        }
      };
      mapBinary = (data, binaryType) => {
        switch (binaryType) {
          case "blob":
            if (data instanceof Blob) {
              return data;
            } else {
              return new Blob([data]);
            }
          case "arraybuffer":
          default:
            if (data instanceof ArrayBuffer) {
              return data;
            } else {
              return data.buffer;
            }
        }
      };
    }
  });

  // ../../node_modules/.pnpm/engine.io-parser@5.2.2/node_modules/engine.io-parser/build/esm/index.js
  function createPacketEncoderStream() {
    return new TransformStream({
      transform(packet, controller) {
        encodePacketToBinary(packet, (encodedPacket) => {
          const payloadLength = encodedPacket.length;
          let header;
          if (payloadLength < 126) {
            header = new Uint8Array(1);
            new DataView(header.buffer).setUint8(0, payloadLength);
          } else if (payloadLength < 65536) {
            header = new Uint8Array(3);
            const view = new DataView(header.buffer);
            view.setUint8(0, 126);
            view.setUint16(1, payloadLength);
          } else {
            header = new Uint8Array(9);
            const view = new DataView(header.buffer);
            view.setUint8(0, 127);
            view.setBigUint64(1, BigInt(payloadLength));
          }
          if (packet.data && typeof packet.data !== "string") {
            header[0] |= 128;
          }
          controller.enqueue(header);
          controller.enqueue(encodedPacket);
        });
      }
    });
  }
  function totalLength(chunks) {
    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);
  }
  function concatChunks(chunks, size) {
    if (chunks[0].length === size) {
      return chunks.shift();
    }
    const buffer = new Uint8Array(size);
    let j3 = 0;
    for (let i4 = 0; i4 < size; i4++) {
      buffer[i4] = chunks[0][j3++];
      if (j3 === chunks[0].length) {
        chunks.shift();
        j3 = 0;
      }
    }
    if (chunks.length && j3 < chunks[0].length) {
      chunks[0] = chunks[0].slice(j3);
    }
    return buffer;
  }
  function createPacketDecoderStream(maxPayload, binaryType) {
    if (!TEXT_DECODER) {
      TEXT_DECODER = new TextDecoder();
    }
    const chunks = [];
    let state = 0;
    let expectedLength = -1;
    let isBinary2 = false;
    return new TransformStream({
      transform(chunk, controller) {
        chunks.push(chunk);
        while (true) {
          if (state === 0) {
            if (totalLength(chunks) < 1) {
              break;
            }
            const header = concatChunks(chunks, 1);
            isBinary2 = (header[0] & 128) === 128;
            expectedLength = header[0] & 127;
            if (expectedLength < 126) {
              state = 3;
            } else if (expectedLength === 126) {
              state = 1;
            } else {
              state = 2;
            }
          } else if (state === 1) {
            if (totalLength(chunks) < 2) {
              break;
            }
            const headerArray = concatChunks(chunks, 2);
            expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);
            state = 3;
          } else if (state === 2) {
            if (totalLength(chunks) < 8) {
              break;
            }
            const headerArray = concatChunks(chunks, 8);
            const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);
            const n3 = view.getUint32(0);
            if (n3 > Math.pow(2, 53 - 32) - 1) {
              controller.enqueue(ERROR_PACKET);
              break;
            }
            expectedLength = n3 * Math.pow(2, 32) + view.getUint32(4);
            state = 3;
          } else {
            if (totalLength(chunks) < expectedLength) {
              break;
            }
            const data = concatChunks(chunks, expectedLength);
            controller.enqueue(decodePacket(isBinary2 ? data : TEXT_DECODER.decode(data), binaryType));
            state = 0;
          }
          if (expectedLength === 0 || expectedLength > maxPayload) {
            controller.enqueue(ERROR_PACKET);
            break;
          }
        }
      }
    });
  }
  var SEPARATOR, encodePayload, decodePayload, TEXT_DECODER, protocol;
  var init_esm2 = __esm({
    "../../node_modules/.pnpm/engine.io-parser@5.2.2/node_modules/engine.io-parser/build/esm/index.js"() {
      init_encodePacket_browser();
      init_decodePacket_browser();
      init_commons();
      SEPARATOR = String.fromCharCode(30);
      encodePayload = (packets, callback) => {
        const length2 = packets.length;
        const encodedPackets = new Array(length2);
        let count = 0;
        packets.forEach((packet, i4) => {
          encodePacket(packet, false, (encodedPacket) => {
            encodedPackets[i4] = encodedPacket;
            if (++count === length2) {
              callback(encodedPackets.join(SEPARATOR));
            }
          });
        });
      };
      decodePayload = (encodedPayload, binaryType) => {
        const encodedPackets = encodedPayload.split(SEPARATOR);
        const packets = [];
        for (let i4 = 0; i4 < encodedPackets.length; i4++) {
          const decodedPacket = decodePacket(encodedPackets[i4], binaryType);
          packets.push(decodedPacket);
          if (decodedPacket.type === "error") {
            break;
          }
        }
        return packets;
      };
      protocol = 4;
    }
  });

  // ../../node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js
  function Emitter(obj) {
    if (obj)
      return mixin(obj);
  }
  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }
    return obj;
  }
  var init_esm3 = __esm({
    "../../node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js"() {
      Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn2) {
        this._callbacks = this._callbacks || {};
        (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn2);
        return this;
      };
      Emitter.prototype.once = function(event, fn2) {
        function on3() {
          this.off(event, on3);
          fn2.apply(this, arguments);
        }
        on3.fn = fn2;
        this.on(event, on3);
        return this;
      };
      Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn2) {
        this._callbacks = this._callbacks || {};
        if (0 == arguments.length) {
          this._callbacks = {};
          return this;
        }
        var callbacks = this._callbacks["$" + event];
        if (!callbacks)
          return this;
        if (1 == arguments.length) {
          delete this._callbacks["$" + event];
          return this;
        }
        var cb;
        for (var i4 = 0; i4 < callbacks.length; i4++) {
          cb = callbacks[i4];
          if (cb === fn2 || cb.fn === fn2) {
            callbacks.splice(i4, 1);
            break;
          }
        }
        if (callbacks.length === 0) {
          delete this._callbacks["$" + event];
        }
        return this;
      };
      Emitter.prototype.emit = function(event) {
        this._callbacks = this._callbacks || {};
        var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
        for (var i4 = 1; i4 < arguments.length; i4++) {
          args[i4 - 1] = arguments[i4];
        }
        if (callbacks) {
          callbacks = callbacks.slice(0);
          for (var i4 = 0, len = callbacks.length; i4 < len; ++i4) {
            callbacks[i4].apply(this, args);
          }
        }
        return this;
      };
      Emitter.prototype.emitReserved = Emitter.prototype.emit;
      Emitter.prototype.listeners = function(event) {
        this._callbacks = this._callbacks || {};
        return this._callbacks["$" + event] || [];
      };
      Emitter.prototype.hasListeners = function(event) {
        return !!this.listeners(event).length;
      };
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/globalThis.browser.js
  var globalThisShim;
  var init_globalThis_browser = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/globalThis.browser.js"() {
      globalThisShim = (() => {
        if (typeof self !== "undefined") {
          return self;
        } else if (typeof window !== "undefined") {
          return window;
        } else {
          return Function("return this")();
        }
      })();
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/util.js
  function pick(obj, ...attr) {
    return attr.reduce((acc, k3) => {
      if (obj.hasOwnProperty(k3)) {
        acc[k3] = obj[k3];
      }
      return acc;
    }, {});
  }
  function installTimerFunctions(obj, opts) {
    if (opts.useNativeTimers) {
      obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);
      obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);
    } else {
      obj.setTimeoutFn = globalThisShim.setTimeout.bind(globalThisShim);
      obj.clearTimeoutFn = globalThisShim.clearTimeout.bind(globalThisShim);
    }
  }
  function byteLength(obj) {
    if (typeof obj === "string") {
      return utf8Length(obj);
    }
    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
  }
  function utf8Length(str) {
    let c3 = 0, length2 = 0;
    for (let i4 = 0, l3 = str.length; i4 < l3; i4++) {
      c3 = str.charCodeAt(i4);
      if (c3 < 128) {
        length2 += 1;
      } else if (c3 < 2048) {
        length2 += 2;
      } else if (c3 < 55296 || c3 >= 57344) {
        length2 += 3;
      } else {
        i4++;
        length2 += 4;
      }
    }
    return length2;
  }
  var NATIVE_SET_TIMEOUT, NATIVE_CLEAR_TIMEOUT, BASE64_OVERHEAD;
  var init_util = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/util.js"() {
      init_globalThis_browser();
      NATIVE_SET_TIMEOUT = globalThisShim.setTimeout;
      NATIVE_CLEAR_TIMEOUT = globalThisShim.clearTimeout;
      BASE64_OVERHEAD = 1.33;
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/contrib/parseqs.js
  function encode(obj) {
    let str = "";
    for (let i4 in obj) {
      if (obj.hasOwnProperty(i4)) {
        if (str.length)
          str += "&";
        str += encodeURIComponent(i4) + "=" + encodeURIComponent(obj[i4]);
      }
    }
    return str;
  }
  function decode2(qs2) {
    let qry = {};
    let pairs = qs2.split("&");
    for (let i4 = 0, l3 = pairs.length; i4 < l3; i4++) {
      let pair = pairs[i4].split("=");
      qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }
    return qry;
  }
  var init_parseqs = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/contrib/parseqs.js"() {
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transport.js
  var TransportError, Transport;
  var init_transport2 = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transport.js"() {
      init_esm2();
      init_esm3();
      init_util();
      init_parseqs();
      TransportError = class extends Error {
        constructor(reason, description, context) {
          super(reason);
          this.description = description;
          this.context = context;
          this.type = "TransportError";
        }
      };
      Transport = class extends Emitter {
        /**
         * Transport abstract constructor.
         *
         * @param {Object} opts - options
         * @protected
         */
        constructor(opts) {
          super();
          this.writable = false;
          installTimerFunctions(this, opts);
          this.opts = opts;
          this.query = opts.query;
          this.socket = opts.socket;
        }
        /**
         * Emits an error.
         *
         * @param {String} reason
         * @param description
         * @param context - the error context
         * @return {Transport} for chaining
         * @protected
         */
        onError(reason, description, context) {
          super.emitReserved("error", new TransportError(reason, description, context));
          return this;
        }
        /**
         * Opens the transport.
         */
        open() {
          this.readyState = "opening";
          this.doOpen();
          return this;
        }
        /**
         * Closes the transport.
         */
        close() {
          if (this.readyState === "opening" || this.readyState === "open") {
            this.doClose();
            this.onClose();
          }
          return this;
        }
        /**
         * Sends multiple packets.
         *
         * @param {Array} packets
         */
        send(packets) {
          if (this.readyState === "open") {
            this.write(packets);
          }
        }
        /**
         * Called upon open
         *
         * @protected
         */
        onOpen() {
          this.readyState = "open";
          this.writable = true;
          super.emitReserved("open");
        }
        /**
         * Called with data.
         *
         * @param {String} data
         * @protected
         */
        onData(data) {
          const packet = decodePacket(data, this.socket.binaryType);
          this.onPacket(packet);
        }
        /**
         * Called with a decoded packet.
         *
         * @protected
         */
        onPacket(packet) {
          super.emitReserved("packet", packet);
        }
        /**
         * Called upon close.
         *
         * @protected
         */
        onClose(details) {
          this.readyState = "closed";
          super.emitReserved("close", details);
        }
        /**
         * Pauses the transport, in order not to lose packets during an upgrade.
         *
         * @param onPause
         */
        pause(onPause) {
        }
        createUri(schema, query = {}) {
          return schema + "://" + this._hostname() + this._port() + this.opts.path + this._query(query);
        }
        _hostname() {
          const hostname = this.opts.hostname;
          return hostname.indexOf(":") === -1 ? hostname : "[" + hostname + "]";
        }
        _port() {
          if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {
            return ":" + this.opts.port;
          } else {
            return "";
          }
        }
        _query(query) {
          const encodedQuery = encode(query);
          return encodedQuery.length ? "?" + encodedQuery : "";
        }
      };
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/contrib/yeast.js
  function encode2(num) {
    let encoded = "";
    do {
      encoded = alphabet[num % length] + encoded;
      num = Math.floor(num / length);
    } while (num > 0);
    return encoded;
  }
  function yeast() {
    const now = encode2(+/* @__PURE__ */ new Date());
    if (now !== prev)
      return seed = 0, prev = now;
    return now + "." + encode2(seed++);
  }
  var alphabet, length, map, seed, i3, prev;
  var init_yeast = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/contrib/yeast.js"() {
      alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split("");
      length = 64;
      map = {};
      seed = 0;
      i3 = 0;
      for (; i3 < length; i3++)
        map[alphabet[i3]] = i3;
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/contrib/has-cors.js
  var value, hasCORS;
  var init_has_cors = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/contrib/has-cors.js"() {
      value = false;
      try {
        value = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
      } catch (err) {
      }
      hasCORS = value;
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js
  function XHR(opts) {
    const xdomain = opts.xdomain;
    try {
      if ("undefined" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
        return new XMLHttpRequest();
      }
    } catch (e4) {
    }
    if (!xdomain) {
      try {
        return new globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
      } catch (e4) {
      }
    }
  }
  function createCookieJar() {
  }
  var init_xmlhttprequest_browser = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js"() {
      init_has_cors();
      init_globalThis_browser();
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/polling.js
  function empty() {
  }
  function unloadHandler() {
    for (let i4 in Request.requests) {
      if (Request.requests.hasOwnProperty(i4)) {
        Request.requests[i4].abort();
      }
    }
  }
  var hasXHR2, Polling, Request;
  var init_polling = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/polling.js"() {
      init_transport2();
      init_yeast();
      init_esm2();
      init_xmlhttprequest_browser();
      init_esm3();
      init_util();
      init_globalThis_browser();
      hasXHR2 = function() {
        const xhr = new XHR({
          xdomain: false
        });
        return null != xhr.responseType;
      }();
      Polling = class extends Transport {
        /**
         * XHR Polling constructor.
         *
         * @param {Object} opts
         * @package
         */
        constructor(opts) {
          super(opts);
          this.polling = false;
          if (typeof location !== "undefined") {
            const isSSL = "https:" === location.protocol;
            let port = location.port;
            if (!port) {
              port = isSSL ? "443" : "80";
            }
            this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
          }
          const forceBase64 = opts && opts.forceBase64;
          this.supportsBinary = hasXHR2 && !forceBase64;
          if (this.opts.withCredentials) {
            this.cookieJar = createCookieJar();
          }
        }
        get name() {
          return "polling";
        }
        /**
         * Opens the socket (triggers polling). We write a PING message to determine
         * when the transport is open.
         *
         * @protected
         */
        doOpen() {
          this.poll();
        }
        /**
         * Pauses polling.
         *
         * @param {Function} onPause - callback upon buffers are flushed and transport is paused
         * @package
         */
        pause(onPause) {
          this.readyState = "pausing";
          const pause = () => {
            this.readyState = "paused";
            onPause();
          };
          if (this.polling || !this.writable) {
            let total = 0;
            if (this.polling) {
              total++;
              this.once("pollComplete", function() {
                --total || pause();
              });
            }
            if (!this.writable) {
              total++;
              this.once("drain", function() {
                --total || pause();
              });
            }
          } else {
            pause();
          }
        }
        /**
         * Starts polling cycle.
         *
         * @private
         */
        poll() {
          this.polling = true;
          this.doPoll();
          this.emitReserved("poll");
        }
        /**
         * Overloads onData to detect payloads.
         *
         * @protected
         */
        onData(data) {
          const callback = (packet) => {
            if ("opening" === this.readyState && packet.type === "open") {
              this.onOpen();
            }
            if ("close" === packet.type) {
              this.onClose({ description: "transport closed by the server" });
              return false;
            }
            this.onPacket(packet);
          };
          decodePayload(data, this.socket.binaryType).forEach(callback);
          if ("closed" !== this.readyState) {
            this.polling = false;
            this.emitReserved("pollComplete");
            if ("open" === this.readyState) {
              this.poll();
            }
          }
        }
        /**
         * For polling, send a close packet.
         *
         * @protected
         */
        doClose() {
          const close = () => {
            this.write([{ type: "close" }]);
          };
          if ("open" === this.readyState) {
            close();
          } else {
            this.once("open", close);
          }
        }
        /**
         * Writes a packets payload.
         *
         * @param {Array} packets - data packets
         * @protected
         */
        write(packets) {
          this.writable = false;
          encodePayload(packets, (data) => {
            this.doWrite(data, () => {
              this.writable = true;
              this.emitReserved("drain");
            });
          });
        }
        /**
         * Generates uri for connection.
         *
         * @private
         */
        uri() {
          const schema = this.opts.secure ? "https" : "http";
          const query = this.query || {};
          if (false !== this.opts.timestampRequests) {
            query[this.opts.timestampParam] = yeast();
          }
          if (!this.supportsBinary && !query.sid) {
            query.b64 = 1;
          }
          return this.createUri(schema, query);
        }
        /**
         * Creates a request.
         *
         * @param {String} method
         * @private
         */
        request(opts = {}) {
          Object.assign(opts, { xd: this.xd, cookieJar: this.cookieJar }, this.opts);
          return new Request(this.uri(), opts);
        }
        /**
         * Sends data.
         *
         * @param {String} data to send.
         * @param {Function} called upon flush.
         * @private
         */
        doWrite(data, fn2) {
          const req = this.request({
            method: "POST",
            data
          });
          req.on("success", fn2);
          req.on("error", (xhrStatus, context) => {
            this.onError("xhr post error", xhrStatus, context);
          });
        }
        /**
         * Starts a poll cycle.
         *
         * @private
         */
        doPoll() {
          const req = this.request();
          req.on("data", this.onData.bind(this));
          req.on("error", (xhrStatus, context) => {
            this.onError("xhr poll error", xhrStatus, context);
          });
          this.pollXhr = req;
        }
      };
      Request = class _Request extends Emitter {
        /**
         * Request constructor
         *
         * @param {Object} options
         * @package
         */
        constructor(uri, opts) {
          super();
          installTimerFunctions(this, opts);
          this.opts = opts;
          this.method = opts.method || "GET";
          this.uri = uri;
          this.data = void 0 !== opts.data ? opts.data : null;
          this.create();
        }
        /**
         * Creates the XHR object and sends the request.
         *
         * @private
         */
        create() {
          var _a;
          const opts = pick(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
          opts.xdomain = !!this.opts.xd;
          const xhr = this.xhr = new XHR(opts);
          try {
            xhr.open(this.method, this.uri, true);
            try {
              if (this.opts.extraHeaders) {
                xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
                for (let i4 in this.opts.extraHeaders) {
                  if (this.opts.extraHeaders.hasOwnProperty(i4)) {
                    xhr.setRequestHeader(i4, this.opts.extraHeaders[i4]);
                  }
                }
              }
            } catch (e4) {
            }
            if ("POST" === this.method) {
              try {
                xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
              } catch (e4) {
              }
            }
            try {
              xhr.setRequestHeader("Accept", "*/*");
            } catch (e4) {
            }
            (_a = this.opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);
            if ("withCredentials" in xhr) {
              xhr.withCredentials = this.opts.withCredentials;
            }
            if (this.opts.requestTimeout) {
              xhr.timeout = this.opts.requestTimeout;
            }
            xhr.onreadystatechange = () => {
              var _a2;
              if (xhr.readyState === 3) {
                (_a2 = this.opts.cookieJar) === null || _a2 === void 0 ? void 0 : _a2.parseCookies(xhr);
              }
              if (4 !== xhr.readyState)
                return;
              if (200 === xhr.status || 1223 === xhr.status) {
                this.onLoad();
              } else {
                this.setTimeoutFn(() => {
                  this.onError(typeof xhr.status === "number" ? xhr.status : 0);
                }, 0);
              }
            };
            xhr.send(this.data);
          } catch (e4) {
            this.setTimeoutFn(() => {
              this.onError(e4);
            }, 0);
            return;
          }
          if (typeof document !== "undefined") {
            this.index = _Request.requestsCount++;
            _Request.requests[this.index] = this;
          }
        }
        /**
         * Called upon error.
         *
         * @private
         */
        onError(err) {
          this.emitReserved("error", err, this.xhr);
          this.cleanup(true);
        }
        /**
         * Cleans up house.
         *
         * @private
         */
        cleanup(fromError) {
          if ("undefined" === typeof this.xhr || null === this.xhr) {
            return;
          }
          this.xhr.onreadystatechange = empty;
          if (fromError) {
            try {
              this.xhr.abort();
            } catch (e4) {
            }
          }
          if (typeof document !== "undefined") {
            delete _Request.requests[this.index];
          }
          this.xhr = null;
        }
        /**
         * Called upon load.
         *
         * @private
         */
        onLoad() {
          const data = this.xhr.responseText;
          if (data !== null) {
            this.emitReserved("data", data);
            this.emitReserved("success");
            this.cleanup();
          }
        }
        /**
         * Aborts the request.
         *
         * @package
         */
        abort() {
          this.cleanup();
        }
      };
      Request.requestsCount = 0;
      Request.requests = {};
      if (typeof document !== "undefined") {
        if (typeof attachEvent === "function") {
          attachEvent("onunload", unloadHandler);
        } else if (typeof addEventListener === "function") {
          const terminationEvent = "onpagehide" in globalThisShim ? "pagehide" : "unload";
          addEventListener(terminationEvent, unloadHandler, false);
        }
      }
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js
  var nextTick, WebSocket, usingBrowserWebSocket, defaultBinaryType;
  var init_websocket_constructor_browser = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js"() {
      init_globalThis_browser();
      nextTick = (() => {
        const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
        if (isPromiseAvailable) {
          return (cb) => Promise.resolve().then(cb);
        } else {
          return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
        }
      })();
      WebSocket = globalThisShim.WebSocket || globalThisShim.MozWebSocket;
      usingBrowserWebSocket = true;
      defaultBinaryType = "arraybuffer";
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/websocket.js
  var isReactNative, WS;
  var init_websocket = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/websocket.js"() {
      init_transport2();
      init_yeast();
      init_util();
      init_websocket_constructor_browser();
      init_esm2();
      isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
      WS = class extends Transport {
        /**
         * WebSocket transport constructor.
         *
         * @param {Object} opts - connection options
         * @protected
         */
        constructor(opts) {
          super(opts);
          this.supportsBinary = !opts.forceBase64;
        }
        get name() {
          return "websocket";
        }
        doOpen() {
          if (!this.check()) {
            return;
          }
          const uri = this.uri();
          const protocols = this.opts.protocols;
          const opts = isReactNative ? {} : pick(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
          if (this.opts.extraHeaders) {
            opts.headers = this.opts.extraHeaders;
          }
          try {
            this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
          } catch (err) {
            return this.emitReserved("error", err);
          }
          this.ws.binaryType = this.socket.binaryType;
          this.addEventListeners();
        }
        /**
         * Adds event listeners to the socket
         *
         * @private
         */
        addEventListeners() {
          this.ws.onopen = () => {
            if (this.opts.autoUnref) {
              this.ws._socket.unref();
            }
            this.onOpen();
          };
          this.ws.onclose = (closeEvent) => this.onClose({
            description: "websocket connection closed",
            context: closeEvent
          });
          this.ws.onmessage = (ev) => this.onData(ev.data);
          this.ws.onerror = (e4) => this.onError("websocket error", e4);
        }
        write(packets) {
          this.writable = false;
          for (let i4 = 0; i4 < packets.length; i4++) {
            const packet = packets[i4];
            const lastPacket = i4 === packets.length - 1;
            encodePacket(packet, this.supportsBinary, (data) => {
              const opts = {};
              if (!usingBrowserWebSocket) {
                if (packet.options) {
                  opts.compress = packet.options.compress;
                }
                if (this.opts.perMessageDeflate) {
                  const len = (
                    // @ts-ignore
                    "string" === typeof data ? Buffer.byteLength(data) : data.length
                  );
                  if (len < this.opts.perMessageDeflate.threshold) {
                    opts.compress = false;
                  }
                }
              }
              try {
                if (usingBrowserWebSocket) {
                  this.ws.send(data);
                } else {
                  this.ws.send(data, opts);
                }
              } catch (e4) {
              }
              if (lastPacket) {
                nextTick(() => {
                  this.writable = true;
                  this.emitReserved("drain");
                }, this.setTimeoutFn);
              }
            });
          }
        }
        doClose() {
          if (typeof this.ws !== "undefined") {
            this.ws.close();
            this.ws = null;
          }
        }
        /**
         * Generates uri for connection.
         *
         * @private
         */
        uri() {
          const schema = this.opts.secure ? "wss" : "ws";
          const query = this.query || {};
          if (this.opts.timestampRequests) {
            query[this.opts.timestampParam] = yeast();
          }
          if (!this.supportsBinary) {
            query.b64 = 1;
          }
          return this.createUri(schema, query);
        }
        /**
         * Feature detection for WebSocket.
         *
         * @return {Boolean} whether this transport is available.
         * @private
         */
        check() {
          return !!WebSocket;
        }
      };
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/webtransport.js
  var WT;
  var init_webtransport = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/webtransport.js"() {
      init_transport2();
      init_websocket_constructor_browser();
      init_esm2();
      WT = class extends Transport {
        get name() {
          return "webtransport";
        }
        doOpen() {
          if (typeof WebTransport !== "function") {
            return;
          }
          this.transport = new WebTransport(this.createUri("https"), this.opts.transportOptions[this.name]);
          this.transport.closed.then(() => {
            this.onClose();
          }).catch((err) => {
            this.onError("webtransport error", err);
          });
          this.transport.ready.then(() => {
            this.transport.createBidirectionalStream().then((stream) => {
              const decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, this.socket.binaryType);
              const reader = stream.readable.pipeThrough(decoderStream).getReader();
              const encoderStream = createPacketEncoderStream();
              encoderStream.readable.pipeTo(stream.writable);
              this.writer = encoderStream.writable.getWriter();
              const read = () => {
                reader.read().then(({ done, value: value2 }) => {
                  if (done) {
                    return;
                  }
                  this.onPacket(value2);
                  read();
                }).catch((err) => {
                });
              };
              read();
              const packet = { type: "open" };
              if (this.query.sid) {
                packet.data = `{"sid":"${this.query.sid}"}`;
              }
              this.writer.write(packet).then(() => this.onOpen());
            });
          });
        }
        write(packets) {
          this.writable = false;
          for (let i4 = 0; i4 < packets.length; i4++) {
            const packet = packets[i4];
            const lastPacket = i4 === packets.length - 1;
            this.writer.write(packet).then(() => {
              if (lastPacket) {
                nextTick(() => {
                  this.writable = true;
                  this.emitReserved("drain");
                }, this.setTimeoutFn);
              }
            });
          }
        }
        doClose() {
          var _a;
          (_a = this.transport) === null || _a === void 0 ? void 0 : _a.close();
        }
      };
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/index.js
  var transports;
  var init_transports = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/transports/index.js"() {
      init_polling();
      init_websocket();
      init_webtransport();
      transports = {
        websocket: WS,
        webtransport: WT,
        polling: Polling
      };
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/contrib/parseuri.js
  function parse(str) {
    if (str.length > 2e3) {
      throw "URI too long";
    }
    const src = str, b3 = str.indexOf("["), e4 = str.indexOf("]");
    if (b3 != -1 && e4 != -1) {
      str = str.substring(0, b3) + str.substring(b3, e4).replace(/:/g, ";") + str.substring(e4, str.length);
    }
    let m3 = re3.exec(str || ""), uri = {}, i4 = 14;
    while (i4--) {
      uri[parts[i4]] = m3[i4] || "";
    }
    if (b3 != -1 && e4 != -1) {
      uri.source = src;
      uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
      uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
      uri.ipv6uri = true;
    }
    uri.pathNames = pathNames(uri, uri["path"]);
    uri.queryKey = queryKey(uri, uri["query"]);
    return uri;
  }
  function pathNames(obj, path) {
    const regx = /\/{2,9}/g, names = path.replace(regx, "/").split("/");
    if (path.slice(0, 1) == "/" || path.length === 0) {
      names.splice(0, 1);
    }
    if (path.slice(-1) == "/") {
      names.splice(names.length - 1, 1);
    }
    return names;
  }
  function queryKey(uri, query) {
    const data = {};
    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $2) {
      if ($1) {
        data[$1] = $2;
      }
    });
    return data;
  }
  var re3, parts;
  var init_parseuri = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/contrib/parseuri.js"() {
      re3 = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
      parts = [
        "source",
        "protocol",
        "authority",
        "userInfo",
        "user",
        "password",
        "host",
        "port",
        "relative",
        "path",
        "directory",
        "file",
        "query",
        "anchor"
      ];
    }
  });

  // ../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/socket.js
  var Socket;
  var init_socket = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/socket.js"() {
      init_transports();
      init_util();
      init_parseqs();
      init_parseuri();
      init_esm3();
      init_esm2();
      init_websocket_constructor_browser();
      Socket = class _Socket extends Emitter {
        /**
         * Socket constructor.
         *
         * @param {String|Object} uri - uri or options
         * @param {Object} opts - options
         */
        constructor(uri, opts = {}) {
          super();
          this.binaryType = defaultBinaryType;
          this.writeBuffer = [];
          if (uri && "object" === typeof uri) {
            opts = uri;
            uri = null;
          }
          if (uri) {
            uri = parse(uri);
            opts.hostname = uri.host;
            opts.secure = uri.protocol === "https" || uri.protocol === "wss";
            opts.port = uri.port;
            if (uri.query)
              opts.query = uri.query;
          } else if (opts.host) {
            opts.hostname = parse(opts.host).host;
          }
          installTimerFunctions(this, opts);
          this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;
          if (opts.hostname && !opts.port) {
            opts.port = this.secure ? "443" : "80";
          }
          this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
          this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
          this.transports = opts.transports || [
            "polling",
            "websocket",
            "webtransport"
          ];
          this.writeBuffer = [];
          this.prevBufferLen = 0;
          this.opts = Object.assign({
            path: "/engine.io",
            agent: false,
            withCredentials: false,
            upgrade: true,
            timestampParam: "t",
            rememberUpgrade: false,
            addTrailingSlash: true,
            rejectUnauthorized: true,
            perMessageDeflate: {
              threshold: 1024
            },
            transportOptions: {},
            closeOnBeforeunload: false
          }, opts);
          this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : "");
          if (typeof this.opts.query === "string") {
            this.opts.query = decode2(this.opts.query);
          }
          this.id = null;
          this.upgrades = null;
          this.pingInterval = null;
          this.pingTimeout = null;
          this.pingTimeoutTimer = null;
          if (typeof addEventListener === "function") {
            if (this.opts.closeOnBeforeunload) {
              this.beforeunloadEventListener = () => {
                if (this.transport) {
                  this.transport.removeAllListeners();
                  this.transport.close();
                }
              };
              addEventListener("beforeunload", this.beforeunloadEventListener, false);
            }
            if (this.hostname !== "localhost") {
              this.offlineEventListener = () => {
                this.onClose("transport close", {
                  description: "network connection lost"
                });
              };
              addEventListener("offline", this.offlineEventListener, false);
            }
          }
          this.open();
        }
        /**
         * Creates transport of the given type.
         *
         * @param {String} name - transport name
         * @return {Transport}
         * @private
         */
        createTransport(name) {
          const query = Object.assign({}, this.opts.query);
          query.EIO = protocol;
          query.transport = name;
          if (this.id)
            query.sid = this.id;
          const opts = Object.assign({}, this.opts, {
            query,
            socket: this,
            hostname: this.hostname,
            secure: this.secure,
            port: this.port
          }, this.opts.transportOptions[name]);
          return new transports[name](opts);
        }
        /**
         * Initializes transport to use and starts probe.
         *
         * @private
         */
        open() {
          let transport2;
          if (this.opts.rememberUpgrade && _Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) {
            transport2 = "websocket";
          } else if (0 === this.transports.length) {
            this.setTimeoutFn(() => {
              this.emitReserved("error", "No transports available");
            }, 0);
            return;
          } else {
            transport2 = this.transports[0];
          }
          this.readyState = "opening";
          try {
            transport2 = this.createTransport(transport2);
          } catch (e4) {
            this.transports.shift();
            this.open();
            return;
          }
          transport2.open();
          this.setTransport(transport2);
        }
        /**
         * Sets the current transport. Disables the existing one (if any).
         *
         * @private
         */
        setTransport(transport2) {
          if (this.transport) {
            this.transport.removeAllListeners();
          }
          this.transport = transport2;
          transport2.on("drain", this.onDrain.bind(this)).on("packet", this.onPacket.bind(this)).on("error", this.onError.bind(this)).on("close", (reason) => this.onClose("transport close", reason));
        }
        /**
         * Probes a transport.
         *
         * @param {String} name - transport name
         * @private
         */
        probe(name) {
          let transport2 = this.createTransport(name);
          let failed = false;
          _Socket.priorWebsocketSuccess = false;
          const onTransportOpen = () => {
            if (failed)
              return;
            transport2.send([{ type: "ping", data: "probe" }]);
            transport2.once("packet", (msg) => {
              if (failed)
                return;
              if ("pong" === msg.type && "probe" === msg.data) {
                this.upgrading = true;
                this.emitReserved("upgrading", transport2);
                if (!transport2)
                  return;
                _Socket.priorWebsocketSuccess = "websocket" === transport2.name;
                this.transport.pause(() => {
                  if (failed)
                    return;
                  if ("closed" === this.readyState)
                    return;
                  cleanup();
                  this.setTransport(transport2);
                  transport2.send([{ type: "upgrade" }]);
                  this.emitReserved("upgrade", transport2);
                  transport2 = null;
                  this.upgrading = false;
                  this.flush();
                });
              } else {
                const err = new Error("probe error");
                err.transport = transport2.name;
                this.emitReserved("upgradeError", err);
              }
            });
          };
          function freezeTransport() {
            if (failed)
              return;
            failed = true;
            cleanup();
            transport2.close();
            transport2 = null;
          }
          const onerror = (err) => {
            const error = new Error("probe error: " + err);
            error.transport = transport2.name;
            freezeTransport();
            this.emitReserved("upgradeError", error);
          };
          function onTransportClose() {
            onerror("transport closed");
          }
          function onclose() {
            onerror("socket closed");
          }
          function onupgrade(to) {
            if (transport2 && to.name !== transport2.name) {
              freezeTransport();
            }
          }
          const cleanup = () => {
            transport2.removeListener("open", onTransportOpen);
            transport2.removeListener("error", onerror);
            transport2.removeListener("close", onTransportClose);
            this.off("close", onclose);
            this.off("upgrading", onupgrade);
          };
          transport2.once("open", onTransportOpen);
          transport2.once("error", onerror);
          transport2.once("close", onTransportClose);
          this.once("close", onclose);
          this.once("upgrading", onupgrade);
          if (this.upgrades.indexOf("webtransport") !== -1 && name !== "webtransport") {
            this.setTimeoutFn(() => {
              if (!failed) {
                transport2.open();
              }
            }, 200);
          } else {
            transport2.open();
          }
        }
        /**
         * Called when connection is deemed open.
         *
         * @private
         */
        onOpen() {
          this.readyState = "open";
          _Socket.priorWebsocketSuccess = "websocket" === this.transport.name;
          this.emitReserved("open");
          this.flush();
          if ("open" === this.readyState && this.opts.upgrade) {
            let i4 = 0;
            const l3 = this.upgrades.length;
            for (; i4 < l3; i4++) {
              this.probe(this.upgrades[i4]);
            }
          }
        }
        /**
         * Handles a packet.
         *
         * @private
         */
        onPacket(packet) {
          if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
            this.emitReserved("packet", packet);
            this.emitReserved("heartbeat");
            this.resetPingTimeout();
            switch (packet.type) {
              case "open":
                this.onHandshake(JSON.parse(packet.data));
                break;
              case "ping":
                this.sendPacket("pong");
                this.emitReserved("ping");
                this.emitReserved("pong");
                break;
              case "error":
                const err = new Error("server error");
                err.code = packet.data;
                this.onError(err);
                break;
              case "message":
                this.emitReserved("data", packet.data);
                this.emitReserved("message", packet.data);
                break;
            }
          }
        }
        /**
         * Called upon handshake completion.
         *
         * @param {Object} data - handshake obj
         * @private
         */
        onHandshake(data) {
          this.emitReserved("handshake", data);
          this.id = data.sid;
          this.transport.query.sid = data.sid;
          this.upgrades = this.filterUpgrades(data.upgrades);
          this.pingInterval = data.pingInterval;
          this.pingTimeout = data.pingTimeout;
          this.maxPayload = data.maxPayload;
          this.onOpen();
          if ("closed" === this.readyState)
            return;
          this.resetPingTimeout();
        }
        /**
         * Sets and resets ping timeout timer based on server pings.
         *
         * @private
         */
        resetPingTimeout() {
          this.clearTimeoutFn(this.pingTimeoutTimer);
          this.pingTimeoutTimer = this.setTimeoutFn(() => {
            this.onClose("ping timeout");
          }, this.pingInterval + this.pingTimeout);
          if (this.opts.autoUnref) {
            this.pingTimeoutTimer.unref();
          }
        }
        /**
         * Called on `drain` event
         *
         * @private
         */
        onDrain() {
          this.writeBuffer.splice(0, this.prevBufferLen);
          this.prevBufferLen = 0;
          if (0 === this.writeBuffer.length) {
            this.emitReserved("drain");
          } else {
            this.flush();
          }
        }
        /**
         * Flush write buffers.
         *
         * @private
         */
        flush() {
          if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
            const packets = this.getWritablePackets();
            this.transport.send(packets);
            this.prevBufferLen = packets.length;
            this.emitReserved("flush");
          }
        }
        /**
         * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
         * long-polling)
         *
         * @private
         */
        getWritablePackets() {
          const shouldCheckPayloadSize = this.maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
          if (!shouldCheckPayloadSize) {
            return this.writeBuffer;
          }
          let payloadSize = 1;
          for (let i4 = 0; i4 < this.writeBuffer.length; i4++) {
            const data = this.writeBuffer[i4].data;
            if (data) {
              payloadSize += byteLength(data);
            }
            if (i4 > 0 && payloadSize > this.maxPayload) {
              return this.writeBuffer.slice(0, i4);
            }
            payloadSize += 2;
          }
          return this.writeBuffer;
        }
        /**
         * Sends a message.
         *
         * @param {String} msg - message.
         * @param {Object} options.
         * @param {Function} callback function.
         * @return {Socket} for chaining.
         */
        write(msg, options, fn2) {
          this.sendPacket("message", msg, options, fn2);
          return this;
        }
        send(msg, options, fn2) {
          this.sendPacket("message", msg, options, fn2);
          return this;
        }
        /**
         * Sends a packet.
         *
         * @param {String} type: packet type.
         * @param {String} data.
         * @param {Object} options.
         * @param {Function} fn - callback function.
         * @private
         */
        sendPacket(type, data, options, fn2) {
          if ("function" === typeof data) {
            fn2 = data;
            data = void 0;
          }
          if ("function" === typeof options) {
            fn2 = options;
            options = null;
          }
          if ("closing" === this.readyState || "closed" === this.readyState) {
            return;
          }
          options = options || {};
          options.compress = false !== options.compress;
          const packet = {
            type,
            data,
            options
          };
          this.emitReserved("packetCreate", packet);
          this.writeBuffer.push(packet);
          if (fn2)
            this.once("flush", fn2);
          this.flush();
        }
        /**
         * Closes the connection.
         */
        close() {
          const close = () => {
            this.onClose("forced close");
            this.transport.close();
          };
          const cleanupAndClose = () => {
            this.off("upgrade", cleanupAndClose);
            this.off("upgradeError", cleanupAndClose);
            close();
          };
          const waitForUpgrade = () => {
            this.once("upgrade", cleanupAndClose);
            this.once("upgradeError", cleanupAndClose);
          };
          if ("opening" === this.readyState || "open" === this.readyState) {
            this.readyState = "closing";
            if (this.writeBuffer.length) {
              this.once("drain", () => {
                if (this.upgrading) {
                  waitForUpgrade();
                } else {
                  close();
                }
              });
            } else if (this.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
          }
          return this;
        }
        /**
         * Called upon transport error
         *
         * @private
         */
        onError(err) {
          _Socket.priorWebsocketSuccess = false;
          this.emitReserved("error", err);
          this.onClose("transport error", err);
        }
        /**
         * Called upon transport close.
         *
         * @private
         */
        onClose(reason, description) {
          if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
            this.clearTimeoutFn(this.pingTimeoutTimer);
            this.transport.removeAllListeners("close");
            this.transport.close();
            this.transport.removeAllListeners();
            if (typeof removeEventListener === "function") {
              removeEventListener("beforeunload", this.beforeunloadEventListener, false);
              removeEventListener("offline", this.offlineEventListener, false);
            }
            this.readyState = "closed";
            this.id = null;
            this.emitReserved("close", reason, description);
            this.writeBuffer = [];
            this.prevBufferLen = 0;
          }
        }
        /**
         * Filters upgrades, returning only those matching client transports.
         *
         * @param {Array} upgrades - server upgrades
         * @private
         */
        filterUpgrades(upgrades) {
          const filteredUpgrades = [];
          let i4 = 0;
          const j3 = upgrades.length;
          for (; i4 < j3; i4++) {
            if (~this.transports.indexOf(upgrades[i4]))
              filteredUpgrades.push(upgrades[i4]);
          }
          return filteredUpgrades;
        }
      };
      Socket.protocol = protocol;
    }
  });
  var init_esm4 = __esm({
    "../../node_modules/.pnpm/engine.io-client@6.5.3_bufferutil@4.0.8/node_modules/engine.io-client/build/esm/index.js"() {
      init_socket();
      init_transport2();
      init_transports();
      init_util();
      init_parseuri();
      init_websocket_constructor_browser();
      Socket.protocol;
    }
  });

  // ../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/url.js
  function url(uri, path = "", loc) {
    let obj = uri;
    loc = loc || typeof location !== "undefined" && location;
    if (null == uri)
      uri = loc.protocol + "//" + loc.host;
    if (typeof uri === "string") {
      if ("/" === uri.charAt(0)) {
        if ("/" === uri.charAt(1)) {
          uri = loc.protocol + uri;
        } else {
          uri = loc.host + uri;
        }
      }
      if (!/^(https?|wss?):\/\//.test(uri)) {
        if ("undefined" !== typeof loc) {
          uri = loc.protocol + "//" + uri;
        } else {
          uri = "https://" + uri;
        }
      }
      obj = parse(uri);
    }
    if (!obj.port) {
      if (/^(http|ws)$/.test(obj.protocol)) {
        obj.port = "80";
      } else if (/^(http|ws)s$/.test(obj.protocol)) {
        obj.port = "443";
      }
    }
    obj.path = obj.path || "/";
    const ipv6 = obj.host.indexOf(":") !== -1;
    const host = ipv6 ? "[" + obj.host + "]" : obj.host;
    obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
    obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
    return obj;
  }
  var init_url = __esm({
    "../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/url.js"() {
      init_esm4();
    }
  });

  // ../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/esm/is-binary.js
  function isBinary(obj) {
    return withNativeArrayBuffer3 && (obj instanceof ArrayBuffer || isView2(obj)) || withNativeBlob2 && obj instanceof Blob || withNativeFile && obj instanceof File;
  }
  function hasBinary(obj, toJSON) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    if (Array.isArray(obj)) {
      for (let i4 = 0, l3 = obj.length; i4 < l3; i4++) {
        if (hasBinary(obj[i4])) {
          return true;
        }
      }
      return false;
    }
    if (isBinary(obj)) {
      return true;
    }
    if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
      return hasBinary(obj.toJSON(), true);
    }
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
        return true;
      }
    }
    return false;
  }
  var withNativeArrayBuffer3, isView2, toString, withNativeBlob2, withNativeFile;
  var init_is_binary = __esm({
    "../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/esm/is-binary.js"() {
      withNativeArrayBuffer3 = typeof ArrayBuffer === "function";
      isView2 = (obj) => {
        return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
      };
      toString = Object.prototype.toString;
      withNativeBlob2 = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
      withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
    }
  });

  // ../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/esm/binary.js
  function deconstructPacket(packet) {
    const buffers = [];
    const packetData = packet.data;
    const pack = packet;
    pack.data = _deconstructPacket(packetData, buffers);
    pack.attachments = buffers.length;
    return { packet: pack, buffers };
  }
  function _deconstructPacket(data, buffers) {
    if (!data)
      return data;
    if (isBinary(data)) {
      const placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (Array.isArray(data)) {
      const newData = new Array(data.length);
      for (let i4 = 0; i4 < data.length; i4++) {
        newData[i4] = _deconstructPacket(data[i4], buffers);
      }
      return newData;
    } else if (typeof data === "object" && !(data instanceof Date)) {
      const newData = {};
      for (const key in data) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
          newData[key] = _deconstructPacket(data[key], buffers);
        }
      }
      return newData;
    }
    return data;
  }
  function reconstructPacket(packet, buffers) {
    packet.data = _reconstructPacket(packet.data, buffers);
    delete packet.attachments;
    return packet;
  }
  function _reconstructPacket(data, buffers) {
    if (!data)
      return data;
    if (data && data._placeholder === true) {
      const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
      if (isIndexValid) {
        return buffers[data.num];
      } else {
        throw new Error("illegal attachments");
      }
    } else if (Array.isArray(data)) {
      for (let i4 = 0; i4 < data.length; i4++) {
        data[i4] = _reconstructPacket(data[i4], buffers);
      }
    } else if (typeof data === "object") {
      for (const key in data) {
        if (Object.prototype.hasOwnProperty.call(data, key)) {
          data[key] = _reconstructPacket(data[key], buffers);
        }
      }
    }
    return data;
  }
  var init_binary = __esm({
    "../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/esm/binary.js"() {
      init_is_binary();
    }
  });

  // ../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    Decoder: () => Decoder,
    Encoder: () => Encoder,
    PacketType: () => PacketType,
    protocol: () => protocol3
  });
  function isObject(value2) {
    return Object.prototype.toString.call(value2) === "[object Object]";
  }
  var RESERVED_EVENTS, protocol3, PacketType, Encoder, Decoder, BinaryReconstructor;
  var init_esm5 = __esm({
    "../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/esm/index.js"() {
      init_esm3();
      init_binary();
      init_is_binary();
      RESERVED_EVENTS = [
        "connect",
        "connect_error",
        "disconnect",
        "disconnecting",
        "newListener",
        "removeListener"
        // used by the Node.js EventEmitter
      ];
      protocol3 = 5;
      (function(PacketType2) {
        PacketType2[PacketType2["CONNECT"] = 0] = "CONNECT";
        PacketType2[PacketType2["DISCONNECT"] = 1] = "DISCONNECT";
        PacketType2[PacketType2["EVENT"] = 2] = "EVENT";
        PacketType2[PacketType2["ACK"] = 3] = "ACK";
        PacketType2[PacketType2["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
        PacketType2[PacketType2["BINARY_EVENT"] = 5] = "BINARY_EVENT";
        PacketType2[PacketType2["BINARY_ACK"] = 6] = "BINARY_ACK";
      })(PacketType || (PacketType = {}));
      Encoder = class {
        /**
         * Encoder constructor
         *
         * @param {function} replacer - custom replacer to pass down to JSON.parse
         */
        constructor(replacer) {
          this.replacer = replacer;
        }
        /**
         * Encode a packet as a single string if non-binary, or as a
         * buffer sequence, depending on packet type.
         *
         * @param {Object} obj - packet object
         */
        encode(obj) {
          if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
            if (hasBinary(obj)) {
              return this.encodeAsBinary({
                type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,
                nsp: obj.nsp,
                data: obj.data,
                id: obj.id
              });
            }
          }
          return [this.encodeAsString(obj)];
        }
        /**
         * Encode packet as string.
         */
        encodeAsString(obj) {
          let str = "" + obj.type;
          if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
            str += obj.attachments + "-";
          }
          if (obj.nsp && "/" !== obj.nsp) {
            str += obj.nsp + ",";
          }
          if (null != obj.id) {
            str += obj.id;
          }
          if (null != obj.data) {
            str += JSON.stringify(obj.data, this.replacer);
          }
          return str;
        }
        /**
         * Encode packet as 'buffer sequence' by removing blobs, and
         * deconstructing packet into object with placeholders and
         * a list of buffers.
         */
        encodeAsBinary(obj) {
          const deconstruction = deconstructPacket(obj);
          const pack = this.encodeAsString(deconstruction.packet);
          const buffers = deconstruction.buffers;
          buffers.unshift(pack);
          return buffers;
        }
      };
      Decoder = class _Decoder extends Emitter {
        /**
         * Decoder constructor
         *
         * @param {function} reviver - custom reviver to pass down to JSON.stringify
         */
        constructor(reviver) {
          super();
          this.reviver = reviver;
        }
        /**
         * Decodes an encoded packet string into packet JSON.
         *
         * @param {String} obj - encoded packet
         */
        add(obj) {
          let packet;
          if (typeof obj === "string") {
            if (this.reconstructor) {
              throw new Error("got plaintext data when reconstructing a packet");
            }
            packet = this.decodeString(obj);
            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;
            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {
              packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;
              this.reconstructor = new BinaryReconstructor(packet);
              if (packet.attachments === 0) {
                super.emitReserved("decoded", packet);
              }
            } else {
              super.emitReserved("decoded", packet);
            }
          } else if (isBinary(obj) || obj.base64) {
            if (!this.reconstructor) {
              throw new Error("got binary data when not reconstructing a packet");
            } else {
              packet = this.reconstructor.takeBinaryData(obj);
              if (packet) {
                this.reconstructor = null;
                super.emitReserved("decoded", packet);
              }
            }
          } else {
            throw new Error("Unknown type: " + obj);
          }
        }
        /**
         * Decode a packet String (JSON data)
         *
         * @param {String} str
         * @return {Object} packet
         */
        decodeString(str) {
          let i4 = 0;
          const p3 = {
            type: Number(str.charAt(0))
          };
          if (PacketType[p3.type] === void 0) {
            throw new Error("unknown packet type " + p3.type);
          }
          if (p3.type === PacketType.BINARY_EVENT || p3.type === PacketType.BINARY_ACK) {
            const start = i4 + 1;
            while (str.charAt(++i4) !== "-" && i4 != str.length) {
            }
            const buf = str.substring(start, i4);
            if (buf != Number(buf) || str.charAt(i4) !== "-") {
              throw new Error("Illegal attachments");
            }
            p3.attachments = Number(buf);
          }
          if ("/" === str.charAt(i4 + 1)) {
            const start = i4 + 1;
            while (++i4) {
              const c3 = str.charAt(i4);
              if ("," === c3)
                break;
              if (i4 === str.length)
                break;
            }
            p3.nsp = str.substring(start, i4);
          } else {
            p3.nsp = "/";
          }
          const next = str.charAt(i4 + 1);
          if ("" !== next && Number(next) == next) {
            const start = i4 + 1;
            while (++i4) {
              const c3 = str.charAt(i4);
              if (null == c3 || Number(c3) != c3) {
                --i4;
                break;
              }
              if (i4 === str.length)
                break;
            }
            p3.id = Number(str.substring(start, i4 + 1));
          }
          if (str.charAt(++i4)) {
            const payload = this.tryParse(str.substr(i4));
            if (_Decoder.isPayloadValid(p3.type, payload)) {
              p3.data = payload;
            } else {
              throw new Error("invalid payload");
            }
          }
          return p3;
        }
        tryParse(str) {
          try {
            return JSON.parse(str, this.reviver);
          } catch (e4) {
            return false;
          }
        }
        static isPayloadValid(type, payload) {
          switch (type) {
            case PacketType.CONNECT:
              return isObject(payload);
            case PacketType.DISCONNECT:
              return payload === void 0;
            case PacketType.CONNECT_ERROR:
              return typeof payload === "string" || isObject(payload);
            case PacketType.EVENT:
            case PacketType.BINARY_EVENT:
              return Array.isArray(payload) && (typeof payload[0] === "number" || typeof payload[0] === "string" && RESERVED_EVENTS.indexOf(payload[0]) === -1);
            case PacketType.ACK:
            case PacketType.BINARY_ACK:
              return Array.isArray(payload);
          }
        }
        /**
         * Deallocates a parser's resources
         */
        destroy() {
          if (this.reconstructor) {
            this.reconstructor.finishedReconstruction();
            this.reconstructor = null;
          }
        }
      };
      BinaryReconstructor = class {
        constructor(packet) {
          this.packet = packet;
          this.buffers = [];
          this.reconPack = packet;
        }
        /**
         * Method to be called when binary data received from connection
         * after a BINARY_EVENT packet.
         *
         * @param {Buffer | ArrayBuffer} binData - the raw binary data received
         * @return {null | Object} returns null if more binary data is expected or
         *   a reconstructed packet object if all buffers have been received.
         */
        takeBinaryData(binData) {
          this.buffers.push(binData);
          if (this.buffers.length === this.reconPack.attachments) {
            const packet = reconstructPacket(this.reconPack, this.buffers);
            this.finishedReconstruction();
            return packet;
          }
          return null;
        }
        /**
         * Cleans up binary packet reconstruction variables.
         */
        finishedReconstruction() {
          this.reconPack = null;
          this.buffers = [];
        }
      };
    }
  });

  // ../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/on.js
  function on2(obj, ev, fn2) {
    obj.on(ev, fn2);
    return function subDestroy() {
      obj.off(ev, fn2);
    };
  }
  var init_on = __esm({
    "../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/on.js"() {
    }
  });

  // ../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/socket.js
  var RESERVED_EVENTS2, Socket2;
  var init_socket2 = __esm({
    "../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/socket.js"() {
      init_esm5();
      init_on();
      init_esm3();
      RESERVED_EVENTS2 = Object.freeze({
        connect: 1,
        connect_error: 1,
        disconnect: 1,
        disconnecting: 1,
        // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
        newListener: 1,
        removeListener: 1
      });
      Socket2 = class extends Emitter {
        /**
         * `Socket` constructor.
         */
        constructor(io, nsp, opts) {
          super();
          this.connected = false;
          this.recovered = false;
          this.receiveBuffer = [];
          this.sendBuffer = [];
          this._queue = [];
          this._queueSeq = 0;
          this.ids = 0;
          this.acks = {};
          this.flags = {};
          this.io = io;
          this.nsp = nsp;
          if (opts && opts.auth) {
            this.auth = opts.auth;
          }
          this._opts = Object.assign({}, opts);
          if (this.io._autoConnect)
            this.open();
        }
        /**
         * Whether the socket is currently disconnected
         *
         * @example
         * const socket = io();
         *
         * socket.on("connect", () => {
         *   console.log(socket.disconnected); // false
         * });
         *
         * socket.on("disconnect", () => {
         *   console.log(socket.disconnected); // true
         * });
         */
        get disconnected() {
          return !this.connected;
        }
        /**
         * Subscribe to open, close and packet events
         *
         * @private
         */
        subEvents() {
          if (this.subs)
            return;
          const io = this.io;
          this.subs = [
            on2(io, "open", this.onopen.bind(this)),
            on2(io, "packet", this.onpacket.bind(this)),
            on2(io, "error", this.onerror.bind(this)),
            on2(io, "close", this.onclose.bind(this))
          ];
        }
        /**
         * Whether the Socket will try to reconnect when its Manager connects or reconnects.
         *
         * @example
         * const socket = io();
         *
         * console.log(socket.active); // true
         *
         * socket.on("disconnect", (reason) => {
         *   if (reason === "io server disconnect") {
         *     // the disconnection was initiated by the server, you need to manually reconnect
         *     console.log(socket.active); // false
         *   }
         *   // else the socket will automatically try to reconnect
         *   console.log(socket.active); // true
         * });
         */
        get active() {
          return !!this.subs;
        }
        /**
         * "Opens" the socket.
         *
         * @example
         * const socket = io({
         *   autoConnect: false
         * });
         *
         * socket.connect();
         */
        connect() {
          if (this.connected)
            return this;
          this.subEvents();
          if (!this.io["_reconnecting"])
            this.io.open();
          if ("open" === this.io._readyState)
            this.onopen();
          return this;
        }
        /**
         * Alias for {@link connect()}.
         */
        open() {
          return this.connect();
        }
        /**
         * Sends a `message` event.
         *
         * This method mimics the WebSocket.send() method.
         *
         * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
         *
         * @example
         * socket.send("hello");
         *
         * // this is equivalent to
         * socket.emit("message", "hello");
         *
         * @return self
         */
        send(...args) {
          args.unshift("message");
          this.emit.apply(this, args);
          return this;
        }
        /**
         * Override `emit`.
         * If the event is in `events`, it's emitted normally.
         *
         * @example
         * socket.emit("hello", "world");
         *
         * // all serializable datastructures are supported (no need to call JSON.stringify)
         * socket.emit("hello", 1, "2", { 3: ["4"], 5: Uint8Array.from([6]) });
         *
         * // with an acknowledgement from the server
         * socket.emit("hello", "world", (val) => {
         *   // ...
         * });
         *
         * @return self
         */
        emit(ev, ...args) {
          if (RESERVED_EVENTS2.hasOwnProperty(ev)) {
            throw new Error('"' + ev.toString() + '" is a reserved event name');
          }
          args.unshift(ev);
          if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {
            this._addToQueue(args);
            return this;
          }
          const packet = {
            type: PacketType.EVENT,
            data: args
          };
          packet.options = {};
          packet.options.compress = this.flags.compress !== false;
          if ("function" === typeof args[args.length - 1]) {
            const id = this.ids++;
            const ack = args.pop();
            this._registerAckCallback(id, ack);
            packet.id = id;
          }
          const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;
          const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);
          if (discardPacket) ; else if (this.connected) {
            this.notifyOutgoingListeners(packet);
            this.packet(packet);
          } else {
            this.sendBuffer.push(packet);
          }
          this.flags = {};
          return this;
        }
        /**
         * @private
         */
        _registerAckCallback(id, ack) {
          var _a;
          const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;
          if (timeout === void 0) {
            this.acks[id] = ack;
            return;
          }
          const timer = this.io.setTimeoutFn(() => {
            delete this.acks[id];
            for (let i4 = 0; i4 < this.sendBuffer.length; i4++) {
              if (this.sendBuffer[i4].id === id) {
                this.sendBuffer.splice(i4, 1);
              }
            }
            ack.call(this, new Error("operation has timed out"));
          }, timeout);
          const fn2 = (...args) => {
            this.io.clearTimeoutFn(timer);
            ack.apply(this, args);
          };
          fn2.withError = true;
          this.acks[id] = fn2;
        }
        /**
         * Emits an event and waits for an acknowledgement
         *
         * @example
         * // without timeout
         * const response = await socket.emitWithAck("hello", "world");
         *
         * // with a specific timeout
         * try {
         *   const response = await socket.timeout(1000).emitWithAck("hello", "world");
         * } catch (err) {
         *   // the server did not acknowledge the event in the given delay
         * }
         *
         * @return a Promise that will be fulfilled when the server acknowledges the event
         */
        emitWithAck(ev, ...args) {
          return new Promise((resolve, reject) => {
            const fn2 = (arg1, arg2) => {
              return arg1 ? reject(arg1) : resolve(arg2);
            };
            fn2.withError = true;
            args.push(fn2);
            this.emit(ev, ...args);
          });
        }
        /**
         * Add the packet to the queue.
         * @param args
         * @private
         */
        _addToQueue(args) {
          let ack;
          if (typeof args[args.length - 1] === "function") {
            ack = args.pop();
          }
          const packet = {
            id: this._queueSeq++,
            tryCount: 0,
            pending: false,
            args,
            flags: Object.assign({ fromQueue: true }, this.flags)
          };
          args.push((err, ...responseArgs) => {
            if (packet !== this._queue[0]) {
              return;
            }
            const hasError = err !== null;
            if (hasError) {
              if (packet.tryCount > this._opts.retries) {
                this._queue.shift();
                if (ack) {
                  ack(err);
                }
              }
            } else {
              this._queue.shift();
              if (ack) {
                ack(null, ...responseArgs);
              }
            }
            packet.pending = false;
            return this._drainQueue();
          });
          this._queue.push(packet);
          this._drainQueue();
        }
        /**
         * Send the first packet of the queue, and wait for an acknowledgement from the server.
         * @param force - whether to resend a packet that has not been acknowledged yet
         *
         * @private
         */
        _drainQueue(force = false) {
          if (!this.connected || this._queue.length === 0) {
            return;
          }
          const packet = this._queue[0];
          if (packet.pending && !force) {
            return;
          }
          packet.pending = true;
          packet.tryCount++;
          this.flags = packet.flags;
          this.emit.apply(this, packet.args);
        }
        /**
         * Sends a packet.
         *
         * @param packet
         * @private
         */
        packet(packet) {
          packet.nsp = this.nsp;
          this.io._packet(packet);
        }
        /**
         * Called upon engine `open`.
         *
         * @private
         */
        onopen() {
          if (typeof this.auth == "function") {
            this.auth((data) => {
              this._sendConnectPacket(data);
            });
          } else {
            this._sendConnectPacket(this.auth);
          }
        }
        /**
         * Sends a CONNECT packet to initiate the Socket.IO session.
         *
         * @param data
         * @private
         */
        _sendConnectPacket(data) {
          this.packet({
            type: PacketType.CONNECT,
            data: this._pid ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data) : data
          });
        }
        /**
         * Called upon engine or manager `error`.
         *
         * @param err
         * @private
         */
        onerror(err) {
          if (!this.connected) {
            this.emitReserved("connect_error", err);
          }
        }
        /**
         * Called upon engine `close`.
         *
         * @param reason
         * @param description
         * @private
         */
        onclose(reason, description) {
          this.connected = false;
          delete this.id;
          this.emitReserved("disconnect", reason, description);
          this._clearAcks();
        }
        /**
         * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from
         * the server.
         *
         * @private
         */
        _clearAcks() {
          Object.keys(this.acks).forEach((id) => {
            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);
            if (!isBuffered) {
              const ack = this.acks[id];
              delete this.acks[id];
              if (ack.withError) {
                ack.call(this, new Error("socket has been disconnected"));
              }
            }
          });
        }
        /**
         * Called with socket packet.
         *
         * @param packet
         * @private
         */
        onpacket(packet) {
          const sameNamespace = packet.nsp === this.nsp;
          if (!sameNamespace)
            return;
          switch (packet.type) {
            case PacketType.CONNECT:
              if (packet.data && packet.data.sid) {
                this.onconnect(packet.data.sid, packet.data.pid);
              } else {
                this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
              }
              break;
            case PacketType.EVENT:
            case PacketType.BINARY_EVENT:
              this.onevent(packet);
              break;
            case PacketType.ACK:
            case PacketType.BINARY_ACK:
              this.onack(packet);
              break;
            case PacketType.DISCONNECT:
              this.ondisconnect();
              break;
            case PacketType.CONNECT_ERROR:
              this.destroy();
              const err = new Error(packet.data.message);
              err.data = packet.data.data;
              this.emitReserved("connect_error", err);
              break;
          }
        }
        /**
         * Called upon a server event.
         *
         * @param packet
         * @private
         */
        onevent(packet) {
          const args = packet.data || [];
          if (null != packet.id) {
            args.push(this.ack(packet.id));
          }
          if (this.connected) {
            this.emitEvent(args);
          } else {
            this.receiveBuffer.push(Object.freeze(args));
          }
        }
        emitEvent(args) {
          if (this._anyListeners && this._anyListeners.length) {
            const listeners = this._anyListeners.slice();
            for (const listener of listeners) {
              listener.apply(this, args);
            }
          }
          super.emit.apply(this, args);
          if (this._pid && args.length && typeof args[args.length - 1] === "string") {
            this._lastOffset = args[args.length - 1];
          }
        }
        /**
         * Produces an ack callback to emit with an event.
         *
         * @private
         */
        ack(id) {
          const self2 = this;
          let sent = false;
          return function(...args) {
            if (sent)
              return;
            sent = true;
            self2.packet({
              type: PacketType.ACK,
              id,
              data: args
            });
          };
        }
        /**
         * Called upon a server acknowledgement.
         *
         * @param packet
         * @private
         */
        onack(packet) {
          const ack = this.acks[packet.id];
          if (typeof ack !== "function") {
            return;
          }
          delete this.acks[packet.id];
          if (ack.withError) {
            packet.data.unshift(null);
          }
          ack.apply(this, packet.data);
        }
        /**
         * Called upon server connect.
         *
         * @private
         */
        onconnect(id, pid) {
          this.id = id;
          this.recovered = pid && this._pid === pid;
          this._pid = pid;
          this.connected = true;
          this.emitBuffered();
          this.emitReserved("connect");
          this._drainQueue(true);
        }
        /**
         * Emit buffered events (received and emitted).
         *
         * @private
         */
        emitBuffered() {
          this.receiveBuffer.forEach((args) => this.emitEvent(args));
          this.receiveBuffer = [];
          this.sendBuffer.forEach((packet) => {
            this.notifyOutgoingListeners(packet);
            this.packet(packet);
          });
          this.sendBuffer = [];
        }
        /**
         * Called upon server disconnect.
         *
         * @private
         */
        ondisconnect() {
          this.destroy();
          this.onclose("io server disconnect");
        }
        /**
         * Called upon forced client/server side disconnections,
         * this method ensures the manager stops tracking us and
         * that reconnections don't get triggered for this.
         *
         * @private
         */
        destroy() {
          if (this.subs) {
            this.subs.forEach((subDestroy) => subDestroy());
            this.subs = void 0;
          }
          this.io["_destroy"](this);
        }
        /**
         * Disconnects the socket manually. In that case, the socket will not try to reconnect.
         *
         * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.
         *
         * @example
         * const socket = io();
         *
         * socket.on("disconnect", (reason) => {
         *   // console.log(reason); prints "io client disconnect"
         * });
         *
         * socket.disconnect();
         *
         * @return self
         */
        disconnect() {
          if (this.connected) {
            this.packet({ type: PacketType.DISCONNECT });
          }
          this.destroy();
          if (this.connected) {
            this.onclose("io client disconnect");
          }
          return this;
        }
        /**
         * Alias for {@link disconnect()}.
         *
         * @return self
         */
        close() {
          return this.disconnect();
        }
        /**
         * Sets the compress flag.
         *
         * @example
         * socket.compress(false).emit("hello");
         *
         * @param compress - if `true`, compresses the sending data
         * @return self
         */
        compress(compress2) {
          this.flags.compress = compress2;
          return this;
        }
        /**
         * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
         * ready to send messages.
         *
         * @example
         * socket.volatile.emit("hello"); // the server may or may not receive it
         *
         * @returns self
         */
        get volatile() {
          this.flags.volatile = true;
          return this;
        }
        /**
         * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
         * given number of milliseconds have elapsed without an acknowledgement from the server:
         *
         * @example
         * socket.timeout(5000).emit("my-event", (err) => {
         *   if (err) {
         *     // the server did not acknowledge the event in the given delay
         *   }
         * });
         *
         * @returns self
         */
        timeout(timeout) {
          this.flags.timeout = timeout;
          return this;
        }
        /**
         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
         * callback.
         *
         * @example
         * socket.onAny((event, ...args) => {
         *   console.log(`got ${event}`);
         * });
         *
         * @param listener
         */
        onAny(listener) {
          this._anyListeners = this._anyListeners || [];
          this._anyListeners.push(listener);
          return this;
        }
        /**
         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
         * callback. The listener is added to the beginning of the listeners array.
         *
         * @example
         * socket.prependAny((event, ...args) => {
         *   console.log(`got event ${event}`);
         * });
         *
         * @param listener
         */
        prependAny(listener) {
          this._anyListeners = this._anyListeners || [];
          this._anyListeners.unshift(listener);
          return this;
        }
        /**
         * Removes the listener that will be fired when any event is emitted.
         *
         * @example
         * const catchAllListener = (event, ...args) => {
         *   console.log(`got event ${event}`);
         * }
         *
         * socket.onAny(catchAllListener);
         *
         * // remove a specific listener
         * socket.offAny(catchAllListener);
         *
         * // or remove all listeners
         * socket.offAny();
         *
         * @param listener
         */
        offAny(listener) {
          if (!this._anyListeners) {
            return this;
          }
          if (listener) {
            const listeners = this._anyListeners;
            for (let i4 = 0; i4 < listeners.length; i4++) {
              if (listener === listeners[i4]) {
                listeners.splice(i4, 1);
                return this;
              }
            }
          } else {
            this._anyListeners = [];
          }
          return this;
        }
        /**
         * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
         * e.g. to remove listeners.
         */
        listenersAny() {
          return this._anyListeners || [];
        }
        /**
         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
         * callback.
         *
         * Note: acknowledgements sent to the server are not included.
         *
         * @example
         * socket.onAnyOutgoing((event, ...args) => {
         *   console.log(`sent event ${event}`);
         * });
         *
         * @param listener
         */
        onAnyOutgoing(listener) {
          this._anyOutgoingListeners = this._anyOutgoingListeners || [];
          this._anyOutgoingListeners.push(listener);
          return this;
        }
        /**
         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
         * callback. The listener is added to the beginning of the listeners array.
         *
         * Note: acknowledgements sent to the server are not included.
         *
         * @example
         * socket.prependAnyOutgoing((event, ...args) => {
         *   console.log(`sent event ${event}`);
         * });
         *
         * @param listener
         */
        prependAnyOutgoing(listener) {
          this._anyOutgoingListeners = this._anyOutgoingListeners || [];
          this._anyOutgoingListeners.unshift(listener);
          return this;
        }
        /**
         * Removes the listener that will be fired when any event is emitted.
         *
         * @example
         * const catchAllListener = (event, ...args) => {
         *   console.log(`sent event ${event}`);
         * }
         *
         * socket.onAnyOutgoing(catchAllListener);
         *
         * // remove a specific listener
         * socket.offAnyOutgoing(catchAllListener);
         *
         * // or remove all listeners
         * socket.offAnyOutgoing();
         *
         * @param [listener] - the catch-all listener (optional)
         */
        offAnyOutgoing(listener) {
          if (!this._anyOutgoingListeners) {
            return this;
          }
          if (listener) {
            const listeners = this._anyOutgoingListeners;
            for (let i4 = 0; i4 < listeners.length; i4++) {
              if (listener === listeners[i4]) {
                listeners.splice(i4, 1);
                return this;
              }
            }
          } else {
            this._anyOutgoingListeners = [];
          }
          return this;
        }
        /**
         * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
         * e.g. to remove listeners.
         */
        listenersAnyOutgoing() {
          return this._anyOutgoingListeners || [];
        }
        /**
         * Notify the listeners for each packet sent
         *
         * @param packet
         *
         * @private
         */
        notifyOutgoingListeners(packet) {
          if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
            const listeners = this._anyOutgoingListeners.slice();
            for (const listener of listeners) {
              listener.apply(this, packet.data);
            }
          }
        }
      };
    }
  });

  // ../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/contrib/backo2.js
  function Backoff(opts) {
    opts = opts || {};
    this.ms = opts.min || 100;
    this.max = opts.max || 1e4;
    this.factor = opts.factor || 2;
    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
    this.attempts = 0;
  }
  var init_backo2 = __esm({
    "../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/contrib/backo2.js"() {
      Backoff.prototype.duration = function() {
        var ms = this.ms * Math.pow(this.factor, this.attempts++);
        if (this.jitter) {
          var rand = Math.random();
          var deviation = Math.floor(rand * this.jitter * ms);
          ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
        }
        return Math.min(ms, this.max) | 0;
      };
      Backoff.prototype.reset = function() {
        this.attempts = 0;
      };
      Backoff.prototype.setMin = function(min) {
        this.ms = min;
      };
      Backoff.prototype.setMax = function(max) {
        this.max = max;
      };
      Backoff.prototype.setJitter = function(jitter) {
        this.jitter = jitter;
      };
    }
  });

  // ../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/manager.js
  var Manager;
  var init_manager = __esm({
    "../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/manager.js"() {
      init_esm4();
      init_socket2();
      init_esm5();
      init_on();
      init_backo2();
      init_esm3();
      Manager = class extends Emitter {
        constructor(uri, opts) {
          var _a;
          super();
          this.nsps = {};
          this.subs = [];
          if (uri && "object" === typeof uri) {
            opts = uri;
            uri = void 0;
          }
          opts = opts || {};
          opts.path = opts.path || "/socket.io";
          this.opts = opts;
          installTimerFunctions(this, opts);
          this.reconnection(opts.reconnection !== false);
          this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
          this.reconnectionDelay(opts.reconnectionDelay || 1e3);
          this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);
          this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
          this.backoff = new Backoff({
            min: this.reconnectionDelay(),
            max: this.reconnectionDelayMax(),
            jitter: this.randomizationFactor()
          });
          this.timeout(null == opts.timeout ? 2e4 : opts.timeout);
          this._readyState = "closed";
          this.uri = uri;
          const _parser = opts.parser || esm_exports;
          this.encoder = new _parser.Encoder();
          this.decoder = new _parser.Decoder();
          this._autoConnect = opts.autoConnect !== false;
          if (this._autoConnect)
            this.open();
        }
        reconnection(v3) {
          if (!arguments.length)
            return this._reconnection;
          this._reconnection = !!v3;
          return this;
        }
        reconnectionAttempts(v3) {
          if (v3 === void 0)
            return this._reconnectionAttempts;
          this._reconnectionAttempts = v3;
          return this;
        }
        reconnectionDelay(v3) {
          var _a;
          if (v3 === void 0)
            return this._reconnectionDelay;
          this._reconnectionDelay = v3;
          (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v3);
          return this;
        }
        randomizationFactor(v3) {
          var _a;
          if (v3 === void 0)
            return this._randomizationFactor;
          this._randomizationFactor = v3;
          (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v3);
          return this;
        }
        reconnectionDelayMax(v3) {
          var _a;
          if (v3 === void 0)
            return this._reconnectionDelayMax;
          this._reconnectionDelayMax = v3;
          (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v3);
          return this;
        }
        timeout(v3) {
          if (!arguments.length)
            return this._timeout;
          this._timeout = v3;
          return this;
        }
        /**
         * Starts trying to reconnect if reconnection is enabled and we have not
         * started reconnecting yet
         *
         * @private
         */
        maybeReconnectOnOpen() {
          if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
            this.reconnect();
          }
        }
        /**
         * Sets the current transport `socket`.
         *
         * @param {Function} fn - optional, callback
         * @return self
         * @public
         */
        open(fn2) {
          if (~this._readyState.indexOf("open"))
            return this;
          this.engine = new Socket(this.uri, this.opts);
          const socket = this.engine;
          const self2 = this;
          this._readyState = "opening";
          this.skipReconnect = false;
          const openSubDestroy = on2(socket, "open", function() {
            self2.onopen();
            fn2 && fn2();
          });
          const onError = (err) => {
            this.cleanup();
            this._readyState = "closed";
            this.emitReserved("error", err);
            if (fn2) {
              fn2(err);
            } else {
              this.maybeReconnectOnOpen();
            }
          };
          const errorSub = on2(socket, "error", onError);
          if (false !== this._timeout) {
            const timeout = this._timeout;
            const timer = this.setTimeoutFn(() => {
              openSubDestroy();
              onError(new Error("timeout"));
              socket.close();
            }, timeout);
            if (this.opts.autoUnref) {
              timer.unref();
            }
            this.subs.push(() => {
              this.clearTimeoutFn(timer);
            });
          }
          this.subs.push(openSubDestroy);
          this.subs.push(errorSub);
          return this;
        }
        /**
         * Alias for open()
         *
         * @return self
         * @public
         */
        connect(fn2) {
          return this.open(fn2);
        }
        /**
         * Called upon transport open.
         *
         * @private
         */
        onopen() {
          this.cleanup();
          this._readyState = "open";
          this.emitReserved("open");
          const socket = this.engine;
          this.subs.push(on2(socket, "ping", this.onping.bind(this)), on2(socket, "data", this.ondata.bind(this)), on2(socket, "error", this.onerror.bind(this)), on2(socket, "close", this.onclose.bind(this)), on2(this.decoder, "decoded", this.ondecoded.bind(this)));
        }
        /**
         * Called upon a ping.
         *
         * @private
         */
        onping() {
          this.emitReserved("ping");
        }
        /**
         * Called with data.
         *
         * @private
         */
        ondata(data) {
          try {
            this.decoder.add(data);
          } catch (e4) {
            this.onclose("parse error", e4);
          }
        }
        /**
         * Called when parser fully decodes a packet.
         *
         * @private
         */
        ondecoded(packet) {
          nextTick(() => {
            this.emitReserved("packet", packet);
          }, this.setTimeoutFn);
        }
        /**
         * Called upon socket error.
         *
         * @private
         */
        onerror(err) {
          this.emitReserved("error", err);
        }
        /**
         * Creates a new socket for the given `nsp`.
         *
         * @return {Socket}
         * @public
         */
        socket(nsp, opts) {
          let socket = this.nsps[nsp];
          if (!socket) {
            socket = new Socket2(this, nsp, opts);
            this.nsps[nsp] = socket;
          } else if (this._autoConnect && !socket.active) {
            socket.connect();
          }
          return socket;
        }
        /**
         * Called upon a socket close.
         *
         * @param socket
         * @private
         */
        _destroy(socket) {
          const nsps = Object.keys(this.nsps);
          for (const nsp of nsps) {
            const socket2 = this.nsps[nsp];
            if (socket2.active) {
              return;
            }
          }
          this._close();
        }
        /**
         * Writes a packet.
         *
         * @param packet
         * @private
         */
        _packet(packet) {
          const encodedPackets = this.encoder.encode(packet);
          for (let i4 = 0; i4 < encodedPackets.length; i4++) {
            this.engine.write(encodedPackets[i4], packet.options);
          }
        }
        /**
         * Clean up transport subscriptions and packet buffer.
         *
         * @private
         */
        cleanup() {
          this.subs.forEach((subDestroy) => subDestroy());
          this.subs.length = 0;
          this.decoder.destroy();
        }
        /**
         * Close the current socket.
         *
         * @private
         */
        _close() {
          this.skipReconnect = true;
          this._reconnecting = false;
          this.onclose("forced close");
          if (this.engine)
            this.engine.close();
        }
        /**
         * Alias for close()
         *
         * @private
         */
        disconnect() {
          return this._close();
        }
        /**
         * Called upon engine close.
         *
         * @private
         */
        onclose(reason, description) {
          this.cleanup();
          this.backoff.reset();
          this._readyState = "closed";
          this.emitReserved("close", reason, description);
          if (this._reconnection && !this.skipReconnect) {
            this.reconnect();
          }
        }
        /**
         * Attempt a reconnection.
         *
         * @private
         */
        reconnect() {
          if (this._reconnecting || this.skipReconnect)
            return this;
          const self2 = this;
          if (this.backoff.attempts >= this._reconnectionAttempts) {
            this.backoff.reset();
            this.emitReserved("reconnect_failed");
            this._reconnecting = false;
          } else {
            const delay = this.backoff.duration();
            this._reconnecting = true;
            const timer = this.setTimeoutFn(() => {
              if (self2.skipReconnect)
                return;
              this.emitReserved("reconnect_attempt", self2.backoff.attempts);
              if (self2.skipReconnect)
                return;
              self2.open((err) => {
                if (err) {
                  self2._reconnecting = false;
                  self2.reconnect();
                  this.emitReserved("reconnect_error", err);
                } else {
                  self2.onreconnect();
                }
              });
            }, delay);
            if (this.opts.autoUnref) {
              timer.unref();
            }
            this.subs.push(() => {
              this.clearTimeoutFn(timer);
            });
          }
        }
        /**
         * Called upon successful reconnect.
         *
         * @private
         */
        onreconnect() {
          const attempt = this.backoff.attempts;
          this._reconnecting = false;
          this.backoff.reset();
          this.emitReserved("reconnect", attempt);
        }
      };
    }
  });

  // ../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/index.js
  function lookup2(uri, opts) {
    if (typeof uri === "object") {
      opts = uri;
      uri = void 0;
    }
    opts = opts || {};
    const parsed = url(uri, opts.path || "/socket.io");
    const source = parsed.source;
    const id = parsed.id;
    const path = parsed.path;
    const sameNamespace = cache[id] && path in cache[id]["nsps"];
    const newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
    let io;
    if (newConnection) {
      io = new Manager(source, opts);
    } else {
      if (!cache[id]) {
        cache[id] = new Manager(source, opts);
      }
      io = cache[id];
    }
    if (parsed.query && !opts.query) {
      opts.query = parsed.queryKey;
    }
    return io.socket(parsed.path, opts);
  }
  var cache;
  var init_esm6 = __esm({
    "../../node_modules/.pnpm/socket.io-client@4.7.5_bufferutil@4.0.8/node_modules/socket.io-client/build/esm/index.js"() {
      init_url();
      init_manager();
      init_socket2();
      init_esm5();
      cache = {};
      Object.assign(lookup2, {
        Manager,
        Socket: Socket2,
        io: lookup2,
        connect: lookup2
      });
    }
  });

  // runtime/src/core/dev/extension-socket.ts
  var extension_socket_exports = {};
  __export(extension_socket_exports, {
    anySignal: () => anySignal,
    extensionStore: () => extensionStore
  });
  var DEV, reconnectInterval, createStore, extensionStore, anySignal, connectToWs;
  var init_extension_socket = __esm({
    "runtime/src/core/dev/extension-socket.ts"() {
      init_esm6();
      init_constants();
      init_toolbar();
      DEV = _window[`${FLAG}DEV_`];
      createStore = (initialData) => {
        const data = { ...initialData };
        const listeners = {};
        const get = (key) => {
          return data[key];
        };
        const set = (key, value2) => {
          data[key] = value2;
          emit(key, value2);
        };
        const subscribe = (key, listener) => {
          if (!listeners[key]) {
            listeners[key] = [];
          }
          listeners[key].push(listener);
          listener(data[key]);
          return () => {
            listeners[key] = listeners[key].filter((l3) => l3 !== listener);
          };
        };
        const emit = (key, value2) => {
          if (listeners[key]) {
            for (const listener of listeners[key]) {
              listener(value2);
            }
          }
        };
        return {
          get,
          set,
          subscribe
        };
      };
      extensionStore = createStore({
        ws: null,
        error: null,
        getFullTrackedFiberTree: null,
        tabId: crypto.randomUUID(),
        ingestUrl: null,
        compilerInstanceId: null,
        supportsWs: null,
        isProfilerRecording: false
      });
      DEV.extensionStore = extensionStore;
      anySignal = (...args) => {
        const signals = args.length === 1 && Array.isArray(args[0]) ? args[0] : args;
        const controller = new AbortController();
        for (const signal of signals) {
          if (signal.aborted) {
            controller.abort(signal.reason);
            break;
          }
          signal.addEventListener("abort", () => controller.abort(signal.reason), {
            signal: controller.signal
          });
        }
        return controller.signal;
      };
      connectToWs = ({ urlObj }) => {
        const ws2 = lookup2(`localhost:${urlObj.port}`, {
          path: "/ws",
          query: {
            tabId: extensionStore.get("tabId")
          },
          reconnection: true,
          reconnectionAttempts: Infinity,
          reconnectionDelay: 1e3,
          reconnectionDelayMax: 5e3,
          randomizationFactor: 0.5,
          transports: ["websocket"]
        });
        ws2.on("serverInfo", (serverId) => {
          const retry = () => {
            clearInterval(reconnectInterval);
            reconnectInterval = setInterval(() => {
              if (!ws2.connected) {
                ws2.connect();
                return;
              }
              clearInterval(reconnectInterval);
            }, 3e3);
          };
          if (!serverId) {
            ws2.disconnect();
            toolbarStore.setData({
              error: "Could not find dev server"
            });
            retry();
            return;
          }
          const compilerInstanceId2 = extensionStore.get("compilerInstanceId");
          if (compilerInstanceId2 && compilerInstanceId2 !== serverId) {
            toolbarStore.setData({
              error: "Could not find dev server"
            });
            ws2.disconnect();
            retry();
            return;
          }
          toolbarStore.setData({
            error: null
          });
          extensionStore.set("compilerInstanceId", serverId);
          extensionStore.set("ws", ws2);
          ws2.send(
            JSON.stringify({
              kind: "ready"
            })
          );
        });
        ws2.on("connect_error", (err) => {
          if (err instanceof Error) {
            if (err.name === "TypeError" && err.message.includes("CORS")) {
              toolbarStore.setData({
                error: `Failed to connect to WebSocket (Add ${urlObj.origin.replace(
                "/ws",
                ""
              )} to your CORS allow list)`,
                cause: err.message
              });
            } else if (err.name === "SecurityError") {
              toolbarStore.setData({
                error: `Failed to connect to WebSocket (Add ${urlObj.origin.replace(
                "/ws",
                ""
              )} to your CSP config)`,
                cause: err.message
              });
            } else {
              const acceptedHosts = ["localhost", "127.0.0.1"];
              if (!acceptedHosts.some((host) => urlObj.hostname.includes(host))) {
                console.error(
                  `[Million Lint] ${urlObj.hostname} is not an accepted host. Please use localhost or 127.0.0.1. Call for support: https://cal.com/aiden`
                );
                toolbarStore.setData({
                  error: `${urlObj.hostname} is an invalid host`,
                  cause: `connect_error ${err.message}`
                });
                return;
              }
            }
          }
          clearInterval(reconnectInterval);
          reconnectInterval = setInterval(() => {
            if (!ws2.connected) {
              ws2.connect();
              return;
            }
            clearInterval(reconnectInterval);
          }, 3e3);
        });
        ws2.on("disconnect", () => {
          clearInterval(reconnectInterval);
          reconnectInterval = setInterval(() => {
            if (!ws2.connected) {
              ws2.connect();
              return;
            }
            clearInterval(reconnectInterval);
          }, 3e3);
        });
        window.addEventListener("focus", function() {
          if (ws2.connected) {
            const fullTree = extensionStore.get("getFullTrackedFiberTree")?.() ?? [];
            ws2.send(
              JSON.stringify({
                kind: "window-focus",
                events: fullTree.map((event) => {
                  if (event.kind !== "update") {
                    return event;
                  }
                  return {
                    ...event,
                    nodesUpdated: null
                    // explicitly send null since this send is not triggered by re-renders
                    // invariant: WS will always send every react commit update in order
                  };
                })
              })
            );
          }
        });
        window.addEventListener("blur", function() {
          if (ws2.connected) {
            ws2.send(
              JSON.stringify({
                kind: "window-blur"
              })
            );
          }
        });
        return ws2;
      };
      extensionStore.subscribe("ingestUrl", async (url3) => {
        if (!url3)
          return;
        const urlObj = new URL(url3);
        const ws2 = connectToWs({ urlObj });
        ws2.on("supports-ws", (data) => {
          const message = JSON.parse(data);
          extensionStore.set("supportsWs", message.support);
          ws2.emit("supports-ws-ack", JSON.stringify({ ackId: message.ackId }));
        });
      });
    }
  });

  // ../../node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "../../node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      {
        (function() {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i4) {
            var index = i4;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i4) {
            var index = i4;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length2 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a3, b3) {
            var diff = a3.sortIndex - b3.sortIndex;
            return diff !== 0 ? diff : a3.id - b3.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              var currentTime; if (enableProfiling) ; else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../../node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../../node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/index.js"(exports, module) {
      {
        module.exports = require_scheduler_development();
      }
    }
  });

  // ../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      {
        (function() {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React10 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals2 = React10.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals2.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i4 = 0; i4 < dependencies.length; i4++) {
              allNativeEvents.add(dependencies[i4]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value2) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value2[Symbol.toStringTag] || value2.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value2) {
            {
              try {
                testStringCoercion(value2);
                return false;
              } catch (e4) {
                return true;
              }
            }
          }
          function testStringCoercion(value2) {
            return "" + value2;
          }
          function checkAttributeStringCoercion(value2, attributeName) {
            {
              if (willCoercionThrow(value2)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value2));
                return testStringCoercion(value2);
              }
            }
          }
          function checkKeyStringCoercion(value2) {
            {
              if (willCoercionThrow(value2)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value2));
                return testStringCoercion(value2);
              }
            }
          }
          function checkPropStringCoercion(value2, propName) {
            {
              if (willCoercionThrow(value2)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value2));
                return testStringCoercion(value2);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value2, propName) {
            {
              if (willCoercionThrow(value2)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value2));
                return testStringCoercion(value2);
              }
            }
          }
          function checkHtmlStringCoercion(value2) {
            {
              if (willCoercionThrow(value2)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value2));
                return testStringCoercion(value2);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value2) {
            {
              if (willCoercionThrow(value2)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value2));
                return testStringCoercion(value2);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value2, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value2) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value2, propertyInfo, isCustomComponentTag) {
            if (value2 === null || typeof value2 === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value2, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value2;
                case OVERLOADED_BOOLEAN:
                  return value2 === false;
                case NUMERIC:
                  return isNaN(value2);
                case POSITIVE_NUMERIC:
                  return isNaN(value2) || value2 < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url3) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url3)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url3));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value2 = node.getAttribute(attributeName);
                    if (value2 === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value2;
                    }
                    if (value2 === "" + expected) {
                      return expected;
                    }
                    return value2;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value2 = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value2 === "" + expected) {
                return expected;
              }
              return value2;
            }
          }
          function setValueForProperty(node, name, value2, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value2, propertyInfo, isCustomComponentTag)) {
              value2 = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value2 === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value2, name);
                  }
                  node.setAttribute(_attributeName, "" + value2);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value2 === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value2;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value2 === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value2 === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value2, attributeName);
                  }
                  attributeValue = "" + value2;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals2.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            fiber._debugOwner ? fiber._debugOwner.type : null;
            fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x3) {
              return "\nError generating stack: " + x3.message + "\n" + x3.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals2.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber2(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString2(value2) {
            return "" + value2;
          }
          function getToStringValue(value2) {
            switch (typeof value2) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value2;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value2);
                }
                return value2;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value2 = "";
            if (!node) {
              return value2;
            }
            if (isCheckable(node)) {
              value2 = node.checked ? "true" : "false";
            } else {
              value2 = node.value;
            }
            return value2;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value2) {
                {
                  checkFormFieldValueStringCoercion(value2);
                }
                currentValue = "" + value2;
                set2.call(this, value2);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value2) {
                {
                  checkFormFieldValueStringCoercion(value2);
                }
                currentValue = "" + value2;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e4) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value2 = getToStringValue(props.value);
            var type = props.type;
            if (value2 != null) {
              if (type === "number") {
                if (value2 === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value2) {
                  node.value = toString2(value2);
                }
              } else if (node.value !== toString2(value2)) {
                node.value = toString2(value2);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value2);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString2(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i4 = 0; i4 < group.length; i4++) {
                var otherNode = group[i4];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value2) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value2 == null) {
                node.defaultValue = toString2(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString2(value2)) {
                node.defaultValue = toString2(value2);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React10.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString2(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a3) {
            return isArrayImpl(a3);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i4 = 0; i4 < valuePropNames.length; i4++) {
                var propName = valuePropNames[i4];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i4 = 0; i4 < selectedValues.length; i4++) {
                selectedValue["$" + selectedValues[i4]] = true;
              }
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i2].value);
                if (options2[_i2].selected !== selected) {
                  options2[_i2].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString2(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i22 = 0; _i22 < options2.length; _i22++) {
                if (options2[_i22].value === _selectedValue) {
                  options2[_i22].selected = true;
                  if (setDefaultSelected) {
                    options2[_i22].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i22].disabled) {
                  defaultSelected = options2[_i22];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value2 = props.value;
            if (value2 != null) {
              updateOptions(node, !!props.multiple, value2, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value2 = props.value;
            if (value2 != null) {
              updateOptions(node, !!props.multiple, value2, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value2 = props.value;
            if (value2 != null) {
              updateOptions(node, !!props.multiple, value2, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString2(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value2 = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value2 != null) {
              var newValue = toString2(value2);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString2(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value2, isCustomProperty) {
            var isEmpty = value2 == null || typeof value2 === "boolean" || value2 === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value2 === "number" && value2 !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value2 + "px";
            }
            {
              checkCSSPropertyStringCoercion(value2, name);
            }
            return ("" + value2).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_3, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value2) {
              if (warnedStyleValues.hasOwnProperty(value2) && warnedStyleValues[value2]) {
                return;
              }
              warnedStyleValues[value2] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value2.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value2) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value2) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value2) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value2)) {
                warnStyleValueWithSemicolon(name, value2);
              }
              if (typeof value2 === "number") {
                if (isNaN(value2)) {
                  warnStyleValueIsNaN(name, value2);
                } else if (!isFinite(value2)) {
                  warnStyleValueIsInfinity(name, value2);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value2) {
            return value2 == null || typeof value2 === "boolean" || value2 === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i4 = 0; i4 < longhands.length; i4++) {
                expanded[longhands[i4]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value2, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value2 !== null && value2 !== void 0 && typeof value2 !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value2);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value2 === "number" && isNaN(value2)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value2 === "boolean" && shouldRemoveAttributeWithWarning(name, value2, propertyInfo, false)) {
                if (value2) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value2, name, name, value2, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value2, name, name, value2, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value2, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value2 === "false" || value2 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value2, name, value2 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value2);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i4 = 0; i4 < queuedTargets.length; i4++) {
                restoreStateOfTarget(queuedTargets[i4]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, a3, b3) {
            if (isInsideEventHandler) {
              return fn2(a3, b3);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, a3, b3);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e4) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a3, b3, c3, d3, e4, f3) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a3, b3, c3, d3, e4, f3) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a3, b3, c3, d3, e4, f3) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a3, b3, c3, d3, e4, f3) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value2) {
            key._reactInternals = value2;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork2 = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals2.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a3 = fiber;
            var b3 = alternate;
            while (true) {
              var parentA = a3.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a3 = b3 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a3) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b3) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a3.return !== b3.return) {
                a3 = parentA;
                b3 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a3) {
                    didFindChild = true;
                    a3 = parentA;
                    b3 = parentB;
                    break;
                  }
                  if (_child === b3) {
                    didFindChild = true;
                    b3 = parentA;
                    a3 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a3) {
                      didFindChild = true;
                      a3 = parentB;
                      b3 = parentA;
                      break;
                    }
                    if (_child === b3) {
                      didFindChild = true;
                      b3 = parentB;
                      a3 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a3.alternate !== b3) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a3.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a3.stateNode.current === a3) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map2 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map2.set(lane, label);
                lane *= 2;
              }
              return map2;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x3) {
            var asUint = x3 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a3, b3) {
            return (a3 & b3) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a3, b3) {
            return a3 | b3;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a3, b3) {
            return a3 & b3;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a3, b3) {
            return a3 !== NoLane && a3 < b3 ? a3 : b3;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i4 = 0; i4 < TotalLanes; i4++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn2) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn2();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a3, b3) {
            return a3 !== 0 && a3 < b3 ? a3 : b3;
          }
          function lowerEventPriority(a3, b3) {
            return a3 > b3 ? a3 : b3;
          }
          function isHigherEventPriority(a3, b3) {
            return a3 !== 0 && a3 < b3;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn2) {
            _attemptSynchronousHydration = fn2;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn2) {
            getCurrentUpdatePriority$1 = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i4 = 0;
            for (; i4 < queuedExplicitHydrationTargets.length; i4++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i4].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i4, 0, queuedTarget);
            if (i4 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i4 = 1; i4 < queuedDiscreteEvents.length; i4++) {
                var queuedEvent = queuedDiscreteEvents[i4];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i2 = 0; _i2 < queuedExplicitHydrationTargets.length; _i2++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i2];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals2.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset2() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars2 = nativeEvent.data;
                if (chars2 === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars2;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars2 = getData();
                reset2();
                isComposing = false;
                return chars2;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars2;
            if (canUseTextInputEvent) {
              chars2 = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars2 = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars2) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars2;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is2(x3, y3) {
            return x3 === y3 && (x3 !== 0 || 1 / x3 === 1 / y3) || x3 !== x3 && y3 !== y3;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i4 = 0; i4 < keysA.length; i4++) {
              var currentKey = keysA[i4];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e4) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length2 + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length2 + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length2 += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length2;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node.textContent.length;
            var start = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i4 = 0; i4 < ancestors.length; i4++) {
                var info = ancestors[i4];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i4 = 0; i4 < simpleEventPluginEvents.length; i4++) {
              var eventName = simpleEventPluginEvents[i4];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i4 = dispatchListeners.length - 1; i4 >= 0; i4--) {
                var _dispatchListeners$i = dispatchListeners[i4], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i2 = 0; _i2 < dispatchListeners.length; _i2++) {
                var _dispatchListeners$_i = dispatchListeners[_i2], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i4 = 0; i4 < dispatchQueue.length; i4++) {
              var _dispatchQueue$i = dispatchQueue[i4], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + ("bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i4 = 0; i4 < updatePayload.length; i4 += 2) {
              var propKey = updatePayload[i4];
              var propValue = updatePayload[i4 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement3(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i4 = 0; i4 < mediaEventTypes.length; i4++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i4], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i4 = 0; i4 < mediaEventTypes.length; i4++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i4], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i2 = 0; _i2 < attributes.length; _i2++) {
                var name = attributes[_i2].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i2].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement3(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals2.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value2, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value2;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node.type;
                    if (isContextProvider(Component2)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i4 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i4 < queue.length; i4++) {
                  var callback = queue[i4];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i4 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id3 = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id3;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals2.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value2) {
                array.push(value2);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber2(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value2) {
                  var refs = resolvedInst.refs;
                  if (value2 === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value2;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init2 = lazyType._init;
            return init2(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber2(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber2(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber2(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber2(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber2(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return createChild(returnFiber, init2(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init2(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init2(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init2 = child._init;
                    warnOnInvalidKey(init2(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i4 = 0; i4 < newChildren.length; i4++) {
                  var child = newChildren[i4];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber2(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber2(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber2(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber2(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init2(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value2 = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value2,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value2;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i4 = 0; i4 < concurrentQueues.length; i4++) {
                var queue = concurrentQueues[i4];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i4 = 0; i4 < effects.length; i4++) {
                var effect = effects[i4];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c3) {
            if (c3 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c3;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i4 = 0; i4 < workInProgressSources.length; i4++) {
              var mutableSource = workInProgressSources[i4];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals2.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals2.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i4 = 0; i4 <= hookTypesUpdateIndexDev; i4++) {
                    var oldHookName = hookTypesDev[i4];
                    var newHookName = i4 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i4 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i4 = 0; i4 < prevDeps.length && i4 < nextDeps.length; i4++) {
              if (objectIs(nextDeps[i4], prevDeps[i4])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init2) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init2 !== void 0) {
              initialState = init2(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value2, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value2) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value2;
            return value2;
          }
          function updateDeferredValue(value2) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value2);
          }
          function rerenderDeferredValue(value2) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value2;
              return value2;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value2);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value2) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value2, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value2;
              return value2;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending2 = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending2, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending2 = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending2, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending2 = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending2, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value2, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value2) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value2);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component2.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value2, source) {
            return {
              value: value2,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value2, digest, stack) {
            return {
              value: value2,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              }
            } catch (e4) {
              setTimeout(function() {
                throw e4;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value2, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value2 !== null && typeof value2 === "object" && typeof value2.then === "function") {
              var wakeable = value2;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value2 = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value2, sourceFiber));
                  return;
                }
              }
            }
            value2 = createCapturedValueAtFiber(value2, sourceFiber);
            renderDidError(value2);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value2;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value2;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals2.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var render3 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork2;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component2.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork2;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    outerMemoType = init2(payload);
                  } catch (x3) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork2;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork2;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            var Component2 = init2(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component2)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value2;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value2 = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork2;
            {
              if (typeof value2 === "object" && value2 !== null && typeof value2.render === "function" && value2.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value2 === "object" && value2 !== null && typeof value2.render === "function" && value2.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value2.state !== null && value2.state !== void 0 ? value2.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value2);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value2 = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value2, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component2.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i4 = 0; i4 < children.length; i4++) {
                    if (!validateSuspenseListNestedChild(children[i4], i4)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i2 = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i2)) {
                          return;
                        }
                        _i2++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render3 = newProps.children;
            {
              if (typeof render3 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render3(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork2;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber2(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber2(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender2 = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender2 === "function") {
                      onRender2(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber2(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber2(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i4 = 0; i4 < deletions.length; i4++) {
                var childToDelete = deletions[i4];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber2(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber2(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber2(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber2(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber2(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i4 = 0; i4 < deletions.length; i4++) {
                    var fiberToDelete = deletions[i4];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber2(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber2(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            symbolFor("selector.component");
            symbolFor("selector.has_pseudo_class");
            symbolFor("selector.role");
            symbolFor("selector.test_id");
            symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals2.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals2.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals2.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals2.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals2.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors2) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors2;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors2);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i4 = 0; i4 < checks.length; i4++) {
                      var check = checks[i4];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn2, a3, b3, c3, d3) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn2(a3, b3, c3, d3);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn2) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn2) {
                return fn2();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber2(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber2(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i4 = 0; i4 < recoverableErrors.length; i4++) {
                var recoverableError = recoverableErrors[i4];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i4 = 0; i4 < profilerEffects.length; i4++) {
                var _fiber = profilerEffects[i4];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber2(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber2(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber2(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber2(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber2(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types2 = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types2.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e4) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i2 = 0; _i2 < TotalLanes; _i2++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber2(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber2(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i4 = 0; i4 < newPath.length - 1; i4++) {
                  if (oldPath[i4] !== newPath[i4]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value2) {
              if (index2 >= path.length) {
                return value2;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value2);
              return updated;
            };
            var copyWithSet = function(obj, path, value2) {
              return copyWithSetImpl(obj, path, 0, value2);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value2) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value2) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals2.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i4 = 0; i4 < mutableSources.length; i4++) {
                var mutableSource = mutableSources[i4];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals2.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render2(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn2) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn2);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol4 = window.location.protocol;
                if (/^(https?|file):$/.test(protocol4)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol4 === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render2;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/index.js"(exports, module) {
      {
        module.exports = require_react_dom_development();
      }
    }
  });

  // ../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/client.js
  var require_client = __commonJS({
    "../../node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/client.js"(exports) {
      var m3 = require_react_dom();
      {
        i4 = m3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c3, o4) {
          i4.usingClientEntryPoint = true;
          try {
            return m3.createRoot(c3, o4);
          } finally {
            i4.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c3, h3, o4) {
          i4.usingClientEntryPoint = true;
          try {
            return m3.hydrateRoot(c3, h3, o4);
          } finally {
            i4.usingClientEntryPoint = false;
          }
        };
      }
      var i4;
    }
  });

  // runtime/src/core/dev/toolbar.tsx
  var toolbar_exports = {};
  __export(toolbar_exports, {
    getCWV: () => getCWV,
    toolbarStore: () => toolbarStore,
    useSocketStatus: () => useSocketStatus
  });
  var import_react7, useDeferredValue, useSyncExternalStore2, posthogKey, posthogConfig, Score, getCWV, DEV2, toolbarStore, Feedback, Select, Scan, socketMap, initializeSocketEntry, noSocket, useSocketStatus, SurveyContext, WithIngestError, WithWebsocketStatus, AppContext, App, render;
  var init_toolbar = __esm({
    "runtime/src/core/dev/toolbar.tsx"() {
      init_module();
      init_esm();
      import_react7 = __toESM(require_react());
      init_dist();
      init_core();
      init_constants();
      init_fps_stats();
      init_select();
      init_feedback();
      init_use_ses_shim();
      init_extension_socket();
      useDeferredValue = (value2, delay = 100) => {
        const [deferredValue, setDeferredValue] = (0, import_react7.useState)(value2);
        (0, import_react7.useEffect)(() => {
          let isMounted = true;
          const handle = setTimeout(() => {
            if (isMounted) {
              setDeferredValue(value2);
            }
          }, delay);
          return () => {
            isMounted = false;
            clearTimeout(handle);
          };
        }, [value2]);
        return deferredValue;
      };
      useSyncExternalStore2 = (subscribe, getSnapshot) => useSyncExternalStore(subscribe, getSnapshot);
      posthogKey = "phc_63GH6Se2jAEx8SUH5ILoJ0alUunbAnWbc5ORKUphj2i";
      posthogConfig = {
        api_host: "https://app.posthog.com",
        autocapture: false,
        capture_pageview: false,
        disable_session_recording: true
      };
      try {
        Qn.init(posthogKey, posthogConfig);
      } catch {
      }
      Score = {
        Unknown: {
          color: "#ffffff2e",
          backgroundColor: "#111",
          severity: -1
        },
        Good: {
          color: "#0ace6b2e",
          backgroundColor: "#185929",
          severity: 0
        },
        NeedsImprovement: {
          color: "#fcba032e",
          backgroundColor: "#9c7200",
          severity: 1
        },
        Poor: {
          color: "#ff575e2e",
          backgroundColor: "#440c13",
          severity: 2
        }
      };
      getCWV = (event) => {
        if (!event)
          return Score.Unknown;
        const { n: name, t: value2 } = event;
        if (name === "CLS") {
          if (value2 > 0.25)
            return Score.Poor;
          if (value2 > 0.1)
            return Score.NeedsImprovement;
          return Score.Good;
        }
        if (name === "FCP") {
          if (value2 > 3e3)
            return Score.Poor;
          if (value2 > 1800)
            return Score.NeedsImprovement;
          return Score.Good;
        }
        if (name === "LCP") {
          if (value2 < 4e3)
            return Score.Good;
          if (value2 < 2500)
            return Score.NeedsImprovement;
          return Score.Poor;
        }
        if (value2 > 500)
          return Score.Poor;
        if (value2 > 200)
          return Score.NeedsImprovement;
        return Score.Good;
      };
      DEV2 = _window[`${FLAG}DEV_`];
      toolbarStore = {
        listeners: [],
        batch: [],
        events: [],
        data: {
          items: 0,
          pending: false,
          state: "hidden",
          destroy: _null,
          selector: _null,
          selectedName: _null,
          scan: Boolean(_window.localStorage.getItem("MILLION_SCAN")),
          replay: false,
          latestRender: void 0,
          problems: [],
          uriScheme: "vscode"
        },
        pushBatch: (batch2, events2) => {
          const len = batch2.length;
          const newBatch = new _Array(len);
          const initialEventsIndex = toolbarStore.events.length;
          for (let i4 = 0; i4 < len; i4++) {
            const item = _Object.assign({}, batch2[i4]);
            const render2 = _Object.assign({}, item.r);
            if (render2.x !== -1 && render2.x != _null) {
              render2.x += initialEventsIndex;
            }
            item.r = render2;
            newBatch[i4] = item;
          }
          toolbarStore.events.push(...events2);
          toolbarStore.batch.push(...newBatch);
          toolbarStore.emit();
        },
        setData(data) {
          toolbarStore.data = {
            ...toolbarStore.data,
            ...data
          };
          toolbarStore.emit();
        },
        subscribe(listener) {
          toolbarStore.listeners.push(listener);
          return () => {
            toolbarStore.listeners = toolbarStore.listeners.filter(
              (l3) => l3 !== listener
            );
          };
        },
        getSnapshot() {
          return toolbarStore.data;
        },
        emit() {
          for (const listener of toolbarStore.listeners) {
            listener();
          }
        },
        getCWV,
        createSelectionAreaElement
      };
      Ee2({
        enabled: true,
        showToolbar: false
      });
      ve2({
        enabled: toolbarStore.data.scan
      });
      DEV2.toolbarStore = toolbarStore;
      Feedback = ({ isDragging }) => {
        const posthog = usePostHog();
        const { survey, setSurvey } = (0, import_react7.useContext)(SurveyContext);
        const [isOpen, setIsOpen] = (0, import_react7.useState)(false);
        (0, import_react7.useEffect)(() => {
          try {
            posthog.getSurveys(setSurvey);
          } catch {
          }
        }, [posthog]);
        return /* @__PURE__ */ import_react7.default.createElement(
          "div",
          {
            style: {
              border: "none",
              outline: "none",
              background: "transparent",
              color: "white",
              borderRadius: "1rem",
              height: "100%",
              display: "flex",
              alignItems: "center",
              justifyContent: "center"
            },
            className: "util-button"
          },
          !isDragging ? /* @__PURE__ */ import_react7.default.createElement(
            "button",
            {
              onClick: () => setIsOpen(true),
              style: {
                border: "none",
                outline: "none",
                background: "transparent",
                color: "white",
                borderRadius: "1rem",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                paddingRight: 0
              }
            },
            /* @__PURE__ */ import_react7.default.createElement(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                width: "14",
                height: "14",
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: "currentColor",
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                className: "opacity-hover"
              },
              /* @__PURE__ */ import_react7.default.createElement("circle", { cx: "12", cy: "12", r: "10" }),
              /* @__PURE__ */ import_react7.default.createElement("path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" }),
              /* @__PURE__ */ import_react7.default.createElement("path", { d: "M12 17h.01" })
            )
          ) : null,
          isOpen && /* @__PURE__ */ import_react7.default.createElement(FeedbackSurvey, { survey: survey[0], setIsOpen })
        );
      };
      Select = ({ isDragging }) => {
        const data = useSyncExternalStore2(
          toolbarStore.subscribe,
          toolbarStore.getSnapshot
        );
        const [isHovered, setIsHovered] = (0, import_react7.useState)(false);
        const buttonRef = (0, import_react7.useRef)(null);
        (0, import_react7.useEffect)(() => {
          if (!data.destroy)
            destroySelections();
        }, [data.destroy]);
        const handleClick = (0, import_react7.useCallback)(() => {
          if (data.destroy) {
            data.destroy();
            destroySelections();
          } else {
            toolbarStore.setData({
              destroy: startSelection(
                toolbarStore.data.uriScheme,
                (data2) => toolbarStore.setData(data2)
              )
            });
          }
        }, [data.destroy]);
        return /* @__PURE__ */ import_react7.default.createElement(
          "button",
          {
            ref: buttonRef,
            style: {
              color: data.destroy ? "black" : "white",
              background: data.destroy ? "#b18feb" : isHovered ? "#b18feb49" : "transparent",
              borderRadius: "1rem",
              marginLeft: 0,
              padding: "0.25rem 0.5rem",
              display: "flex",
              alignItems: "center",
              gap: "3px",
              outline: "none",
              border: "none"
            },
            onMouseEnter: () => setIsHovered(true),
            onMouseLeave: () => setIsHovered(false),
            className: "util-button",
            onClick: handleClick
          },
          /* @__PURE__ */ import_react7.default.createElement(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              width: "16",
              height: "16",
              viewBox: "0 0 24 24",
              fill: "none",
              stroke: "currentColor",
              strokeWidth: "2",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            },
            /* @__PURE__ */ import_react7.default.createElement("path", { d: "M5 3a2 2 0 0 0-2 2" }),
            /* @__PURE__ */ import_react7.default.createElement("path", { d: "M19 3a2 2 0 0 1 2 2" }),
            /* @__PURE__ */ import_react7.default.createElement("path", { d: "m12 12 4 10 1.7-4.3L22 16Z" }),
            /* @__PURE__ */ import_react7.default.createElement("path", { d: "M5 21a2 2 0 0 1-2-2" }),
            /* @__PURE__ */ import_react7.default.createElement("path", { d: "M9 3h1" }),
            /* @__PURE__ */ import_react7.default.createElement("path", { d: "M9 21h2" }),
            /* @__PURE__ */ import_react7.default.createElement("path", { d: "M14 3h1" }),
            /* @__PURE__ */ import_react7.default.createElement("path", { d: "M3 9v1" }),
            /* @__PURE__ */ import_react7.default.createElement("path", { d: "M21 9v2" }),
            /* @__PURE__ */ import_react7.default.createElement("path", { d: "M3 14v1" })
          ),
          !isDragging ? "Select" : null
        );
      };
      Scan = ({ isDragging }) => {
        const data = useSyncExternalStore2(
          toolbarStore.subscribe,
          toolbarStore.getSnapshot
        );
        const [isHovered, setIsHovered] = (0, import_react7.useState)(false);
        const buttonRef = (0, import_react7.useRef)(null);
        const handleClick = (0, import_react7.useCallback)(() => {
          const newScanValue = !data.scan;
          toolbarStore.setData({
            scan: newScanValue
          });
          _window.localStorage.setItem("MILLION_SCAN", newScanValue ? "1" : "");
          ve2({
            enabled: newScanValue
          });
        }, [data.scan]);
        const createScanJSX = (shouldPing) => /* @__PURE__ */ import_react7.default.createElement(
          "div",
          {
            style: {
              position: shouldPing ? "absolute" : "relative"
            },
            className: shouldPing ? "animate-ping" : ""
          },
          /* @__PURE__ */ import_react7.default.createElement(
            "button",
            {
              ref: buttonRef,
              style: {
                color: shouldPing ? "transparent" : data.scan ? "black" : "white",
                background: data.scan ? "#b18feb" : isHovered ? "#b18feb49" : "transparent",
                borderRadius: "1rem",
                marginLeft: 0,
                padding: "0.25rem 0.5rem",
                display: "flex",
                alignItems: "center",
                gap: "3px",
                outline: "none",
                border: "none",
                cursor: "pointer"
              },
              onMouseEnter: () => setIsHovered(true),
              onMouseLeave: () => setIsHovered(false),
              className: "util-button",
              onClick: handleClick
            },
            /* @__PURE__ */ import_react7.default.createElement(
              "svg",
              {
                xmlns: "http://www.w3.org/2000/svg",
                width: "16",
                height: "16",
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: "currentColor",
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              },
              /* @__PURE__ */ import_react7.default.createElement("path", { d: "M3 7V5a2 2 0 0 1 2-2h2" }),
              /* @__PURE__ */ import_react7.default.createElement("path", { d: "M17 3h2a2 2 0 0 1 2 2v2" }),
              /* @__PURE__ */ import_react7.default.createElement("path", { d: "M21 17v2a2 2 0 0 1-2 2h-2" }),
              /* @__PURE__ */ import_react7.default.createElement("path", { d: "M7 21H5a2 2 0 0 1-2-2v-2" }),
              /* @__PURE__ */ import_react7.default.createElement("circle", { cx: "12", cy: "12", r: "1" }),
              /* @__PURE__ */ import_react7.default.createElement("path", { d: "M5 12s2.5-5 7-5 7 5 7 5-2.5 5-7 5-7-5-7-5" })
            ),
            !isDragging ? "Scan" : ""
          )
        );
        return /* @__PURE__ */ import_react7.default.createElement("div", null, createScanJSX(true), createScanJSX(false));
      };
      socketMap = /* @__PURE__ */ new WeakMap();
      initializeSocketEntry = (socket) => {
        if (socketMap.has(socket)) {
          return;
        }
        const entry = {
          state: socket.connected ? { kind: "connected" } : { kind: "connecting" },
          listeners: /* @__PURE__ */ new Set()
        };
        const handleConnect = () => {
          entry.state = { kind: "connected" };
          entry.listeners.forEach((listener) => listener());
        };
        const handleReconnectAttempt = (attempt) => {
          entry.state = { kind: "reconnecting", attempt };
          entry.listeners.forEach((listener) => listener());
        };
        const handleConnectError = (error) => {
          const message = error?.message || "An unknown error occurred.";
          entry.state = { kind: "error", message };
          entry.listeners.forEach((listener) => listener());
        };
        const handleDisconnect = (_3) => {
          entry.state = { kind: "connecting" };
          entry.listeners.forEach((listener) => listener());
        };
        socket.on("connect", handleConnect);
        socket.on("reconnect_attempt", handleReconnectAttempt);
        socket.on("connect_error", handleConnectError);
        socket.on("disconnect", handleDisconnect);
        socketMap.set(socket, entry);
      };
      noSocket = { kind: "no_socket" };
      useSocketStatus = (socket) => {
        if (!socket) {
          return useSyncExternalStore2(
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            () => () => {
            },
            () => noSocket
          );
        }
        initializeSocketEntry(socket);
        const getSnapshot = () => {
          const entry = socketMap.get(socket);
          return entry ? entry.state : { kind: "no_socket" };
        };
        const subscribe = (callback) => {
          const entry = socketMap.get(socket);
          if (!entry) {
            return () => {
            };
          }
          entry.listeners.add(callback);
          return () => {
            entry.listeners.delete(callback);
          };
        };
        return useSyncExternalStore2(subscribe, getSnapshot);
      };
      SurveyContext = (0, import_react7.createContext)({
        survey: [],
        setSurvey: () => {
          throw new Error("must be under SurveyContext");
        }
      });
      WithIngestError = ({ children }) => {
        const { dragStyles, editorWS: editorWS2, isDragging, onToolbarDown, toolbarRef } = (0, import_react7.useContext)(AppContext);
        const { survey } = (0, import_react7.useContext)(SurveyContext);
        const wsStatus = useSocketStatus(editorWS2);
        const data = useSyncExternalStore2(
          toolbarStore.subscribe,
          toolbarStore.getSnapshot
        );
        if (wsStatus.kind === "reconnecting") {
          return children;
        }
        if (data.error) {
          return /* @__PURE__ */ import_react7.default.createElement(
            "div",
            {
              className: `toolbar error ${isDragging ? "dragging" : ""}`,
              style: dragStyles,
              onMouseDown: onToolbarDown,
              ref: toolbarRef
            },
            /* @__PURE__ */ import_react7.default.createElement(
              "div",
              {
                style: {
                  position: "relative",
                  display: "flex",
                  alignItems: "center"
                }
              },
              /* @__PURE__ */ import_react7.default.createElement(
                "div",
                {
                  style: { position: "absolute" },
                  className: "animate-ping error-circle"
                }
              ),
              /* @__PURE__ */ import_react7.default.createElement("div", { className: "error-circle" })
            ),
            /* @__PURE__ */ import_react7.default.createElement("div", { className: "div" }),
            /* @__PURE__ */ import_react7.default.createElement(
              "div",
              {
                onDoubleClick: () => {
                  toolbarStore.setData({
                    state: "hidden"
                  });
                }
              },
              data.error
            ),
            survey.length > 0 && /* @__PURE__ */ import_react7.default.createElement(import_react7.default.Fragment, null, /* @__PURE__ */ import_react7.default.createElement("div", { className: "div" }), /* @__PURE__ */ import_react7.default.createElement(PostHogProvider, { client: Qn }, /* @__PURE__ */ import_react7.default.createElement(Feedback, { isDragging })))
          );
        }
        return children;
      };
      WithWebsocketStatus = ({ children }) => {
        const { dragStyles, isDragging, onToolbarDown, toolbarRef, editorWS: editorWS2 } = (0, import_react7.useContext)(AppContext);
        const socketStatus = useSocketStatus(editorWS2);
        const data = useSyncExternalStore2(
          toolbarStore.subscribe,
          toolbarStore.getSnapshot
        );
        if (socketStatus.kind === "reconnecting") {
          /* @__PURE__ */ import_react7.default.createElement(
            "div",
            {
              onMouseDown: onToolbarDown,
              className: `toolbar connecting ${data.state === "hidden" ? "hidden" : ""} ${isDragging ? "dragging" : ""}`,
              ref: toolbarRef,
              style: dragStyles,
              onDoubleClick: () => {
                toolbarStore.setData({
                  state: "hidden"
                });
              }
            },
            /* @__PURE__ */ import_react7.default.createElement(
              "svg",
              {
                className: "animate-spin spinner",
                xmlns: "http://www.w3.org/2000/svg",
                fill: "none",
                viewBox: "0 0 24 24"
              },
              /* @__PURE__ */ import_react7.default.createElement(
                "circle",
                {
                  style: { opacity: 0.25 },
                  cx: "12",
                  cy: "12",
                  r: "10",
                  stroke: "currentColor",
                  strokeWidth: "4"
                }
              ),
              /* @__PURE__ */ import_react7.default.createElement(
                "path",
                {
                  style: { opacity: 0.75 },
                  fill: "currentColor",
                  d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                }
              )
            ),
            "Re-connecting..."
          );
        }
        if (socketStatus.kind === "error" && socketStatus.message !== "no-extension-servers-listening") {
          return /* @__PURE__ */ import_react7.default.createElement(
            "div",
            {
              className: `toolbar error ${isDragging ? "dragging" : ""}`,
              style: dragStyles,
              onMouseDown: onToolbarDown,
              ref: toolbarRef
            },
            /* @__PURE__ */ import_react7.default.createElement(
              "div",
              {
                style: {
                  position: "relative",
                  display: "flex",
                  alignItems: "center"
                }
              },
              /* @__PURE__ */ import_react7.default.createElement(
                "div",
                {
                  style: { position: "absolute" },
                  className: "animate-ping error-circle"
                }
              ),
              /* @__PURE__ */ import_react7.default.createElement("div", { className: "error-circle" })
            ),
            /* @__PURE__ */ import_react7.default.createElement("div", { className: "div" }),
            " ",
            /* @__PURE__ */ import_react7.default.createElement(
              "div",
              {
                onDoubleClick: () => {
                  toolbarStore.setData({
                    state: "hidden"
                  });
                }
              },
              "Could not find dev server"
            )
          );
        }
        if (socketStatus.kind === "connecting") {
          return /* @__PURE__ */ import_react7.default.createElement(
            "div",
            {
              onMouseDown: onToolbarDown,
              className: `toolbar connecting ${data.state === "hidden" ? "hidden" : ""} ${isDragging ? "dragging" : ""}`,
              ref: toolbarRef,
              style: dragStyles,
              onDoubleClick: () => {
                toolbarStore.setData({
                  state: "hidden"
                });
              }
            },
            /* @__PURE__ */ import_react7.default.createElement(
              "svg",
              {
                className: "animate-spin spinner",
                xmlns: "http://www.w3.org/2000/svg",
                fill: "none",
                viewBox: "0 0 24 24"
              },
              /* @__PURE__ */ import_react7.default.createElement(
                "circle",
                {
                  style: { opacity: 0.25 },
                  cx: "12",
                  cy: "12",
                  r: "10",
                  stroke: "currentColor",
                  strokeWidth: "4"
                }
              ),
              /* @__PURE__ */ import_react7.default.createElement(
                "path",
                {
                  style: { opacity: 0.75 },
                  fill: "currentColor",
                  d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                }
              )
            ),
            "Connecting..."
          );
        }
        return children;
      };
      AppContext = (0, import_react7.createContext)(null);
      App = () => {
        const [isDragging, setIsDragging] = (0, import_react7.useState)(false);
        const [survey, setSurvey] = (0, import_react7.useState)([]);
        const [position, setPosition] = (0, import_react7.useState)(() => {
          const storedPosition = localStorage.getItem("MILLION_TOOLBAR_POSITION");
          if (storedPosition) {
            try {
              return JSON.parse(storedPosition);
            } catch (e4) {
            }
          }
          return _null;
        });
        const ref = (0, import_react7.useRef)(null);
        const prevItems = (0, import_react7.useRef)(0);
        const data = useSyncExternalStore2(
          toolbarStore.subscribe,
          toolbarStore.getSnapshot
        );
        const editorWS2 = useDeferredValue(
          useSyncExternalStore2(
            (listener) => extensionStore.subscribe("ws", listener),
            () => extensionStore.get("ws")
          )
        );
        const dragStartPosition = (0, import_react7.useRef)({ x: 0, y: 0 });
        const isMouseDownOnToolbar = (0, import_react7.useRef)(false);
        const dragStyles = {
          left: isDragging ? 0 : position?.x,
          top: isDragging ? 0 : position?.y,
          bottom: position ? void 0 : 15,
          right: position ? void 0 : 15,
          transform: isDragging ? `translate(${position?.x || 0}px, ${position?.y || 0}px) scale(0.75)` : void 0
        };
        const onMouseDown = (0, import_react7.useCallback)(
          (event) => {
            if (ref.current && ref.current.contains(event.target)) {
              isMouseDownOnToolbar.current = true;
              dragStartPosition.current = { x: event.clientX, y: event.clientY };
              if (!data.prevUserSelect) {
                data.prevUserSelect = document.body.style.userSelect || "auto";
              }
              document.body.style.userSelect = "none";
            }
          },
          [data]
        );
        const onMouseMove = (0, import_react7.useCallback)(
          (event) => {
            if (!isMouseDownOnToolbar.current || event.buttons !== 1)
              return;
            const deltaX = event.clientX - dragStartPosition.current.x;
            const deltaY = event.clientY - dragStartPosition.current.y;
            if (!isDragging && (Math.abs(deltaX) > 5 || Math.abs(deltaY) > 5)) {
              setIsDragging(true);
            }
            if (isDragging && ref.current) {
              setPosition({
                x: event.clientX - ref.current.clientWidth / 2,
                y: event.clientY - ref.current.clientHeight / 2
              });
            }
          },
          [isDragging]
        );
        const snap = (0, import_react7.useCallback)((targetPosition) => {
          const padding = 15;
          const toolbarWidth = ref.current?.clientWidth || 0;
          const toolbarHeight = ref.current?.clientHeight || 0;
          const viewportWidth = window.innerWidth;
          const viewportHeight = window.innerHeight;
          const distToTop = targetPosition.y;
          const distToBottom = viewportHeight - (targetPosition.y + toolbarHeight);
          const minDist = Math.min(distToTop, distToBottom);
          let newX, newY;
          if (minDist === distToTop) {
            newX = Math.max(
              padding,
              Math.min(targetPosition.x, viewportWidth - toolbarWidth - padding)
            );
            newY = padding;
          } else {
            newX = Math.max(
              padding,
              Math.min(targetPosition.x, viewportWidth - toolbarWidth - padding)
            );
            newY = viewportHeight - toolbarHeight - padding;
          }
          const adjustedPosition = { x: newX, y: newY };
          ref.current?.animate(
            [
              {
                transform: `translate(${targetPosition.x}px, ${targetPosition.y}px) scale(0.9)`
              },
              { transform: `translate(${newX}px, ${newY}px) scale(1)` }
            ],
            {
              duration: 200,
              easing: "ease-in-out"
            }
          );
          return adjustedPosition;
        }, []);
        const onMouseUp = (0, import_react7.useCallback)(() => {
          if (!position)
            return;
          if (data.prevUserSelect) {
            document.body.style.userSelect = data.prevUserSelect;
            data.prevUserSelect = void 0;
          }
          if (isDragging) {
            const adjustedPosition = snap(position);
            setTimeout(() => {
              localStorage.setItem(
                "MILLION_TOOLBAR_POSITION",
                JSON.stringify(adjustedPosition)
              );
              if (adjustedPosition.x !== position.x || adjustedPosition.y !== position.y) {
                setPosition(adjustedPosition);
              }
              setIsDragging(false);
            }, 200 + 16);
          }
          isMouseDownOnToolbar.current = false;
        }, [isDragging, position, data.prevUserSelect, snap]);
        const onWindowResize = (0, import_react7.useCallback)(() => {
          if (!position || !ref.current)
            return;
          const { innerWidth, innerHeight } = window;
          const { width, height } = ref.current.getBoundingClientRect();
          const newX = position.x / (innerWidth - width) * (innerWidth - width);
          const newY = position.y / (innerHeight - height) * (innerHeight - height);
          const newPosition = snap({ x: newX, y: newY });
          setPosition(newPosition);
          localStorage.setItem(
            "MILLION_TOOLBAR_POSITION",
            JSON.stringify(newPosition)
          );
        }, [position, snap]);
        (0, import_react7.useEffect)(() => {
          const rafOnMouseMove = (event) => {
            requestAnimationFrame(() => onMouseMove(event));
          };
          const rafOnMouseUp = () => {
            requestAnimationFrame(onMouseUp);
          };
          const rafOnWindowResize = () => {
            requestAnimationFrame(onWindowResize);
          };
          window.addEventListener("mousemove", rafOnMouseMove);
          window.addEventListener("mouseup", rafOnMouseUp);
          window.addEventListener("resize", rafOnWindowResize);
          return () => {
            window.removeEventListener("mousemove", rafOnMouseMove);
            window.removeEventListener("mouseup", rafOnMouseUp);
            window.removeEventListener("resize", rafOnWindowResize);
          };
        }, [isDragging, position, onMouseMove, onMouseUp, onWindowResize]);
        let { items } = toolbarStore.data;
        const dirty = prevItems.current !== items;
        if (dirty) {
          prevItems.current = items;
        }
        let maxScore = Score.Unknown;
        let instances = 1;
        if (componentMetadata.has(data.selector)) {
          const { i: i4 } = componentMetadata.get(data.selector);
          instances = i4[i4.length - 1] || 1;
        }
        if (data.selector && items) {
          let count = 0;
          for (let i4 = 0, len = toolbarStore.batch.length; i4 < len; i4++) {
            const item = toolbarStore.batch[i4];
            if (item.k === data.selector) {
              count += item.r.c;
              const score = getCWV(toolbarStore.events[item.r.x]);
              if (maxScore == _null || score.severity > maxScore.severity) {
                maxScore = score;
              }
            }
          }
          items = Math.ceil(count / instances);
        }
        return /* @__PURE__ */ import_react7.default.createElement("div", { "data-react-scan-ignore": true }, /* @__PURE__ */ import_react7.default.createElement(
          SurveyContext.Provider,
          {
            value: {
              survey,
              setSurvey
            }
          },
          /* @__PURE__ */ import_react7.default.createElement(
            AppContext.Provider,
            {
              value: {
                dragStyles,
                isDragging,
                onToolbarDown: onMouseDown,
                toolbarRef: ref,
                editorWS: editorWS2
              }
            },
            /* @__PURE__ */ import_react7.default.createElement(WithWebsocketStatus, null, /* @__PURE__ */ import_react7.default.createElement(WithIngestError, null, /* @__PURE__ */ import_react7.default.createElement(
              "div",
              {
                className: `toolbar data ${dirty ? "ping-once" : ""} ${isDragging ? "dragging" : ""}`,
                ref,
                style: {
                  backgroundColor: maxScore.backgroundColor,
                  ...dragStyles
                },
                onMouseDown
              },
              /* @__PURE__ */ import_react7.default.createElement(
                "svg",
                {
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "16",
                  height: "16",
                  fill: "none",
                  className: "w-5",
                  viewBox: "0 0 46 32",
                  style: {
                    marginRight: 7.5
                  }
                },
                /* @__PURE__ */ import_react7.default.createElement(
                  "path",
                  {
                    fill: "currentColor",
                    fillRule: "evenodd",
                    d: "M11.428 27c2.07-2.968 6.285-5 11.147-5s9.076 2.032 11.147 5c-2.071 2.968-6.285 5-11.147 5s-9.076-2.032-11.147-5z",
                    clipRule: "evenodd"
                  }
                ),
                /* @__PURE__ */ import_react7.default.createElement(
                  "path",
                  {
                    fill: "currentColor",
                    d: "M11.352 4.947C13.422 2.01 17.632 0 22.492 0c4.858 0 9.07 2.01 11.14 4.947-2.07 2.936-6.282 4.947-11.14 4.947-4.86 0-9.07-2.01-11.14-4.947z"
                  }
                ),
                /* @__PURE__ */ import_react7.default.createElement(
                  "path",
                  {
                    fill: "currentColor",
                    d: "M22.706 16.059c-3.011 2.912-7.095 4.548-11.353 4.548S3.01 18.97 0 16.059L11.353 4.947 22.706 16.06z"
                  }
                ),
                /* @__PURE__ */ import_react7.default.createElement(
                  "path",
                  {
                    fill: "currentColor",
                    d: "M45.012 16.064c-3.01 2.912-7.095 4.548-11.352 4.548-4.259 0-8.342-1.636-11.353-4.548L33.66 4.947l11.352 11.117z"
                  }
                )
              ),
              /* @__PURE__ */ import_react7.default.createElement(fps_stats_default, { graphHeight: 9 }),
              /* @__PURE__ */ import_react7.default.createElement(
                "div",
                {
                  className: "div",
                  style: { marginLeft: 7.5, marginRight: 7.5 }
                }
              ),
              /* @__PURE__ */ import_react7.default.createElement(Scan, { isDragging }),
              /* @__PURE__ */ import_react7.default.createElement(Select, { isDragging }),
              survey.length > 0 && /* @__PURE__ */ import_react7.default.createElement(import_react7.default.Fragment, null, /* @__PURE__ */ import_react7.default.createElement("div", { className: "div" }), /* @__PURE__ */ import_react7.default.createElement(PostHogProvider, { client: Qn }, /* @__PURE__ */ import_react7.default.createElement(Feedback, { isDragging })))
            )))
          )
        ));
      };
      render = async (node) => {
        const elementName = "million-dev-toolbar";
        const root = document.createElement(elementName);
        root.classList.add("rr-ignore");
        root.attachShadow({ mode: "open" });
        const style = document.createElement("style");
        style.innerHTML = `
  .toolbar {
    position: fixed;
    z-index: 2147483647;
    opacity: 0;
    display: flex;
    height: 26px;
    justify-content: center;
    align-items: center;
    gap: 3px;
    border-radius: 50px;
    padding: 4px 12px;
    background-color: #111;
    color: #fff;
    font-size: 12px;
    font-variant-numeric: tabular-nums;
    transition: opacity 0.2s ease-in-out, transform 0s ease-in;
    border: 1px solid #ffffff2e;
    box-shadow: rgba(0, 0, 0, 0.25) 0px 8px 30px 0px;
    cursor: grab;
    white-space: nowrap;
  }

  .dragging {
    cursor: grabbing;
    opacity: 0.5 !important;
  }

  .hidden {
    pointer-events: none;
    opacity: 0;
  }

  .spinner {
    height: 0.85rem;
    width: 0.85rem;
    color: white;
  }

  .error {
    background: #440c13;
    animation: none;
    color: #ff575e;
    opacity: 1;
    align-items: center;
    gap: 6px;
    border: 1px solid #ff575e2e;
  }

  .error a {
    color: #ff575e;
    font-weight: bold;
    text-decoration: underline dotted;
  }

  .error a:hover {
    text-decoration: underline;
  }

  .error .div {
    height: 100%;
    width: 1px;
    background-color: #ff575e2e;
  }

  .toolbar .div {
    height: 100%;
    width: 1px;
    background-color: #ffffff2e;
  }

  .connecting {
    display: flex;
    gap: 6px;
    font-weight: normal;
    animation: pulse 2s cubic-bezier(.4,0,.6,1) infinite;
  }

  .util-button {
    transition: font-size 0.2s ease-in-out, border-color 0.2s ease-in-out, color 0.2s ease-in-out;
    font-size: 12px;
  }

  .opacity-hover {
    opacity: 0.75;
    transition: opacity 0.2s ease-in-out;
  }

  .opacity-hover:hover {
    opacity: 1;
  }

  .pulse {
    animation: pulse 2s cubic-bezier(.4,0,.6,1) infinite;
  }

  .data {
    opacity: 1;
  }

  .error-circle {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #ff575e;
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: .5;
    }
  }

  @keyframes ping {
    75%, 100% {
      transform: scale(1.1);
      opacity: 0;
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .animate-ping {
    animation: ping 3s cubic-bezier(0, 0, 0.2, 1) infinite;
  }

  @keyframes ping {
    75% {
      transform: scale(1);
      opacity: 1;
    }
    100% {
      transform: scale(1.5);
      opacity: 0;
    }
  }

  .ping-once {
    animation: subtle-ping 0.3s ease-in-out;
  }

  @keyframes subtle-ping {
    10% {
      filter: brightness(3);
    }
    100% {
      filter: brightness(1);
    }
  }
  `;
        const shadowRoot = root.shadowRoot;
        shadowRoot.appendChild(style);
        shadowRoot._ANYA_DEV_ = true;
        const prevMountedElement = document.querySelector(elementName);
        if (prevMountedElement) {
          prevMountedElement.replaceWith(root);
        } else {
          document.body.appendChild(root);
        }
        toolbarStore.setData({
          root: root.shadowRoot
        });
        const createRootRender = () => {
          void Promise.resolve().then(() => __toESM(require_client())).then((ReactDOMClient) => {
            ReactDOMClient.createRoot(shadowRoot).render(node);
          });
        };
        const majorVersion = Number(import_react7.default.version.split(".")[0]);
        try {
          if (majorVersion >= 18 && true) {
            createRootRender();
            return;
          }
        } catch (_e2) {
        }
        const deprecatedRender = () => {
          void Promise.resolve().then(() => __toESM(require_react_dom())).then((ReactDOM) => {
            const div = document.createElement("div");
            shadowRoot.appendChild(div);
            ReactDOM.render(node, div);
          });
        };
        deprecatedRender();
      };
      try {
        void (async () => {
          await render(/* @__PURE__ */ import_react7.default.createElement(App, null));
        })();
      } catch (_3) {
      }
    }
  });

  // runtime/src/core/index.ts
  function devInvariant(value2, message, prodMessage) {
    {
      if (value2) {
        return;
      }
      {
        throw new Error(message);
      }
    }
  }
  var React9, editorWS, onCommitFiberRoot, dispatcherRefs, DEVTOOLS_HOOK, controlDispatcherRef, createRuntimeTreeCommit, unmountedSet, syncDispatcherRefs, renderItemKeyCache, componentMetadata, batch, currentOwner, currentTriggers, getCurrentTrigger, pushTrigger, inited, session, url2, apiKey, buildId, commitHash, onRender, errors, events, eventIndex, pendingRequests, compilerInstanceId, fiberComponentMap, dirtyNodes, currentRoot, recordingFiberTree, getMetadata, UNSTABLE_TYPES, getChange, captureDeps, captureProps, captureValue, captureFunction, unsafeElements, REACT_MAJOR_VERSION, MillionProfilerRaw, MillionProfiler, captureJSX, captureHook, trackOwner, componentIds, captureBaseline, hijackReactCurrentDispatcher, didSyncDispatcherRefs; exports.$$ = void 0; exports.useCapture = void 0; exports.useCount = void 0; exports.useCallbackExperiment = void 0; exports.useMemoExperiment = void 0; exports.memoExperiment = void 0; var mergeChange, reportRender, flush, metadata, debouncedFlush; exports.reset = void 0; exports.registerMetadata = void 0; var getFullTreeUpdates, wsCallbackUnsubscribe, treeInterval; exports.init = void 0;
  var init_core = __esm({
    "runtime/src/core/index.ts"() {
      init_devtools();
      React9 = __toESM(require_react());
      init_session();
      init_transport();
      init_constants();
      init_react_internals();
      init_utils();
      init_is_equal();
      init_react_internals();
      editorWS = _null;
      onCommitFiberRoot = NO_OP;
      dispatcherRefs = new _Set();
      DEVTOOLS_HOOK = "__REACT_DEVTOOLS_GLOBAL_HOOK__";
      controlDispatcherRef = (currentDispatcherRef) => {
        let ref = currentDispatcherRef;
        if (ref && !_setHas.call(dispatcherRefs, ref)) {
          let propName = REACT_MAJOR_VERSION > 18 ? "H" : "current";
          let currentDispatcher = ref[propName];
          let seenDispatchers = new _Set();
          _Object.defineProperty(ref, propName, {
            get: () => currentDispatcher,
            set(current) {
              currentDispatcher = current;
              if (!current || _setHas.call(seenDispatchers, current) || current.useRef === current.useImperativeHandle || /warnInvalidContextAccess\(\)/.test(current.readContext.toString()))
                return;
              _setAdd.call(seenDispatchers, current);
              let isInComponent = peekIsInComponent(current);
              if (isInComponent) {
                currentDispatcher = hijackReactCurrentDispatcher(current);
              }
            }
          });
          _setAdd.call(dispatcherRefs, ref);
        }
      };
      createRuntimeTreeCommit = (currentTree, _dirtyNodes, queuedDeletes) => {
        {
          if (!currentTree) {
            return "no-tree";
          }
          let [updates, fibersUpdated] = computeDirtyComponentTrees(
            _dirtyNodes,
            fiberComponentMap,
            currentTree
          );
          let nodesUpdated = fibersUpdated.filter(Boolean).map((fiber) => fiberComponentMap.get(fiber)?.renderId).filter((x3) => typeof x3 !== "undefined");
          if (editorWS) {
            _dirtyNodes.length = 0;
            onIdle(() => {
              editorWS?.send(
                JSON.stringify({
                  kind: "runtime-tree-updates",
                  events: [
                    ...updates,
                    // needed in the case an untracked component unmounts tracked fibers
                    ...queuedDeletes.length ? [
                      {
                        kind: "delete",
                        ids: queuedDeletes
                      }
                    ] : []
                  ],
                  nodesUpdated
                })
              );
            });
          }
          return updates;
        }
      };
      unmountedSet = /* @__PURE__ */ new Set();
      syncDispatcherRefs = (devtools) => {
        if (!devtools)
          return;
        if (!devtools.renderers.size) {
          let dispatcher = getDispatcherRef();
          if (!dispatcher)
            return;
          controlDispatcherRef(dispatcher);
        }
        for (let renderer of devtools.renderers.values()) {
          controlDispatcherRef(renderer.currentDispatcherRef);
        }
      };
      try {
        if (!SIGKILL && !isSSR && _objectHasOwnProperty.call(_window, DEVTOOLS_HOOK)) {
          let devtools = _window[DEVTOOLS_HOOK];
          if (devtools) {
            let existingOFCR = devtools.onCommitFiberRoot;
            devtools.onCommitFiberRoot = (rendererID, root) => {
              if (existingOFCR)
                existingOFCR(rendererID, root);
              onCommitFiberRoot(root);
            };
            devtools.onPostCommitFiberRoot = () => {
              if (true) {
                if (!recordingFiberTree) {
                  return;
                }
                if (!dirtyNodes.length && !unmountedSet.size) {
                  return;
                }
                if (!currentRoot.current) {
                  return;
                }
                createRuntimeTreeCommit(
                  currentRoot.current,
                  dirtyNodes,
                  Array.from(unmountedSet.values()).map((fiber) => fiberComponentMap.get(fiber)?.renderId).filter((x3) => typeof x3 !== "undefined")
                );
                unmountedSet.clear();
              }
            };
          }
        }
      } catch (err) {
        {
          console.error("Failed to inject __REACT_DEVTOOLS_GLOBAL_HOOK_: %s", err);
        }
      }
      renderItemKeyCache = new _Map();
      componentMetadata = new _Map();
      batch = [];
      currentOwner = _null;
      currentTriggers = new _WeakMap();
      getCurrentTrigger = (fiber) => {
        let foundFiber = traverseFiber(
          fiber,
          true,
          (f3) => _weakMapHas.call(currentTriggers, f3.elementType)
        );
        return foundFiber ? _weakMapGet.call(currentTriggers, foundFiber.elementType) : _null;
      };
      pushTrigger = (fiber, owner) => {
        let data = getMetadata(owner.k);
        let triggerData = _weakMapGet.call(currentTriggers, fiber.elementType);
        if (!triggerData) {
          triggerData = { a: [], h: _null, c: new _Set() };
          _weakMapSet.call(currentTriggers, fiber.elementType, triggerData);
        }
        if (data && !data.v) {
          triggerData.h = owner;
        }
        let cacheKey = owner.k + "." + owner.l;
        if (_setHas.call(triggerData.c, cacheKey))
          return;
        _setAdd.call(triggerData.c, cacheKey);
        triggerData.a.push(owner);
      };
      inited = false;
      session = getSession();
      url2 = _null;
      onRender = _null;
      errors = [];
      events = [];
      eventIndex = -1;
      pendingRequests = 0;
      fiberComponentMap = new _WeakMap() ;
      dirtyNodes = [];
      currentRoot = { current: _null };
      recordingFiberTree = false;
      getMetadata = (key) => {
        return _mapGet.call(componentMetadata, key);
      };
      UNSTABLE_TYPES = ["object", "function"];
      getChange = (prevValue, nextValue, shallow) => {
        if (shallow) {
          if (_Object.is(prevValue, nextValue))
            return _null;
        }
        let type;
        let isJSX = React9.isValidElement(nextValue);
        if (!shallow || isJSX) {
          if (isEqual(prevValue, nextValue, false))
            return _null;
        }
        if (isJSX && typeof nextValue.type === "string")
          type = "jsx";
        let isDispatcher = typeof prevValue === "function" && prevValue[FLAG];
        if (isDispatcher)
          return _null;
        let prev2 = serialize(prevValue);
        let next = serialize(nextValue);
        let stringEq = prev2 === next;
        type = nextValue ? typeof nextValue : typeof prevValue;
        let unstable = stringEq && UNSTABLE_TYPES.includes(type);
        return {
          // unstable
          u: unstable,
          // type
          t: type,
          // count
          c: 1,
          // index: (if it's a change of the deps array, this will be the index of the dep)
          i: _null,
          // name: used to help identify the change
          // prop change postfixes this with the name of the prop
          n: stringEq ? prev2 : prev2 + "~" + next,
          d: _null
        };
      };
      captureDeps = (key, deps, instancesIndex, loc, locs, index, cache2) => {
        if (!_isArray(deps))
          return deps;
        let fiber = useFiber();
        let owner = getOwner(fiber);
        let prev2 = cache2 && cache2[index] || _null;
        let changes = [];
        if (prev2) {
          for (let i4 = 0, len = deps.length; i4 < len; i4++) {
            let prevDepValue = prev2[i4];
            let nextDepValue = deps[i4];
            let change = getChange(prevDepValue, nextDepValue, true);
            if (!change)
              continue;
            change.n = i4 + "";
            change.i = i4;
            change.d = canStabilize(prevDepValue, nextDepValue, change);
            changes.push(change);
          }
        }
        if (!prev2 || changes.length) {
          reportRender(
            key,
            1 /* Deps */,
            loc,
            _null,
            locs,
            0,
            0,
            -1,
            1,
            _null,
            owner,
            _null,
            instancesIndex,
            changes
          );
        }
        if (cache2)
          cache2[index] = deps;
        return deps;
      };
      captureProps = (key, props, instancesIndex, loc, index, noisy, cache2) => {
        if (typeof props !== "object")
          return props;
        let fiber = useFiber();
        let owner = getOwner(fiber);
        let memoizedProps = fiber && fiber.memoizedProps || _null;
        let prevMemoizedProps = fiber && fiber.alternate && fiber.alternate.memoizedProps || _null;
        if (memoizedProps && !props)
          props = memoizedProps;
        let prevProps = cache2 ? cache2[index] : prevMemoizedProps;
        React9.useEffect(() => {
          if (didFiberRender(fiber) && !noisy) {
            let changes = [];
            if (prevProps) {
              for (let name in props) {
                if (name === "children")
                  continue;
                let prevProp = prevProps[name];
                let nextProp = props[name];
                let change = getChange(prevProp, nextProp, true);
                if (!change)
                  continue;
                change.n = name;
                changes.push(change);
              }
            }
            if (!prevProps || changes.length) {
              reportRender(
                key,
                2 /* Props */,
                loc,
                _null,
                _null,
                0,
                0,
                -1,
                1,
                _null,
                owner,
                _null,
                instancesIndex,
                changes
              );
            }
            if (cache2)
              cache2[index] = props;
          }
        });
        return props;
      };
      captureValue = (key, value2, instancesIndex, loc, locs, index, noisy, cache2) => {
        let fiber = useFiber();
        let targetValue = value2;
        if (fiber && typeof value2 === "object" && value2 && value2.current) {
          targetValue = value2.current;
        }
        let owner = getOwner(fiber);
        if (_isArray(value2) && value2.length === 2 && typeof value2[1] === "function") {
          let dispatch = value2[1];
          let hijackedDispatcher = function(nextValue) {
            let prevValue2 = cache2 ? cache2[index][0] : value2[0];
            dispatch(nextValue);
            if (!dispatch[FLAG] && fiber) {
              pushTrigger(fiber, {
                p: currentOwner,
                k: key,
                l: loc
              });
            }
            let change = getChange(prevValue2, nextValue, false);
            if (!change)
              return;
            reportRender(
              key,
              4 /* Value */,
              loc,
              _null,
              _null,
              0,
              0,
              -1,
              1,
              _null,
              owner,
              _null,
              instancesIndex,
              [change]
            );
          };
          hijackedDispatcher[FLAG] = true;
          if (cache2) {
            let prevValue2 = cache2[index];
            if (prevValue2) {
              prevValue2[0] = value2[0];
              value2[1] = prevValue2[1];
            } else {
              cache2[index] = [value2[0], hijackedDispatcher];
              value2[1] = hijackedDispatcher;
            }
          }
          return value2;
        }
        if (noisy)
          return value2;
        let prevValue = cache2 && cache2[index] || _null;
        if (cache2)
          cache2[index] = targetValue;
        if (prevValue) {
          let changes = [];
          if (typeof targetValue === "object" && locs) {
            if (_isArray(targetValue)) {
              for (let i4 = 0, len = targetValue.length; i4 < len; i4++) {
                let change = getChange(prevValue[i4], targetValue[i4], false);
                if (!change)
                  continue;
                change.n = `${i4}`;
                change.i = i4;
                changes.push(change);
              }
            } else {
              for (let prop in targetValue) {
                let change = getChange(prevValue[prop], targetValue[prop], false);
                if (!change)
                  continue;
                change.n = prop;
                changes.push(change);
              }
            }
          } else {
            let change = getChange(prevValue, targetValue, false);
            if (!change)
              return value2;
            changes.push(change);
          }
          reportRender(
            key,
            4 /* Value */,
            loc,
            _null,
            locs,
            0,
            0,
            -1,
            locs ? 0 : 1,
            _null,
            owner,
            _null,
            instancesIndex,
            changes
          );
        }
        return value2;
      };
      captureFunction = (key, fn2, instancesIndex, loc) => {
        if (typeof fn2 !== "function" || FLAG in fn2)
          return fn2;
        let capturedFn = function() {
          let startTime = _performance.now();
          try {
            let maybeSyntheticEvent = arguments[0];
            let ret = fn2.apply(this, arguments);
            let time = _performance.now() - startTime;
            let event = null;
            if (maybeSyntheticEvent && typeof maybeSyntheticEvent === "object" && maybeSyntheticEvent.nativeEvent instanceof Event) {
              let k3 = key + "." + loc;
              event = {
                n: maybeSyntheticEvent.type,
                t: time,
                d: Date.now(),
                k: k3,
                a: _null
              };
              if (events[eventIndex] && events[eventIndex].n === maybeSyntheticEvent.type && Date.now() - events[eventIndex].d < 16) {
                events[eventIndex] = event;
              } else {
                eventIndex = events.length;
                events.push(event);
              }
            }
            doubleRAF(() => {
              let layoutTime = _performance.now() - startTime;
              if (event)
                event.t = layoutTime;
              reportRender(
                key,
                128 /* Function */,
                loc,
                null,
                _null,
                time,
                layoutTime,
                -1,
                1,
                null,
                null,
                null,
                instancesIndex,
                []
              );
            });
            return ret;
          } catch (error) {
            reportRender(
              key,
              256 /* Error */,
              loc,
              null,
              _null,
              0,
              0,
              -1,
              1,
              null,
              null,
              error.message.trim(),
              instancesIndex,
              []
            );
            throw error;
          }
        };
        capturedFn[FLAG] = true;
        return capturedFn;
      };
      unsafeElements = new _WeakMap();
      REACT_MAJOR_VERSION = +React9.version.split(".")[0];
      MillionProfilerRaw = (_props, forwardedRef) => {
        let { children, _k, _l, _i: _i2, _l2, ...parentProps } = _props;
        let parentRef = REACT_MAJOR_VERSION > 18 ? _props.ref : forwardedRef;
        let prevRef = React9.useRef();
        let prev2 = prevRef.current;
        let childProps = children.props;
        let childrenRef = getElementRef(children);
        let isChildrenForwardRef = typeof children.type === "object" && "$$typeof" in children.type && String(children.type.$$typeof) === FORWARD_REF_SYMBOL_STRING;
        let changes = [];
        for (let name in childProps) {
          if (name === "children")
            continue;
          let prevProp = prev2 && prev2[name] || _null;
          let nextProp = childProps[name];
          let change = getChange(prevProp, nextProp, true);
          if (!change)
            continue;
          change.n = name;
          change.d = canStabilize(prevProp, nextProp, change);
          changes.push(change);
        }
        let element = (
          /**
           * Condition 1: if parentProps exists, that means the parent to the profiler is a Slot (cloneElement Profiler passes new props down)
           *   with Slot: cloneElement(Profiler, {...ParentProps})
           *   without Slot: createElement(Profiler, {...})
           *
           * Condition 2: if a forwardRef is passed, then we need to forward that to the child
           *   before: Parent -(ref)-> ForwardRef(Child)
           *   after: Parent -(ref)-> Profiler -(!!!)> ForwardRef(Child)
           *   fixed: Parent -(ref)-> ForwardRef(Profiler) -(ref)-> ForwardRef(Child)
           *
           * @see https://github.com/radix-ui/primitives/blob/main/packages/react/slot/src/Slot.tsx
           */
          Object.keys(parentProps).length || parentRef ? (
            // https://x.com/aidenybai/status/1818774190717387121
            React9.cloneElement(
              children,
              _Object.assign(mergeProps(parentProps, childProps), {
                ref: (
                  // We only pass a composed ref if the child is a forwardRef and the parent
                  // passed down a forwardRef. Else, we default to the children's ref (may be undefined)
                  isChildrenForwardRef && parentRef ? (ref) => {
                    setRef(parentRef, ref);
                    setRef(childrenRef, ref);
                  } : childrenRef
                )
              })
            )
          ) : children
        );
        if (element && element.key) {
          changes.push({
            u: false,
            t: typeof element.key,
            c: 1,
            i: _null,
            n: "key~" + element.key,
            d: _null
          });
        }
        let fiber = useFiber();
        React9.useEffect(() => {
          if (!fiber || SIGKILL || !didFiberRender(fiber))
            return;
          if (fiber.type === MillionProfiler) {
            fiber = fiber.child;
          }
          let {
            s: s3,
            t: t4,
            $: $2
            /* memoScore */
          } = getTimings(fiber);
          let reference = fiber && fiber.type || _null;
          let self2 = _null;
          let owner = _null;
          let data = getMetadata(_k);
          if (data && data.v) {
            self2 = reference && reference[FLAG];
            owner = getOwner(fiber);
          }
          let isFiberMounted = fiber && (!fiber.alternate || (fiber.flags & (2 | 4096)) !== 0) || !fiber || !prev2;
          reportRender(
            _k,
            isFiberMounted ? 32 /* JSXMount */ : 64 /* JSXUpdate */,
            _l,
            _l2,
            _null,
            s3,
            t4,
            $2,
            1,
            self2,
            owner,
            _null,
            _i2,
            changes
          );
          prevRef.current = childProps;
        });
        return element;
      };
      MillionProfiler = REACT_MAJOR_VERSION > 18 ? MillionProfilerRaw : React9.forwardRef(MillionProfilerRaw);
      MillionProfiler.displayName = PROFILER_DISPLAY_NAME;
      captureJSX = (key, element, instancesIndex, loc, secondaryLoc) => {
        if (_weakMapGet.call(unsafeElements, element) || [MillionProfiler, exports.MillionLintProvider].includes(element.type) || // ignore non-function styled components, since we assume their render isn't expensive
        typeof element.type === "object" && element.type && element.type.componentStyle && typeof element.type.target === "string") {
          return element;
        }
        if (isElementUnsafeToCapture(element)) {
          _weakMapSet.call(unsafeElements, element, true);
          return element;
        }
        return React9.createElement(MillionProfiler, {
          key: element.key || void 0,
          children: element,
          /**
           * key
           */
          _k: key,
          /**
           * instancesIndex
           */
          _i: instancesIndex,
          /**
           * loc
           */
          _l: loc,
          /**
           * secondaryLoc
           */
          _l2: secondaryLoc
        });
      };
      captureHook = (key, hook, instancesIndex, loc) => {
        if (typeof hook === "function") {
          let self2 = hook[FLAG];
          reportRender(
            key,
            1024 /* Hooks */,
            loc,
            _null,
            _null,
            0,
            0,
            -1,
            0,
            self2,
            _null,
            _null,
            instancesIndex,
            []
          );
        }
        return trackOwner(hook, key, loc);
      };
      trackOwner = (fn2, key, loc) => {
        return function() {
          let parentOwner = currentOwner;
          currentOwner = { p: parentOwner, k: key, l: loc };
          let ret = fn2.apply(this, arguments);
          currentOwner = parentOwner;
          return ret;
        };
      };
      componentIds = new _WeakMap() ;
      captureBaseline = (key, isInComponent, reference, data, loc) => {
        let noisy = false;
        let cache2 = [];
        if (reference && UNSTABLE_TYPES.includes(typeof reference) && !(FLAG in reference)) {
          reference[FLAG] = key;
        }
        if (isInComponent) {
          let cacheRef = React9.useRef([]);
          if (!cacheRef.current) {
            cacheRef.current = new _Array(data.c);
          }
          cache2 = cacheRef.current;
          let fiber = useFiber();
          if (fiber && data.v) {
            if (!(FLAG in fiber.type)) {
              fiber.type[FLAG] = key;
            }
            if (fiber.updateQueue && fiber.updateQueue.memoCache) {
              data.$ = true;
            }
          }
          {
            let ref = React9.useRef(_null);
            if (ref.current === _null) {
              ref.current = true;
              if (fiber) {
                let prevMemoizedState = _weakMapGet.call(componentIds, fiber);
                if (_weakMapHas.call(componentIds, fiber)) {
                  _weakMapSet.call(componentIds, fiber, fiber.memoizedState);
                } else if (fiber.memoizedState !== prevMemoizedState) {
                  _weakMapDelete.call(componentIds, fiber);
                  noisy = true;
                }
              }
            }
          }
          let renderId = useId();
          React9.useLayoutEffect(() => {
            if (!fiber) {
              return;
            }
            unmountedSet.delete(fiber);
            return () => {
              unmountedSet.add(fiber);
            };
          }, []);
          React9.useEffect(() => {
            let {
              s: s3,
              t: t4,
              $: $2
              /* memoScore */
            } = getTimings(fiber);
            let didRender = didFiberRender(fiber);
            {
              if (didRender && fiber && data.v && typeof fiber.type[FLAG] === "string") {
                if (recordingFiberTree) {
                  dirtyNodes.push(new WeakRef(fiber));
                }
                _weakMapSet.call(fiberComponentMap, fiber, {
                  selfTime: s3,
                  totalTime: t4,
                  renderId,
                  key: fiber.type[FLAG],
                  fiberComponentName: fiber.type.displayName || fiber.type.name || "",
                  hooks: []
                  // we technically don't need to define this on the client, but it's fine for now
                });
              }
            }
            if (didRender && !noisy) {
              reportRender(
                key,
                512 /* Baseline */,
                loc,
                _null,
                _null,
                data.v ? s3 : 0,
                data.v ? t4 : 0,
                data.v ? $2 : -1,
                1,
                _null,
                _null,
                _null,
                data.i.length - 1,
                []
              );
            }
          });
          let child = useNearestChild(fiber);
          let current = child && child.current;
          if (current && !(FLAG in current)) {
            current[FLAG] = key;
          }
          let scheduleInstanceUpdate = () => {
            doubleRAF(() => {
              if (data._i !== data.i[data.i.length - 1]) {
                data.i.push(data._i);
              }
            });
          };
          React9.useEffect(() => {
            noisy = false;
            data._i++;
            scheduleInstanceUpdate();
            return () => {
              data._i--;
              scheduleInstanceUpdate();
            };
          }, []);
        }
        return { n: noisy, c: cache2 };
      };
      hijackReactCurrentDispatcher = (dispatcher) => {
        let prevUseStateDispatcher = dispatcher.useState;
        dispatcher.useState = (initialState) => {
          let [value2, dispatch] = prevUseStateDispatcher(initialState);
          let trigger = currentOwner;
          let fiber = currentFiber;
          if (typeof dispatch[WRAPPER_FLAG] !== "function") {
            dispatch[WRAPPER_FLAG] = (newValue) => {
              if (fiber && trigger) {
                pushTrigger(fiber, trigger);
              }
              dispatch(newValue);
            };
          }
          return [value2, dispatch[WRAPPER_FLAG]];
        };
        let prevUseReducerDispatcher = dispatcher.useReducer;
        dispatcher.useReducer = (reducer, initialState, init2) => {
          let [value2, dispatch] = prevUseReducerDispatcher(
            reducer,
            initialState,
            init2
          );
          let trigger = currentOwner;
          let fiber = currentFiber;
          if (typeof dispatch[WRAPPER_FLAG] !== "function") {
            dispatch[WRAPPER_FLAG] = (newValue) => {
              if (fiber && trigger) {
                pushTrigger(fiber, trigger);
              }
              dispatch(newValue);
            };
          }
          return [value2, dispatch[WRAPPER_FLAG]];
        };
        let prevUseContextDispatcher = dispatcher.useContext;
        let prevContextStateMap = new _WeakMap();
        dispatcher.useContext = (context) => {
          let value2 = prevUseContextDispatcher(context);
          if (_weakMapHas.call(prevContextStateMap, context)) {
            let prevValue = _weakMapGet.call(prevContextStateMap, context);
            if (_Object.is(prevValue, value2))
              return value2;
            if (currentFiber && currentOwner) {
              pushTrigger(currentFiber, currentOwner);
            }
          }
          _weakMapSet.call(prevContextStateMap, context, value2);
          return value2;
        };
        if (REACT_MAJOR_VERSION > 17) {
          let prevUseSyncExternalStoreDispatcher = dispatcher.useSyncExternalStore;
          let prevSESStateMap = new _WeakMap();
          dispatcher.useSyncExternalStore = (subscribe, getSnapshot, getServerSnapshot) => {
            let value2 = prevUseSyncExternalStoreDispatcher(
              subscribe,
              getSnapshot,
              getServerSnapshot
            );
            if (_weakMapHas.call(prevSESStateMap, subscribe)) {
              let prevValue = _weakMapGet.call(prevSESStateMap, subscribe);
              if (_Object.is(prevValue, value2))
                return value2;
              if (currentFiber && currentOwner) {
                pushTrigger(currentFiber, currentOwner);
              }
            }
            _weakMapSet.call(prevSESStateMap, subscribe, value2);
            return value2;
          };
        }
        return dispatcher;
      };
      didSyncDispatcherRefs = false;
      exports.$$ = (value2, kind, key, loc, secondaryLoc, locs, index, mountInfo) => {
        if (isSSR || SIGKILL)
          return value2;
        let data = getMetadata(key);
        if (!data)
          return value2;
        let noisy = mountInfo && mountInfo.n || false;
        let cache2 = mountInfo && mountInfo.c || _null;
        let instancesIndex = data.i.length - 1;
        if (!didSyncDispatcherRefs) {
          syncDispatcherRefs(_window[DEVTOOLS_HOOK]);
          didSyncDispatcherRefs = true;
        }
        if (data.i.length === 1 && !data.i[0]) {
          data.i[0] = 1;
        }
        let isInComponent = peekIsInComponent(_null);
        if (isInComponent) {
          for (let dispatcherRef of dispatcherRefs) {
            if (dispatcherRef && !peekIsInComponent(
              dispatcherRef.H || dispatcherRef.current
            )) {
              isInComponent = false;
              break;
            }
          }
        }
        if (kind & 512 /* Baseline */) {
          return captureBaseline(key, isInComponent, value2, data, loc);
        } else if (isInComponent && kind & 2 /* Props */) {
          return captureProps(key, value2, instancesIndex, loc, index, noisy, cache2);
        } else if (isInComponent && kind & 4 /* Value */) {
          return captureValue(
            key,
            value2,
            instancesIndex,
            loc,
            locs,
            index,
            noisy,
            cache2
          );
        } else if (isInComponent && kind & 1 /* Deps */) {
          return captureDeps(key, value2, instancesIndex, loc, locs, index, cache2);
        } else if (kind & 16 /* JSX */) {
          return captureJSX(key, value2, instancesIndex, loc, secondaryLoc);
        } else if (kind & 128 /* Function */) {
          return captureFunction(key, value2, instancesIndex, loc);
        } else if (kind & 1024 /* Hooks */) {
          return captureHook(key, value2, instancesIndex, loc);
        } else if (kind & 2048 /* Note */) {
          reportRender(
            key,
            2048 /* Note */,
            loc,
            _null,
            _null,
            0,
            0,
            -1,
            1,
            _null,
            _null,
            value2,
            instancesIndex,
            []
          );
        }
        return value2;
      };
      exports.useCapture = (value2, key, loc, index, mountInfo) => {
        if (SIGKILL || !key || loc == _null || index == _null || mountInfo == _null) {
          return value2;
        }
        return exports.$$(
          value2,
          value2 && typeof value2 === "object" && "$$typeof" in value2 ? 16 /* JSX */ : 4 /* Value */,
          key,
          loc,
          _null,
          _null,
          index,
          mountInfo || _null
        );
      };
      exports.useCount = (message, key, loc, index, mountInfo) => {
        if (SIGKILL || !key || loc == _null || index == _null || message == _null || mountInfo == _null) {
          return message;
        }
        {
          console.count(message);
        }
        return exports.$$(
          message,
          2048 /* Note */,
          key,
          loc,
          _null,
          _null,
          index,
          mountInfo || _null
        );
      };
      exports.useCallbackExperiment = (callback, deps, shouldMemo) => {
        let memoizedCallback = React9.useCallback(callback, deps);
        return shouldMemo ? memoizedCallback : callback;
      };
      exports.useMemoExperiment = (factory, deps, shouldMemo) => {
        let memoizedValue = React9.useMemo(factory, deps);
        return shouldMemo ? memoizedValue : factory();
      };
      exports.memoExperiment = (Component2, propsAreEqual, shouldMemo) => {
        return shouldMemo ? React9.memo(Component2, propsAreEqual) : Component2;
      };
      mergeChange = (prev2, next) => {
        if (!prev2 && !next)
          return [];
        if (!prev2 || !prev2.length)
          return next;
        if (!next || !next.length)
          return prev2;
        let prevHead = 0;
        let nextHead = 0;
        let prevTail = prev2.length - 1;
        let nextTail = next.length - 1;
        while (prevHead <= prevTail && nextHead <= nextTail) {
          let prevHeadChange = prev2[prevHead];
          let nextHeadChange = next[nextHead];
          let prevTailChange = prev2[prevTail];
          let nextTailChange = next[nextTail];
          if (prevHeadChange.n === nextHeadChange.n) {
            prevHeadChange.c += nextHeadChange.c;
            prevHeadChange.u = nextHeadChange.u;
            prevHead++;
            nextHead++;
          } else if (prevTailChange.n === nextTailChange.n) {
            prevTailChange.c += nextTailChange.c;
            prevTailChange.u = nextTailChange.u;
            prevTail--;
            nextTail--;
          } else {
            break;
          }
        }
        let changeIndexLookup = new _Map();
        for (; prevHead <= prevTail; prevHead++) {
          _mapSet.call(changeIndexLookup, prev2[prevHead].n, prevHead);
        }
        for (; nextHead <= nextTail; nextHead++) {
          let nextChange = next[nextHead];
          let head = _mapGet.call(changeIndexLookup, nextChange.n);
          if (head == _null) {
            let index = prev2.push(nextChange);
            _mapSet.call(changeIndexLookup, nextChange.n, index - 1);
            continue;
          }
          let prevChange = prev2[head];
          prevChange.c += nextChange.c;
          prevChange.u = nextChange.u;
        }
        return prev2;
      };
      reportRender = (key, kind, loc, secondaryLoc, locs, selfTime, totalTime, memoScore, count, self2, owner, message, instancesIndex, changes) => {
        let triggerData = getCurrentTrigger(currentFiber);
        let triggerKeys = _null;
        let overrideTriggerKey = _null;
        if (triggerData) {
          let data = getMetadata(key);
          if (data && !data.v) {
            overrideTriggerKey = triggerData.h ? triggerData.h.k + "." + triggerData.h.l : _null;
          } else {
            let allTriggers = triggerData.a;
            for (let i4 = 0, len = allTriggers.length; i4 < len; i4++) {
              let trigger = allTriggers[i4];
              if (trigger.l) {
                if (!triggerKeys)
                  triggerKeys = [];
                triggerKeys.push(trigger.k + "." + trigger.l);
              }
            }
          }
        }
        if (overrideTriggerKey) {
          triggerKeys = // FIXME: slightly redundant
          triggerData && triggerData.h ? [overrideTriggerKey] : _null;
        }
        if (typeof self2 !== "string" && self2 !== null && self2 !== void 0) {
          return;
        }
        let render2 = {
          k: kind,
          l: loc,
          l2: secondaryLoc,
          ls: locs,
          s: selfTime,
          t: totalTime,
          $: memoScore,
          c: count,
          i: self2,
          o: owner,
          m: message,
          d: changes,
          x: eventIndex,
          n: instancesIndex,
          r: triggerKeys
        };
        let batchKey = getRenderItemCacheKey(
          key,
          kind,
          loc,
          owner,
          message,
          eventIndex,
          instancesIndex,
          triggerKeys && triggerKeys.join(".")
        );
        if (_mapHas.call(renderItemKeyCache, batchKey)) {
          let prevIndex = _mapGet.call(renderItemKeyCache, batchKey);
          let prevRender = batch[prevIndex].r;
          prevRender.c += count;
          prevRender.t += totalTime;
          prevRender.s += selfTime;
          prevRender.d = mergeChange(prevRender.d, changes);
          prevRender.$ = memoScore;
          return;
        }
        _mapSet.call(renderItemKeyCache, batchKey, batch.length);
        let renderItem = {
          k: key,
          r: render2
        };
        batch.push(renderItem);
        if (onRender)
          onRender();
        if (batch.length >= MAX_QUEUE_SIZE) {
          debouncedFlush();
        }
      };
      flush = (onFlushComplete = null, runtimeCommit = null, force = false) => {
        {
          if (_window._ANYA_DEV_.extensionStore.get("ws")?.io._readyState === "closed") {
            return;
          }
        }
        let renderItems = batch.length;
        let nothingToFlush = !renderItems && !runtimeCommit;
        if ((!url2 || nothingToFlush || !apiKey || SIGKILL || !session) && !force)
          return;
        {
          let DEV3 = _window._ANYA_DEV_;
          let toolbarStore2 = DEV3?.toolbarStore;
          if (toolbarStore2?.data.state === "error") {
            return;
          }
        }
        try {
          let components = new _Array(
            componentMetadata.size
          );
          let i4 = 0;
          componentMetadata.forEach((value2, key) => {
            if (false) ; else {
              components[i4++] = {
                k: key,
                i: value2.i,
                $: value2.$,
                v: value2.v,
                _: value2._
              };
            }
            value2.i = [value2.i[value2.i.length - 1] || 0];
          });
          let date = Date.now();
          let newEvents = [];
          for (let i5 = 0, len = events.length; i5 < len; i5++) {
            let event = events[i5];
            let loc = _null;
            let key = event.k;
            if (key) {
              let parts2 = key.split(".");
              loc = parts2[2] || _null;
              if (loc)
                key = parts2[0] + "." + parts2[1];
            }
            newEvents.push({
              n: event.n,
              t: event.t,
              l: Number(loc),
              d: event.d,
              k: event.k,
              a: event.a
            });
          }
          let payload = {
            batch,
            events: newEvents,
            components,
            runtimeTreeEvents: runtimeCommit ?? [],
            session,
            version: VERSION || _null,
            pv: PAYLOAD_VERSION,
            react: React9.version || _null,
            geo: void 0,
            date,
            errors,
            compilerInstanceId
          };
          errors = [];
          events = [];
          eventIndex = -1;
          let _batch = false ? [] : [...batch];
          if (true) {
            let DEV3 = _window._ANYA_DEV_;
            let toolbarStore2 = DEV3?.toolbarStore;
            if (toolbarStore2) {
              toolbarStore2.setData({
                pending: true
              });
              toolbarStore2.pushBatch(_batch, newEvents);
            }
          }
          pendingRequests++;
          transport(url2, payload, buildId, apiKey, commitHash, pendingRequests).then(() => {
            pendingRequests--;
            if (true) {
              onFlushComplete?.();
              let DEV3 = _window._ANYA_DEV_;
              let toolbarStore2 = DEV3?.toolbarStore;
              if (toolbarStore2) {
                toolbarStore2.setData({
                  pending: false
                });
                let { items } = DEV3.toolbarStore.data;
                if (["error", "dormant"].includes(toolbarStore2.data.state)) {
                  return;
                }
                toolbarStore2.setData({
                  items: renderItems + items,
                  state: "data",
                  error: null
                });
              }
            }
          }).catch(async () => {
            if (true) {
              let DEV3 = _window._ANYA_DEV_;
              let toolbarStore2 = DEV3?.toolbarStore;
              if (toolbarStore2) {
                toolbarStore2.setData({
                  pending: false,
                  error: "Failed to ingest events"
                });
              }
              batch = _batch.concat(batch);
              let INITIAL_PORT = 42423;
              if (url2) {
                let { port: parsedPort } = new URL(url2);
                let port = Number(parsedPort) - 1;
                if (port >= INITIAL_PORT) {
                  await transport(
                    url2.replace(parsedPort, String(port)),
                    payload,
                    buildId,
                    apiKey,
                    commitHash,
                    pendingRequests
                  );
                }
              }
            }
          });
        } catch (_err) {
        }
        _setTimeout(exports.reset, 0);
      };
      metadata = {
        f: flush,
        v: VERSION,
        c: false,
        a: false,
        x: kill,
        o: void 0,
        t: isTest
      };
      debouncedFlush = debounce(flush, 300);
      exports.reset = () => {
        if (SIGKILL)
          return;
        batch.length = 0;
        renderItemKeyCache.clear();
      };
      exports.registerMetadata = (key, size, isComponent, _DEV) => {
        if (isSSR || SIGKILL)
          return;
        if (_mapHas.call(componentMetadata, key))
          return;
        _mapSet.call(componentMetadata, key, {
          i: [0],
          _i: 0,
          c: size,
          n: false,
          v: isComponent,
          _: _DEV
        });
      };
      getFullTreeUpdates = () => {
        {
          let node = traverseFiber(
            currentRoot.current,
            false,
            (n3) => fiberComponentMap.has(n3) || !!(n3.alternate && fiberComponentMap.has(n3.alternate))
          );
          if (!node) {
            return;
          }
          let [updates] = computeDirtyComponentTrees(
            [new WeakRef(node)],
            fiberComponentMap,
            currentRoot.current
          );
          let nodesUpdated = dirtyNodes.map((x3) => x3.deref()).filter((fiber) => !!fiber).map((fiber) => fiberComponentMap.get(fiber)?.renderId).filter((x3) => typeof x3 !== "undefined");
          return updates.map((e4) => {
            if (e4.kind !== "update") {
              return e4;
            }
            return { ...e4, nodesUpdated };
          });
        }
      };
      wsCallbackUnsubscribe = {
        onInit: null
      };
      treeInterval = null;
      exports.init = (options = {}) => {
        if (isSSR || SIGKILL)
          return;
        _window[FLAG] = metadata;
        if (options.url) {
          url2 = options.url;
        }
        if (!buildId && options.buildId) {
          buildId = options.buildId;
        }
        if (!commitHash && options.commitHash) {
          commitHash = options.commitHash;
        }
        metadata.o = _Object.assign(options, {
          buildId,
          commitHash,
          url: url2
        });
        apiKey = "dev";
        if (inited)
          return;
        inited = true;
        {
          try {
            void fetch(`${url2}/reset`, {
              mode: (
                /* proxySessionId ? undefined : */
                "no-cors"
              ),
              method: (
                /* proxySessionId ? "POST" : */
                "GET"
              )
              // headers: {
              //   "X-Session-Id": proxySessionId || "",
              // },
            }).then(() => {
            }).catch(() => {
            });
          } catch (_err) {
          }
          console.log(`[Million Lint] Initialized with ${url2}`);
        }
        let rootCache = null;
        onCommitFiberRoot = (root) => {
          metadata.c = true;
          {
            let DEV3 = _window._ANYA_DEV_;
            let fiberRoot = root ? "current" in root ? root.current : root : null;
            let canHitCache = rootCache?.elementType === fiberRoot.elementType;
            let treeIsTracked = canHitCache ? true : traverseFiber(
              fiberRoot,
              false,
              (n3) => fiberComponentMap.has(n3) || !!(n3.alternate && fiberComponentMap.has(n3.alternate))
            );
            if (!canHitCache && treeIsTracked) {
              rootCache = fiberRoot.elementType;
              currentRoot.current = fiberRoot;
            }
            if (DEV3.toolbarStore.data.root === root.containerInfo) {
              return;
            }
          }
          syncDispatcherRefs(_window[DEVTOOLS_HOOK]);
        };
        let debouncedLazyFlush = debounce(() => onIdle(flush), FLUSH_TIMEOUT);
        onHidden(flush);
        let checkExpiry = debounce(() => {
          session = getSession();
        }, SESSION_EXPIRE_TIMEOUT);
        let handleEvent = (event) => {
          if (events[eventIndex] && events[eventIndex].n === event.type && Date.now() - events[eventIndex].d < 16) {
            return;
          }
          eventIndex = events.length;
          events.push({
            n: event.type,
            t: 0,
            d: Date.now(),
            k: _null,
            a: _null
          });
        };
        for (let event of ["click", "mouseover", "touchstart", "input"]) {
          _addEventListener(event, handleEvent);
        }
        onRender = () => {
          debouncedLazyFlush();
          checkExpiry();
          {
            let DEV3 = _window._ANYA_DEV_;
            let toolbarStore2 = DEV3?.toolbarStore;
            if (!toolbarStore2)
              return;
            if (toolbarStore2.data.state === "hidden") {
              toolbarStore2.setData({
                state: "connecting"
              });
            }
            DEV3.inited = true;
            DEV3.url = url2;
            DEV3.buildId = buildId;
            DEV3.apiKey = apiKey;
            DEV3.commitHash = commitHash;
          }
        };
        {
          let DEV3 = {
            batch,
            flush,
            componentMetadata,
            session,
            inited,
            buildId,
            apiKey,
            url: url2,
            errors,
            FLAG,
            // eslint-disable-next-line no-console
            log: console.log,
            // prettyMs: (ms: number) => ms,
            getCurrentOwner: () => currentOwner ? getMetadata(currentOwner.k)?._?.componentName : ""
          };
          _window._ANYA_DEV_ = DEV3;
          if (!localStorage.getItem("DISABLE_MILLION_TOOLBAR") && // @ts-expect-error jest is a global in test
          typeof jest === "undefined") {
            try {
              void Promise.resolve().then(() => (init_toolbar(), toolbar_exports)).then(() => {
                let rootTrackedNode = traverseFiber(
                  currentRoot.current,
                  false,
                  (n3) => fiberComponentMap.has(n3) || !!(n3.alternate && fiberComponentMap.has(n3.alternate))
                );
                if (!rootTrackedNode) {
                  return;
                }
              });
            } catch (_3) {
            }
          }
          const handleServerStartup = (ws2) => {
            let fullUpdates = getFullTreeUpdates();
            debouncedFlush(
              () => {
                if (!fullUpdates) {
                  return;
                }
                if (!recordingFiberTree) {
                  return;
                }
                ws2.send(
                  // this type design is poor/properties are redundant
                  // for ex. isFullUpdate and null flag for nodes updated
                  // can be compressed into a more specific kind:
                  JSON.stringify({
                    kind: "runtime-tree-updates",
                    events: fullUpdates,
                    nodesUpdated: null,
                    isFullUpdate: true
                  })
                );
                dirtyNodes.length = 0;
              },
              fullUpdates?.length ? fullUpdates : null,
              true
            );
          };
          void Promise.resolve().then(() => (init_extension_socket(), extension_socket_exports)).then(({ extensionStore: extensionStore2 }) => {
            {
              extensionStore2.set("ingestUrl", url2 ?? null);
              wsCallbackUnsubscribe.onInit?.();
              extensionStore2.subscribe("compilerInstanceId", (instanceId) => {
                if (instanceId) {
                  compilerInstanceId = instanceId;
                }
              });
              extensionStore2.subscribe("supportsWs", (supportsWs) => {
                if (supportsWs === null) {
                  return;
                }
                if (supportsWs) {
                  clearInterval(treeInterval);
                  return;
                }
                let timer = setInterval(() => {
                  if (editorWS) {
                    clearInterval(treeInterval);
                    return;
                  }
                  if (extensionStore2.get("error") || extensionStore2.get("ws")?.io._readyState === "closed") {
                    clearInterval(treeInterval);
                    return;
                  }
                  if (!recordingFiberTree) {
                    return;
                  }
                  if (!currentRoot.current) {
                    return;
                  }
                  if (!dirtyNodes.length) {
                    return;
                  }
                  let fullUpdates = getFullTreeUpdates();
                  if (fullUpdates) {
                    debouncedFlush(null, fullUpdates);
                    dirtyNodes.length = 0;
                  }
                }, 2e3);
                if (treeInterval) {
                  clearInterval(treeInterval);
                }
                treeInterval = timer;
              });
              extensionStore2.set("getFullTrackedFiberTree", () => {
                let fullUpdates = getFullTreeUpdates();
                return fullUpdates ?? [];
              });
              let unsubscribe = extensionStore2.subscribe("ws", (ws2) => {
                clearInterval(treeInterval);
                editorWS = ws2;
                if (ws2) {
                  handleServerStartup(ws2);
                  ws2.on("message", (anyMessage) => {
                    devInvariant(
                      typeof anyMessage === "string",
                      "always must be a string"
                    );
                    const message = JSON.parse(anyMessage);
                    switch (message.kind) {
                      case "editor-connection-open": {
                        handleServerStartup(ws2);
                        return;
                      }
                      case "needs-refresh": {
                        if (message.tabId && message.tabId !== extensionStore2.get("tabId")) {
                          return;
                        }
                        let fullUpdates = getFullTreeUpdates();
                        if (!fullUpdates?.length) {
                          return;
                        }
                        ws2.send(
                          JSON.stringify({
                            kind: "runtime-tree-updates",
                            events: fullUpdates,
                            nodesUpdated: null,
                            isFullUpdate: true
                          })
                        );
                        return;
                      }
                      case "runtime-tree-recording": {
                        if (recordingFiberTree === message.value) {
                          return;
                        }
                        recordingFiberTree = message.value;
                        ws2.send(
                          JSON.stringify({
                            kind: "runtime-tree-recording-ack",
                            tabId: extensionStore2.get("tabId")
                          })
                        );
                        return;
                      }
                    }
                  });
                }
              });
              wsCallbackUnsubscribe.onInit = unsubscribe;
            }
          });
        }
      };
    }
  });

  // runtime/src/index.ts
  init_core();
  init_react_internals();
  /**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  /*! Bundled license information:

  react/cjs/react.development.js:
    (**
     * @license React
     * react.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *)

  scheduler/cjs/scheduler.development.js:
    (**
     * @license React
     * scheduler.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *)

  react-dom/cjs/react-dom.development.js:
    (**
     * @license React
     * react-dom.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *)
    (**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     *)
  */

  return exports;

})({});
